// Code generated by ogen, DO NOT EDIT.

package oas

// Bad request response.
// Ref: #/components/schemas/BadRequest
type BadRequest struct {
	Message OptString `json:"message"`
}

// GetMessage returns the value of Message.
func (s *BadRequest) GetMessage() OptString {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *BadRequest) SetMessage(val OptString) {
	s.Message = val
}

func (*BadRequest) createDatabaseClusterRes()  {}
func (*BadRequest) listDatabasesRes()          {}
func (*BadRequest) listKubernetesClustersRes() {}
func (*BadRequest) registerKubernetesRes()     {}

// DatabaseCluster is the Schema for the databases API.
// Ref: #
type DatabaseCluster struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                `json:"kind"`
	Metadata *DatabaseClusterMetadata `json:"metadata"`
	// DatabaseSpec defines the desired state of Database.
	Spec OptDatabaseClusterSpec `json:"spec"`
	// DatabaseClusterStatus defines the observed state of Database.
	Status OptDatabaseClusterStatus `json:"status"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *DatabaseCluster) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetKind returns the value of Kind.
func (s *DatabaseCluster) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *DatabaseCluster) GetMetadata() *DatabaseClusterMetadata {
	return s.Metadata
}

// GetSpec returns the value of Spec.
func (s *DatabaseCluster) GetSpec() OptDatabaseClusterSpec {
	return s.Spec
}

// GetStatus returns the value of Status.
func (s *DatabaseCluster) GetStatus() OptDatabaseClusterStatus {
	return s.Status
}

// SetApiVersion sets the value of ApiVersion.
func (s *DatabaseCluster) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetKind sets the value of Kind.
func (s *DatabaseCluster) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *DatabaseCluster) SetMetadata(val *DatabaseClusterMetadata) {
	s.Metadata = val
}

// SetSpec sets the value of Spec.
func (s *DatabaseCluster) SetSpec(val OptDatabaseClusterSpec) {
	s.Spec = val
}

// SetStatus sets the value of Status.
func (s *DatabaseCluster) SetStatus(val OptDatabaseClusterStatus) {
	s.Status = val
}

func (*DatabaseCluster) createDatabaseClusterRes() {}

type DatabaseClusterList []DatabaseCluster

func (*DatabaseClusterList) listDatabasesRes() {}

type DatabaseClusterMetadata struct{}

// DatabaseSpec defines the desired state of Database.
type DatabaseClusterSpec struct {
	// Backup contains backup settings.
	Backup OptDatabaseClusterSpecBackup `json:"backup"`
	// ClusterSize is amount of nodes that required for the cluster. A database starts in cluster mode if
	// clusterSize >= 3.
	ClusterSize int32 `json:"clusterSize"`
	// DatabaseConfig contains a config settings for the specified database.
	DatabaseConfig string `json:"databaseConfig"`
	// DatabaseVersion sets from version service and uses the recommended version by default.
	DatabaseImage string `json:"databaseImage"`
	// Database type stands for supported databases by the PMM API Now it's pxc or psmdb types but we can
	// extend it.
	DatabaseType string `json:"databaseType"`
	// DBInstance represents resource requests for a database cluster.
	DbInstance DatabaseClusterSpecDbInstance `json:"dbInstance"`
	// LoadBalancer contains a load balancer settings. For PXC it's haproxy or proxysql. For PSMDB it's
	// mongos.
	LoadBalancer OptDatabaseClusterSpecLoadBalancer `json:"loadBalancer"`
	// Monitoring contains a monitoring settings.
	Monitoring OptDatabaseClusterSpecMonitoring `json:"monitoring"`
	// Pause represents is a cluster paused or not.
	Pause OptBool `json:"pause"`
	// SecretsName contains name of a secrets file for a database cluster.
	SecretsName OptString `json:"secretsName"`
}

// GetBackup returns the value of Backup.
func (s *DatabaseClusterSpec) GetBackup() OptDatabaseClusterSpecBackup {
	return s.Backup
}

// GetClusterSize returns the value of ClusterSize.
func (s *DatabaseClusterSpec) GetClusterSize() int32 {
	return s.ClusterSize
}

// GetDatabaseConfig returns the value of DatabaseConfig.
func (s *DatabaseClusterSpec) GetDatabaseConfig() string {
	return s.DatabaseConfig
}

// GetDatabaseImage returns the value of DatabaseImage.
func (s *DatabaseClusterSpec) GetDatabaseImage() string {
	return s.DatabaseImage
}

// GetDatabaseType returns the value of DatabaseType.
func (s *DatabaseClusterSpec) GetDatabaseType() string {
	return s.DatabaseType
}

// GetDbInstance returns the value of DbInstance.
func (s *DatabaseClusterSpec) GetDbInstance() DatabaseClusterSpecDbInstance {
	return s.DbInstance
}

// GetLoadBalancer returns the value of LoadBalancer.
func (s *DatabaseClusterSpec) GetLoadBalancer() OptDatabaseClusterSpecLoadBalancer {
	return s.LoadBalancer
}

// GetMonitoring returns the value of Monitoring.
func (s *DatabaseClusterSpec) GetMonitoring() OptDatabaseClusterSpecMonitoring {
	return s.Monitoring
}

// GetPause returns the value of Pause.
func (s *DatabaseClusterSpec) GetPause() OptBool {
	return s.Pause
}

// GetSecretsName returns the value of SecretsName.
func (s *DatabaseClusterSpec) GetSecretsName() OptString {
	return s.SecretsName
}

// SetBackup sets the value of Backup.
func (s *DatabaseClusterSpec) SetBackup(val OptDatabaseClusterSpecBackup) {
	s.Backup = val
}

// SetClusterSize sets the value of ClusterSize.
func (s *DatabaseClusterSpec) SetClusterSize(val int32) {
	s.ClusterSize = val
}

// SetDatabaseConfig sets the value of DatabaseConfig.
func (s *DatabaseClusterSpec) SetDatabaseConfig(val string) {
	s.DatabaseConfig = val
}

// SetDatabaseImage sets the value of DatabaseImage.
func (s *DatabaseClusterSpec) SetDatabaseImage(val string) {
	s.DatabaseImage = val
}

// SetDatabaseType sets the value of DatabaseType.
func (s *DatabaseClusterSpec) SetDatabaseType(val string) {
	s.DatabaseType = val
}

// SetDbInstance sets the value of DbInstance.
func (s *DatabaseClusterSpec) SetDbInstance(val DatabaseClusterSpecDbInstance) {
	s.DbInstance = val
}

// SetLoadBalancer sets the value of LoadBalancer.
func (s *DatabaseClusterSpec) SetLoadBalancer(val OptDatabaseClusterSpecLoadBalancer) {
	s.LoadBalancer = val
}

// SetMonitoring sets the value of Monitoring.
func (s *DatabaseClusterSpec) SetMonitoring(val OptDatabaseClusterSpecMonitoring) {
	s.Monitoring = val
}

// SetPause sets the value of Pause.
func (s *DatabaseClusterSpec) SetPause(val OptBool) {
	s.Pause = val
}

// SetSecretsName sets the value of SecretsName.
func (s *DatabaseClusterSpec) SetSecretsName(val OptString) {
	s.SecretsName = val
}

// Backup contains backup settings.
type DatabaseClusterSpecBackup struct {
	Annotations OptDatabaseClusterSpecBackupAnnotations `json:"annotations"`
	// SecurityContext holds security configuration that will be applied to a container. Some fields are
	// present in both SecurityContext and PodSecurityContext.  When both are set, the values in
	// SecurityContext take precedence.
	ContainerSecurityContext OptDatabaseClusterSpecBackupContainerSecurityContext `json:"containerSecurityContext"`
	Enabled                  OptBool                                              `json:"enabled"`
	Image                    OptString                                            `json:"image"`
	// PullPolicy describes a policy for if/when to pull a container image.
	ImagePullPolicy  OptString                                       `json:"imagePullPolicy"`
	ImagePullSecrets []DatabaseClusterSpecBackupImagePullSecretsItem `json:"imagePullSecrets"`
	InitImage        OptString                                       `json:"initImage"`
	Labels           OptDatabaseClusterSpecBackupLabels              `json:"labels"`
	// ResourceRequirements describes the compute resource requirements.
	Resources          OptDatabaseClusterSpecBackupResources   `json:"resources"`
	Schedule           []DatabaseClusterSpecBackupScheduleItem `json:"schedule"`
	ServiceAccountName OptString                               `json:"serviceAccountName"`
	Storages           OptDatabaseClusterSpecBackupStorages    `json:"storages"`
}

// GetAnnotations returns the value of Annotations.
func (s *DatabaseClusterSpecBackup) GetAnnotations() OptDatabaseClusterSpecBackupAnnotations {
	return s.Annotations
}

// GetContainerSecurityContext returns the value of ContainerSecurityContext.
func (s *DatabaseClusterSpecBackup) GetContainerSecurityContext() OptDatabaseClusterSpecBackupContainerSecurityContext {
	return s.ContainerSecurityContext
}

// GetEnabled returns the value of Enabled.
func (s *DatabaseClusterSpecBackup) GetEnabled() OptBool {
	return s.Enabled
}

// GetImage returns the value of Image.
func (s *DatabaseClusterSpecBackup) GetImage() OptString {
	return s.Image
}

// GetImagePullPolicy returns the value of ImagePullPolicy.
func (s *DatabaseClusterSpecBackup) GetImagePullPolicy() OptString {
	return s.ImagePullPolicy
}

// GetImagePullSecrets returns the value of ImagePullSecrets.
func (s *DatabaseClusterSpecBackup) GetImagePullSecrets() []DatabaseClusterSpecBackupImagePullSecretsItem {
	return s.ImagePullSecrets
}

// GetInitImage returns the value of InitImage.
func (s *DatabaseClusterSpecBackup) GetInitImage() OptString {
	return s.InitImage
}

// GetLabels returns the value of Labels.
func (s *DatabaseClusterSpecBackup) GetLabels() OptDatabaseClusterSpecBackupLabels {
	return s.Labels
}

// GetResources returns the value of Resources.
func (s *DatabaseClusterSpecBackup) GetResources() OptDatabaseClusterSpecBackupResources {
	return s.Resources
}

// GetSchedule returns the value of Schedule.
func (s *DatabaseClusterSpecBackup) GetSchedule() []DatabaseClusterSpecBackupScheduleItem {
	return s.Schedule
}

// GetServiceAccountName returns the value of ServiceAccountName.
func (s *DatabaseClusterSpecBackup) GetServiceAccountName() OptString {
	return s.ServiceAccountName
}

// GetStorages returns the value of Storages.
func (s *DatabaseClusterSpecBackup) GetStorages() OptDatabaseClusterSpecBackupStorages {
	return s.Storages
}

// SetAnnotations sets the value of Annotations.
func (s *DatabaseClusterSpecBackup) SetAnnotations(val OptDatabaseClusterSpecBackupAnnotations) {
	s.Annotations = val
}

// SetContainerSecurityContext sets the value of ContainerSecurityContext.
func (s *DatabaseClusterSpecBackup) SetContainerSecurityContext(val OptDatabaseClusterSpecBackupContainerSecurityContext) {
	s.ContainerSecurityContext = val
}

// SetEnabled sets the value of Enabled.
func (s *DatabaseClusterSpecBackup) SetEnabled(val OptBool) {
	s.Enabled = val
}

// SetImage sets the value of Image.
func (s *DatabaseClusterSpecBackup) SetImage(val OptString) {
	s.Image = val
}

// SetImagePullPolicy sets the value of ImagePullPolicy.
func (s *DatabaseClusterSpecBackup) SetImagePullPolicy(val OptString) {
	s.ImagePullPolicy = val
}

// SetImagePullSecrets sets the value of ImagePullSecrets.
func (s *DatabaseClusterSpecBackup) SetImagePullSecrets(val []DatabaseClusterSpecBackupImagePullSecretsItem) {
	s.ImagePullSecrets = val
}

// SetInitImage sets the value of InitImage.
func (s *DatabaseClusterSpecBackup) SetInitImage(val OptString) {
	s.InitImage = val
}

// SetLabels sets the value of Labels.
func (s *DatabaseClusterSpecBackup) SetLabels(val OptDatabaseClusterSpecBackupLabels) {
	s.Labels = val
}

// SetResources sets the value of Resources.
func (s *DatabaseClusterSpecBackup) SetResources(val OptDatabaseClusterSpecBackupResources) {
	s.Resources = val
}

// SetSchedule sets the value of Schedule.
func (s *DatabaseClusterSpecBackup) SetSchedule(val []DatabaseClusterSpecBackupScheduleItem) {
	s.Schedule = val
}

// SetServiceAccountName sets the value of ServiceAccountName.
func (s *DatabaseClusterSpecBackup) SetServiceAccountName(val OptString) {
	s.ServiceAccountName = val
}

// SetStorages sets the value of Storages.
func (s *DatabaseClusterSpecBackup) SetStorages(val OptDatabaseClusterSpecBackupStorages) {
	s.Storages = val
}

type DatabaseClusterSpecBackupAnnotations map[string]string

func (s *DatabaseClusterSpecBackupAnnotations) init() DatabaseClusterSpecBackupAnnotations {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// SecurityContext holds security configuration that will be applied to a container. Some fields are
// present in both SecurityContext and PodSecurityContext.  When both are set, the values in
// SecurityContext take precedence.
type DatabaseClusterSpecBackupContainerSecurityContext struct {
	// AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent
	// process. This bool directly controls if the no_new_privs flag will be set on the container process.
	//  AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has
	// CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
	AllowPrivilegeEscalation OptBool `json:"allowPrivilegeEscalation"`
	// The capabilities to add/drop when running containers. Defaults to the default set of capabilities
	// granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
	Capabilities OptDatabaseClusterSpecBackupContainerSecurityContextCapabilities `json:"capabilities"`
	// Run container in privileged mode. Processes in privileged containers are essentially equivalent to
	// root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is
	// windows.
	Privileged OptBool `json:"privileged"`
	// ProcMount denotes the type of proc mount to use for the containers. The default is
	// DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths.
	// This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set
	// when spec.os.name is windows.
	ProcMount OptString `json:"procMount"`
	// Whether this container has a read-only root filesystem. Default is false. Note that this field
	// cannot be set when spec.os.name is windows.
	ReadOnlyRootFilesystem OptBool `json:"readOnlyRootFilesystem"`
	// The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be
	// set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value
	// specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.
	// name is windows.
	RunAsGroup OptInt64 `json:"runAsGroup"`
	// Indicates that the container must run as a non-root user. If true, the Kubelet will validate the
	// image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if
	// it does. If unset or false, no such validation will be performed. May also be set in
	// PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in
	// SecurityContext takes precedence.
	RunAsNonRoot OptBool `json:"runAsNonRoot"`
	// The UID to run the entrypoint of the container process. Defaults to user specified in image
	// metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext
	// and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this
	// field cannot be set when spec.os.name is windows.
	RunAsUser OptInt64 `json:"runAsUser"`
	// The SELinux context to be applied to the container. If unspecified, the container runtime will
	// allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If
	// set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes
	// precedence. Note that this field cannot be set when spec.os.name is windows.
	SeLinuxOptions OptDatabaseClusterSpecBackupContainerSecurityContextSeLinuxOptions `json:"seLinuxOptions"`
	// The seccomp options to use by this container. If seccomp options are provided at both the pod &
	// container level, the container options override the pod options. Note that this field cannot be
	// set when spec.os.name is windows.
	SeccompProfile OptDatabaseClusterSpecBackupContainerSecurityContextSeccompProfile `json:"seccompProfile"`
	// The Windows specific settings applied to all containers. If unspecified, the options from the
	// PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value
	// specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.
	// name is linux.
	WindowsOptions OptDatabaseClusterSpecBackupContainerSecurityContextWindowsOptions `json:"windowsOptions"`
}

// GetAllowPrivilegeEscalation returns the value of AllowPrivilegeEscalation.
func (s *DatabaseClusterSpecBackupContainerSecurityContext) GetAllowPrivilegeEscalation() OptBool {
	return s.AllowPrivilegeEscalation
}

// GetCapabilities returns the value of Capabilities.
func (s *DatabaseClusterSpecBackupContainerSecurityContext) GetCapabilities() OptDatabaseClusterSpecBackupContainerSecurityContextCapabilities {
	return s.Capabilities
}

// GetPrivileged returns the value of Privileged.
func (s *DatabaseClusterSpecBackupContainerSecurityContext) GetPrivileged() OptBool {
	return s.Privileged
}

// GetProcMount returns the value of ProcMount.
func (s *DatabaseClusterSpecBackupContainerSecurityContext) GetProcMount() OptString {
	return s.ProcMount
}

// GetReadOnlyRootFilesystem returns the value of ReadOnlyRootFilesystem.
func (s *DatabaseClusterSpecBackupContainerSecurityContext) GetReadOnlyRootFilesystem() OptBool {
	return s.ReadOnlyRootFilesystem
}

// GetRunAsGroup returns the value of RunAsGroup.
func (s *DatabaseClusterSpecBackupContainerSecurityContext) GetRunAsGroup() OptInt64 {
	return s.RunAsGroup
}

// GetRunAsNonRoot returns the value of RunAsNonRoot.
func (s *DatabaseClusterSpecBackupContainerSecurityContext) GetRunAsNonRoot() OptBool {
	return s.RunAsNonRoot
}

// GetRunAsUser returns the value of RunAsUser.
func (s *DatabaseClusterSpecBackupContainerSecurityContext) GetRunAsUser() OptInt64 {
	return s.RunAsUser
}

// GetSeLinuxOptions returns the value of SeLinuxOptions.
func (s *DatabaseClusterSpecBackupContainerSecurityContext) GetSeLinuxOptions() OptDatabaseClusterSpecBackupContainerSecurityContextSeLinuxOptions {
	return s.SeLinuxOptions
}

// GetSeccompProfile returns the value of SeccompProfile.
func (s *DatabaseClusterSpecBackupContainerSecurityContext) GetSeccompProfile() OptDatabaseClusterSpecBackupContainerSecurityContextSeccompProfile {
	return s.SeccompProfile
}

// GetWindowsOptions returns the value of WindowsOptions.
func (s *DatabaseClusterSpecBackupContainerSecurityContext) GetWindowsOptions() OptDatabaseClusterSpecBackupContainerSecurityContextWindowsOptions {
	return s.WindowsOptions
}

// SetAllowPrivilegeEscalation sets the value of AllowPrivilegeEscalation.
func (s *DatabaseClusterSpecBackupContainerSecurityContext) SetAllowPrivilegeEscalation(val OptBool) {
	s.AllowPrivilegeEscalation = val
}

// SetCapabilities sets the value of Capabilities.
func (s *DatabaseClusterSpecBackupContainerSecurityContext) SetCapabilities(val OptDatabaseClusterSpecBackupContainerSecurityContextCapabilities) {
	s.Capabilities = val
}

// SetPrivileged sets the value of Privileged.
func (s *DatabaseClusterSpecBackupContainerSecurityContext) SetPrivileged(val OptBool) {
	s.Privileged = val
}

// SetProcMount sets the value of ProcMount.
func (s *DatabaseClusterSpecBackupContainerSecurityContext) SetProcMount(val OptString) {
	s.ProcMount = val
}

// SetReadOnlyRootFilesystem sets the value of ReadOnlyRootFilesystem.
func (s *DatabaseClusterSpecBackupContainerSecurityContext) SetReadOnlyRootFilesystem(val OptBool) {
	s.ReadOnlyRootFilesystem = val
}

// SetRunAsGroup sets the value of RunAsGroup.
func (s *DatabaseClusterSpecBackupContainerSecurityContext) SetRunAsGroup(val OptInt64) {
	s.RunAsGroup = val
}

// SetRunAsNonRoot sets the value of RunAsNonRoot.
func (s *DatabaseClusterSpecBackupContainerSecurityContext) SetRunAsNonRoot(val OptBool) {
	s.RunAsNonRoot = val
}

// SetRunAsUser sets the value of RunAsUser.
func (s *DatabaseClusterSpecBackupContainerSecurityContext) SetRunAsUser(val OptInt64) {
	s.RunAsUser = val
}

// SetSeLinuxOptions sets the value of SeLinuxOptions.
func (s *DatabaseClusterSpecBackupContainerSecurityContext) SetSeLinuxOptions(val OptDatabaseClusterSpecBackupContainerSecurityContextSeLinuxOptions) {
	s.SeLinuxOptions = val
}

// SetSeccompProfile sets the value of SeccompProfile.
func (s *DatabaseClusterSpecBackupContainerSecurityContext) SetSeccompProfile(val OptDatabaseClusterSpecBackupContainerSecurityContextSeccompProfile) {
	s.SeccompProfile = val
}

// SetWindowsOptions sets the value of WindowsOptions.
func (s *DatabaseClusterSpecBackupContainerSecurityContext) SetWindowsOptions(val OptDatabaseClusterSpecBackupContainerSecurityContextWindowsOptions) {
	s.WindowsOptions = val
}

// The capabilities to add/drop when running containers. Defaults to the default set of capabilities
// granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
type DatabaseClusterSpecBackupContainerSecurityContextCapabilities struct {
	// Added capabilities.
	Add []string `json:"add"`
	// Removed capabilities.
	Drop []string `json:"drop"`
}

// GetAdd returns the value of Add.
func (s *DatabaseClusterSpecBackupContainerSecurityContextCapabilities) GetAdd() []string {
	return s.Add
}

// GetDrop returns the value of Drop.
func (s *DatabaseClusterSpecBackupContainerSecurityContextCapabilities) GetDrop() []string {
	return s.Drop
}

// SetAdd sets the value of Add.
func (s *DatabaseClusterSpecBackupContainerSecurityContextCapabilities) SetAdd(val []string) {
	s.Add = val
}

// SetDrop sets the value of Drop.
func (s *DatabaseClusterSpecBackupContainerSecurityContextCapabilities) SetDrop(val []string) {
	s.Drop = val
}

// The SELinux context to be applied to the container. If unspecified, the container runtime will
// allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If
// set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes
// precedence. Note that this field cannot be set when spec.os.name is windows.
type DatabaseClusterSpecBackupContainerSecurityContextSeLinuxOptions struct {
	// Level is SELinux level label that applies to the container.
	Level OptString `json:"level"`
	// Role is a SELinux role label that applies to the container.
	Role OptString `json:"role"`
	// Type is a SELinux type label that applies to the container.
	Type OptString `json:"type"`
	// User is a SELinux user label that applies to the container.
	User OptString `json:"user"`
}

// GetLevel returns the value of Level.
func (s *DatabaseClusterSpecBackupContainerSecurityContextSeLinuxOptions) GetLevel() OptString {
	return s.Level
}

// GetRole returns the value of Role.
func (s *DatabaseClusterSpecBackupContainerSecurityContextSeLinuxOptions) GetRole() OptString {
	return s.Role
}

// GetType returns the value of Type.
func (s *DatabaseClusterSpecBackupContainerSecurityContextSeLinuxOptions) GetType() OptString {
	return s.Type
}

// GetUser returns the value of User.
func (s *DatabaseClusterSpecBackupContainerSecurityContextSeLinuxOptions) GetUser() OptString {
	return s.User
}

// SetLevel sets the value of Level.
func (s *DatabaseClusterSpecBackupContainerSecurityContextSeLinuxOptions) SetLevel(val OptString) {
	s.Level = val
}

// SetRole sets the value of Role.
func (s *DatabaseClusterSpecBackupContainerSecurityContextSeLinuxOptions) SetRole(val OptString) {
	s.Role = val
}

// SetType sets the value of Type.
func (s *DatabaseClusterSpecBackupContainerSecurityContextSeLinuxOptions) SetType(val OptString) {
	s.Type = val
}

// SetUser sets the value of User.
func (s *DatabaseClusterSpecBackupContainerSecurityContextSeLinuxOptions) SetUser(val OptString) {
	s.User = val
}

// The seccomp options to use by this container. If seccomp options are provided at both the pod &
// container level, the container options override the pod options. Note that this field cannot be
// set when spec.os.name is windows.
type DatabaseClusterSpecBackupContainerSecurityContextSeccompProfile struct {
	// LocalhostProfile indicates a profile defined in a file on the node should be used. The profile
	// must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's
	// configured seccomp profile location. Must only be set if type is "Localhost".
	LocalhostProfile OptString `json:"localhostProfile"`
	// Type indicates which kind of seccomp profile will be applied. Valid options are:
	// Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container
	// runtime default profile should be used. Unconfined - no profile should be applied.
	Type string `json:"type"`
}

// GetLocalhostProfile returns the value of LocalhostProfile.
func (s *DatabaseClusterSpecBackupContainerSecurityContextSeccompProfile) GetLocalhostProfile() OptString {
	return s.LocalhostProfile
}

// GetType returns the value of Type.
func (s *DatabaseClusterSpecBackupContainerSecurityContextSeccompProfile) GetType() string {
	return s.Type
}

// SetLocalhostProfile sets the value of LocalhostProfile.
func (s *DatabaseClusterSpecBackupContainerSecurityContextSeccompProfile) SetLocalhostProfile(val OptString) {
	s.LocalhostProfile = val
}

// SetType sets the value of Type.
func (s *DatabaseClusterSpecBackupContainerSecurityContextSeccompProfile) SetType(val string) {
	s.Type = val
}

// The Windows specific settings applied to all containers. If unspecified, the options from the
// PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value
// specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.
// name is linux.
type DatabaseClusterSpecBackupContainerSecurityContextWindowsOptions struct {
	// GMSACredentialSpec is where the GMSA admission webhook (https://github.
	// com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the
	// GMSACredentialSpecName field.
	GmsaCredentialSpec OptString `json:"gmsaCredentialSpec"`
	// GMSACredentialSpecName is the name of the GMSA credential spec to use.
	GmsaCredentialSpecName OptString `json:"gmsaCredentialSpecName"`
	// HostProcess determines if a container should be run as a 'Host Process' container. This field is
	// alpha-level and will only be honored by components that enable the WindowsHostProcessContainers
	// feature flag. Setting this field without the feature flag will result in errors when validating
	// the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not
	// allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if
	// HostProcess is true then HostNetwork must also be set to true.
	HostProcess OptBool `json:"hostProcess"`
	// The UserName in Windows to run the entrypoint of the container process. Defaults to the user
	// specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both
	// SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
	RunAsUserName OptString `json:"runAsUserName"`
}

// GetGmsaCredentialSpec returns the value of GmsaCredentialSpec.
func (s *DatabaseClusterSpecBackupContainerSecurityContextWindowsOptions) GetGmsaCredentialSpec() OptString {
	return s.GmsaCredentialSpec
}

// GetGmsaCredentialSpecName returns the value of GmsaCredentialSpecName.
func (s *DatabaseClusterSpecBackupContainerSecurityContextWindowsOptions) GetGmsaCredentialSpecName() OptString {
	return s.GmsaCredentialSpecName
}

// GetHostProcess returns the value of HostProcess.
func (s *DatabaseClusterSpecBackupContainerSecurityContextWindowsOptions) GetHostProcess() OptBool {
	return s.HostProcess
}

// GetRunAsUserName returns the value of RunAsUserName.
func (s *DatabaseClusterSpecBackupContainerSecurityContextWindowsOptions) GetRunAsUserName() OptString {
	return s.RunAsUserName
}

// SetGmsaCredentialSpec sets the value of GmsaCredentialSpec.
func (s *DatabaseClusterSpecBackupContainerSecurityContextWindowsOptions) SetGmsaCredentialSpec(val OptString) {
	s.GmsaCredentialSpec = val
}

// SetGmsaCredentialSpecName sets the value of GmsaCredentialSpecName.
func (s *DatabaseClusterSpecBackupContainerSecurityContextWindowsOptions) SetGmsaCredentialSpecName(val OptString) {
	s.GmsaCredentialSpecName = val
}

// SetHostProcess sets the value of HostProcess.
func (s *DatabaseClusterSpecBackupContainerSecurityContextWindowsOptions) SetHostProcess(val OptBool) {
	s.HostProcess = val
}

// SetRunAsUserName sets the value of RunAsUserName.
func (s *DatabaseClusterSpecBackupContainerSecurityContextWindowsOptions) SetRunAsUserName(val OptString) {
	s.RunAsUserName = val
}

// LocalObjectReference contains enough information to let you locate the referenced object inside
// the same namespace.
type DatabaseClusterSpecBackupImagePullSecretsItem struct {
	// Name of the referent. More info: https://kubernetes.
	// io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields.
	// apiVersion, kind, uid?.
	Name OptString `json:"name"`
}

// GetName returns the value of Name.
func (s *DatabaseClusterSpecBackupImagePullSecretsItem) GetName() OptString {
	return s.Name
}

// SetName sets the value of Name.
func (s *DatabaseClusterSpecBackupImagePullSecretsItem) SetName(val OptString) {
	s.Name = val
}

type DatabaseClusterSpecBackupLabels map[string]string

func (s *DatabaseClusterSpecBackupLabels) init() DatabaseClusterSpecBackupLabels {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// ResourceRequirements describes the compute resource requirements.
type DatabaseClusterSpecBackupResources struct {
	// Claims lists the names of resources, defined in spec.resourceClaims, that are used by this
	// container.
	// This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
	// This field is immutable. It can only be set for containers.
	Claims []DatabaseClusterSpecBackupResourcesClaimsItem `json:"claims"`
	// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.
	// io/docs/concepts/configuration/manage-resources-containers/.
	Limits OptDatabaseClusterSpecBackupResourcesLimits `json:"limits"`
	// Requests describes the minimum amount of compute resources required. If Requests is omitted for a
	// container, it defaults to Limits if that is explicitly specified, otherwise to an
	// implementation-defined value. More info: https://kubernetes.
	// io/docs/concepts/configuration/manage-resources-containers/.
	Requests OptDatabaseClusterSpecBackupResourcesRequests `json:"requests"`
}

// GetClaims returns the value of Claims.
func (s *DatabaseClusterSpecBackupResources) GetClaims() []DatabaseClusterSpecBackupResourcesClaimsItem {
	return s.Claims
}

// GetLimits returns the value of Limits.
func (s *DatabaseClusterSpecBackupResources) GetLimits() OptDatabaseClusterSpecBackupResourcesLimits {
	return s.Limits
}

// GetRequests returns the value of Requests.
func (s *DatabaseClusterSpecBackupResources) GetRequests() OptDatabaseClusterSpecBackupResourcesRequests {
	return s.Requests
}

// SetClaims sets the value of Claims.
func (s *DatabaseClusterSpecBackupResources) SetClaims(val []DatabaseClusterSpecBackupResourcesClaimsItem) {
	s.Claims = val
}

// SetLimits sets the value of Limits.
func (s *DatabaseClusterSpecBackupResources) SetLimits(val OptDatabaseClusterSpecBackupResourcesLimits) {
	s.Limits = val
}

// SetRequests sets the value of Requests.
func (s *DatabaseClusterSpecBackupResources) SetRequests(val OptDatabaseClusterSpecBackupResourcesRequests) {
	s.Requests = val
}

// ResourceClaim references one entry in PodSpec.ResourceClaims.
type DatabaseClusterSpecBackupResourcesClaimsItem struct {
	// Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is
	// used. It makes that resource available inside a container.
	Name string `json:"name"`
}

// GetName returns the value of Name.
func (s *DatabaseClusterSpecBackupResourcesClaimsItem) GetName() string {
	return s.Name
}

// SetName sets the value of Name.
func (s *DatabaseClusterSpecBackupResourcesClaimsItem) SetName(val string) {
	s.Name = val
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.
// io/docs/concepts/configuration/manage-resources-containers/.
type DatabaseClusterSpecBackupResourcesLimits map[string]DatabaseClusterSpecBackupResourcesLimitsItem

func (s *DatabaseClusterSpecBackupResourcesLimits) init() DatabaseClusterSpecBackupResourcesLimits {
	m := *s
	if m == nil {
		m = map[string]DatabaseClusterSpecBackupResourcesLimitsItem{}
		*s = m
	}
	return m
}

// DatabaseClusterSpecBackupResourcesLimitsItem represents sum type.
type DatabaseClusterSpecBackupResourcesLimitsItem struct {
	Type   DatabaseClusterSpecBackupResourcesLimitsItemType // switch on this field
	Int    int
	String string
}

// DatabaseClusterSpecBackupResourcesLimitsItemType is oneOf type of DatabaseClusterSpecBackupResourcesLimitsItem.
type DatabaseClusterSpecBackupResourcesLimitsItemType string

// Possible values for DatabaseClusterSpecBackupResourcesLimitsItemType.
const (
	IntDatabaseClusterSpecBackupResourcesLimitsItem    DatabaseClusterSpecBackupResourcesLimitsItemType = "int"
	StringDatabaseClusterSpecBackupResourcesLimitsItem DatabaseClusterSpecBackupResourcesLimitsItemType = "string"
)

// IsInt reports whether DatabaseClusterSpecBackupResourcesLimitsItem is int.
func (s DatabaseClusterSpecBackupResourcesLimitsItem) IsInt() bool {
	return s.Type == IntDatabaseClusterSpecBackupResourcesLimitsItem
}

// IsString reports whether DatabaseClusterSpecBackupResourcesLimitsItem is string.
func (s DatabaseClusterSpecBackupResourcesLimitsItem) IsString() bool {
	return s.Type == StringDatabaseClusterSpecBackupResourcesLimitsItem
}

// SetInt sets DatabaseClusterSpecBackupResourcesLimitsItem to int.
func (s *DatabaseClusterSpecBackupResourcesLimitsItem) SetInt(v int) {
	s.Type = IntDatabaseClusterSpecBackupResourcesLimitsItem
	s.Int = v
}

// GetInt returns int and true boolean if DatabaseClusterSpecBackupResourcesLimitsItem is int.
func (s DatabaseClusterSpecBackupResourcesLimitsItem) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntDatabaseClusterSpecBackupResourcesLimitsItem returns new DatabaseClusterSpecBackupResourcesLimitsItem from int.
func NewIntDatabaseClusterSpecBackupResourcesLimitsItem(v int) DatabaseClusterSpecBackupResourcesLimitsItem {
	var s DatabaseClusterSpecBackupResourcesLimitsItem
	s.SetInt(v)
	return s
}

// SetString sets DatabaseClusterSpecBackupResourcesLimitsItem to string.
func (s *DatabaseClusterSpecBackupResourcesLimitsItem) SetString(v string) {
	s.Type = StringDatabaseClusterSpecBackupResourcesLimitsItem
	s.String = v
}

// GetString returns string and true boolean if DatabaseClusterSpecBackupResourcesLimitsItem is string.
func (s DatabaseClusterSpecBackupResourcesLimitsItem) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringDatabaseClusterSpecBackupResourcesLimitsItem returns new DatabaseClusterSpecBackupResourcesLimitsItem from string.
func NewStringDatabaseClusterSpecBackupResourcesLimitsItem(v string) DatabaseClusterSpecBackupResourcesLimitsItem {
	var s DatabaseClusterSpecBackupResourcesLimitsItem
	s.SetString(v)
	return s
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a
// container, it defaults to Limits if that is explicitly specified, otherwise to an
// implementation-defined value. More info: https://kubernetes.
// io/docs/concepts/configuration/manage-resources-containers/.
type DatabaseClusterSpecBackupResourcesRequests map[string]DatabaseClusterSpecBackupResourcesRequestsItem

func (s *DatabaseClusterSpecBackupResourcesRequests) init() DatabaseClusterSpecBackupResourcesRequests {
	m := *s
	if m == nil {
		m = map[string]DatabaseClusterSpecBackupResourcesRequestsItem{}
		*s = m
	}
	return m
}

// DatabaseClusterSpecBackupResourcesRequestsItem represents sum type.
type DatabaseClusterSpecBackupResourcesRequestsItem struct {
	Type   DatabaseClusterSpecBackupResourcesRequestsItemType // switch on this field
	Int    int
	String string
}

// DatabaseClusterSpecBackupResourcesRequestsItemType is oneOf type of DatabaseClusterSpecBackupResourcesRequestsItem.
type DatabaseClusterSpecBackupResourcesRequestsItemType string

// Possible values for DatabaseClusterSpecBackupResourcesRequestsItemType.
const (
	IntDatabaseClusterSpecBackupResourcesRequestsItem    DatabaseClusterSpecBackupResourcesRequestsItemType = "int"
	StringDatabaseClusterSpecBackupResourcesRequestsItem DatabaseClusterSpecBackupResourcesRequestsItemType = "string"
)

// IsInt reports whether DatabaseClusterSpecBackupResourcesRequestsItem is int.
func (s DatabaseClusterSpecBackupResourcesRequestsItem) IsInt() bool {
	return s.Type == IntDatabaseClusterSpecBackupResourcesRequestsItem
}

// IsString reports whether DatabaseClusterSpecBackupResourcesRequestsItem is string.
func (s DatabaseClusterSpecBackupResourcesRequestsItem) IsString() bool {
	return s.Type == StringDatabaseClusterSpecBackupResourcesRequestsItem
}

// SetInt sets DatabaseClusterSpecBackupResourcesRequestsItem to int.
func (s *DatabaseClusterSpecBackupResourcesRequestsItem) SetInt(v int) {
	s.Type = IntDatabaseClusterSpecBackupResourcesRequestsItem
	s.Int = v
}

// GetInt returns int and true boolean if DatabaseClusterSpecBackupResourcesRequestsItem is int.
func (s DatabaseClusterSpecBackupResourcesRequestsItem) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntDatabaseClusterSpecBackupResourcesRequestsItem returns new DatabaseClusterSpecBackupResourcesRequestsItem from int.
func NewIntDatabaseClusterSpecBackupResourcesRequestsItem(v int) DatabaseClusterSpecBackupResourcesRequestsItem {
	var s DatabaseClusterSpecBackupResourcesRequestsItem
	s.SetInt(v)
	return s
}

// SetString sets DatabaseClusterSpecBackupResourcesRequestsItem to string.
func (s *DatabaseClusterSpecBackupResourcesRequestsItem) SetString(v string) {
	s.Type = StringDatabaseClusterSpecBackupResourcesRequestsItem
	s.String = v
}

// GetString returns string and true boolean if DatabaseClusterSpecBackupResourcesRequestsItem is string.
func (s DatabaseClusterSpecBackupResourcesRequestsItem) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringDatabaseClusterSpecBackupResourcesRequestsItem returns new DatabaseClusterSpecBackupResourcesRequestsItem from string.
func NewStringDatabaseClusterSpecBackupResourcesRequestsItem(v string) DatabaseClusterSpecBackupResourcesRequestsItem {
	var s DatabaseClusterSpecBackupResourcesRequestsItem
	s.SetString(v)
	return s
}

// BackupSchedule represents set of settings to configure backup schedule.
type DatabaseClusterSpecBackupScheduleItem struct {
	CompressionLevel OptInt    `json:"compressionLevel"`
	CompressionType  OptString `json:"compressionType"`
	Enabled          OptBool   `json:"enabled"`
	Keep             OptInt    `json:"keep"`
	Name             OptString `json:"name"`
	Schedule         OptString `json:"schedule"`
	StorageName      OptString `json:"storageName"`
}

// GetCompressionLevel returns the value of CompressionLevel.
func (s *DatabaseClusterSpecBackupScheduleItem) GetCompressionLevel() OptInt {
	return s.CompressionLevel
}

// GetCompressionType returns the value of CompressionType.
func (s *DatabaseClusterSpecBackupScheduleItem) GetCompressionType() OptString {
	return s.CompressionType
}

// GetEnabled returns the value of Enabled.
func (s *DatabaseClusterSpecBackupScheduleItem) GetEnabled() OptBool {
	return s.Enabled
}

// GetKeep returns the value of Keep.
func (s *DatabaseClusterSpecBackupScheduleItem) GetKeep() OptInt {
	return s.Keep
}

// GetName returns the value of Name.
func (s *DatabaseClusterSpecBackupScheduleItem) GetName() OptString {
	return s.Name
}

// GetSchedule returns the value of Schedule.
func (s *DatabaseClusterSpecBackupScheduleItem) GetSchedule() OptString {
	return s.Schedule
}

// GetStorageName returns the value of StorageName.
func (s *DatabaseClusterSpecBackupScheduleItem) GetStorageName() OptString {
	return s.StorageName
}

// SetCompressionLevel sets the value of CompressionLevel.
func (s *DatabaseClusterSpecBackupScheduleItem) SetCompressionLevel(val OptInt) {
	s.CompressionLevel = val
}

// SetCompressionType sets the value of CompressionType.
func (s *DatabaseClusterSpecBackupScheduleItem) SetCompressionType(val OptString) {
	s.CompressionType = val
}

// SetEnabled sets the value of Enabled.
func (s *DatabaseClusterSpecBackupScheduleItem) SetEnabled(val OptBool) {
	s.Enabled = val
}

// SetKeep sets the value of Keep.
func (s *DatabaseClusterSpecBackupScheduleItem) SetKeep(val OptInt) {
	s.Keep = val
}

// SetName sets the value of Name.
func (s *DatabaseClusterSpecBackupScheduleItem) SetName(val OptString) {
	s.Name = val
}

// SetSchedule sets the value of Schedule.
func (s *DatabaseClusterSpecBackupScheduleItem) SetSchedule(val OptString) {
	s.Schedule = val
}

// SetStorageName sets the value of StorageName.
func (s *DatabaseClusterSpecBackupScheduleItem) SetStorageName(val OptString) {
	s.StorageName = val
}

type DatabaseClusterSpecBackupStorages map[string]DatabaseClusterSpecBackupStoragesItem

func (s *DatabaseClusterSpecBackupStorages) init() DatabaseClusterSpecBackupStorages {
	m := *s
	if m == nil {
		m = map[string]DatabaseClusterSpecBackupStoragesItem{}
		*s = m
	}
	return m
}

// BackupStorageSpec represents set of settings to configure backup storage.
type DatabaseClusterSpecBackupStoragesItem struct {
	// Affinity is a group of affinity scheduling rules.
	Affinity    OptDatabaseClusterSpecBackupStoragesItemAffinity    `json:"affinity"`
	Annotations OptDatabaseClusterSpecBackupStoragesItemAnnotations `json:"annotations"`
	// SecurityContext holds security configuration that will be applied to a container. Some fields are
	// present in both SecurityContext and PodSecurityContext.  When both are set, the values in
	// SecurityContext take precedence.
	ContainerSecurityContext OptDatabaseClusterSpecBackupStoragesItemContainerSecurityContext `json:"containerSecurityContext"`
	Labels                   OptDatabaseClusterSpecBackupStoragesItemLabels                   `json:"labels"`
	NodeSelector             OptDatabaseClusterSpecBackupStoragesItemNodeSelector             `json:"nodeSelector"`
	// PodSecurityContext holds pod-level security attributes and common container settings. Some fields
	// are also present in container.securityContext.  Field values of container.securityContext take
	// precedence over field values of PodSecurityContext.
	PodSecurityContext OptDatabaseClusterSpecBackupStoragesItemPodSecurityContext `json:"podSecurityContext"`
	PriorityClassName  OptString                                                  `json:"priorityClassName"`
	// ResourceRequirements describes the compute resource requirements.
	Resources        OptDatabaseClusterSpecBackupStoragesItemResources `json:"resources"`
	RuntimeClassName OptString                                         `json:"runtimeClassName"`
	SchedulerName    OptString                                         `json:"schedulerName"`
	// BackupStorageProviderSpec represents set of settings to configure cloud provider.
	StorageProvider OptDatabaseClusterSpecBackupStoragesItemStorageProvider `json:"storageProvider"`
	Tolerations     []DatabaseClusterSpecBackupStoragesItemTolerationsItem  `json:"tolerations"`
	// BackupStorageType represents backup storage type.
	Type      string  `json:"type"`
	VerifyTLS OptBool `json:"verifyTLS"`
	// VolumeSpec represents a specification to configure volume for underlying database.
	VolumeSpec OptDatabaseClusterSpecBackupStoragesItemVolumeSpec `json:"volumeSpec"`
}

// GetAffinity returns the value of Affinity.
func (s *DatabaseClusterSpecBackupStoragesItem) GetAffinity() OptDatabaseClusterSpecBackupStoragesItemAffinity {
	return s.Affinity
}

// GetAnnotations returns the value of Annotations.
func (s *DatabaseClusterSpecBackupStoragesItem) GetAnnotations() OptDatabaseClusterSpecBackupStoragesItemAnnotations {
	return s.Annotations
}

// GetContainerSecurityContext returns the value of ContainerSecurityContext.
func (s *DatabaseClusterSpecBackupStoragesItem) GetContainerSecurityContext() OptDatabaseClusterSpecBackupStoragesItemContainerSecurityContext {
	return s.ContainerSecurityContext
}

// GetLabels returns the value of Labels.
func (s *DatabaseClusterSpecBackupStoragesItem) GetLabels() OptDatabaseClusterSpecBackupStoragesItemLabels {
	return s.Labels
}

// GetNodeSelector returns the value of NodeSelector.
func (s *DatabaseClusterSpecBackupStoragesItem) GetNodeSelector() OptDatabaseClusterSpecBackupStoragesItemNodeSelector {
	return s.NodeSelector
}

// GetPodSecurityContext returns the value of PodSecurityContext.
func (s *DatabaseClusterSpecBackupStoragesItem) GetPodSecurityContext() OptDatabaseClusterSpecBackupStoragesItemPodSecurityContext {
	return s.PodSecurityContext
}

// GetPriorityClassName returns the value of PriorityClassName.
func (s *DatabaseClusterSpecBackupStoragesItem) GetPriorityClassName() OptString {
	return s.PriorityClassName
}

// GetResources returns the value of Resources.
func (s *DatabaseClusterSpecBackupStoragesItem) GetResources() OptDatabaseClusterSpecBackupStoragesItemResources {
	return s.Resources
}

// GetRuntimeClassName returns the value of RuntimeClassName.
func (s *DatabaseClusterSpecBackupStoragesItem) GetRuntimeClassName() OptString {
	return s.RuntimeClassName
}

// GetSchedulerName returns the value of SchedulerName.
func (s *DatabaseClusterSpecBackupStoragesItem) GetSchedulerName() OptString {
	return s.SchedulerName
}

// GetStorageProvider returns the value of StorageProvider.
func (s *DatabaseClusterSpecBackupStoragesItem) GetStorageProvider() OptDatabaseClusterSpecBackupStoragesItemStorageProvider {
	return s.StorageProvider
}

// GetTolerations returns the value of Tolerations.
func (s *DatabaseClusterSpecBackupStoragesItem) GetTolerations() []DatabaseClusterSpecBackupStoragesItemTolerationsItem {
	return s.Tolerations
}

// GetType returns the value of Type.
func (s *DatabaseClusterSpecBackupStoragesItem) GetType() string {
	return s.Type
}

// GetVerifyTLS returns the value of VerifyTLS.
func (s *DatabaseClusterSpecBackupStoragesItem) GetVerifyTLS() OptBool {
	return s.VerifyTLS
}

// GetVolumeSpec returns the value of VolumeSpec.
func (s *DatabaseClusterSpecBackupStoragesItem) GetVolumeSpec() OptDatabaseClusterSpecBackupStoragesItemVolumeSpec {
	return s.VolumeSpec
}

// SetAffinity sets the value of Affinity.
func (s *DatabaseClusterSpecBackupStoragesItem) SetAffinity(val OptDatabaseClusterSpecBackupStoragesItemAffinity) {
	s.Affinity = val
}

// SetAnnotations sets the value of Annotations.
func (s *DatabaseClusterSpecBackupStoragesItem) SetAnnotations(val OptDatabaseClusterSpecBackupStoragesItemAnnotations) {
	s.Annotations = val
}

// SetContainerSecurityContext sets the value of ContainerSecurityContext.
func (s *DatabaseClusterSpecBackupStoragesItem) SetContainerSecurityContext(val OptDatabaseClusterSpecBackupStoragesItemContainerSecurityContext) {
	s.ContainerSecurityContext = val
}

// SetLabels sets the value of Labels.
func (s *DatabaseClusterSpecBackupStoragesItem) SetLabels(val OptDatabaseClusterSpecBackupStoragesItemLabels) {
	s.Labels = val
}

// SetNodeSelector sets the value of NodeSelector.
func (s *DatabaseClusterSpecBackupStoragesItem) SetNodeSelector(val OptDatabaseClusterSpecBackupStoragesItemNodeSelector) {
	s.NodeSelector = val
}

// SetPodSecurityContext sets the value of PodSecurityContext.
func (s *DatabaseClusterSpecBackupStoragesItem) SetPodSecurityContext(val OptDatabaseClusterSpecBackupStoragesItemPodSecurityContext) {
	s.PodSecurityContext = val
}

// SetPriorityClassName sets the value of PriorityClassName.
func (s *DatabaseClusterSpecBackupStoragesItem) SetPriorityClassName(val OptString) {
	s.PriorityClassName = val
}

// SetResources sets the value of Resources.
func (s *DatabaseClusterSpecBackupStoragesItem) SetResources(val OptDatabaseClusterSpecBackupStoragesItemResources) {
	s.Resources = val
}

// SetRuntimeClassName sets the value of RuntimeClassName.
func (s *DatabaseClusterSpecBackupStoragesItem) SetRuntimeClassName(val OptString) {
	s.RuntimeClassName = val
}

// SetSchedulerName sets the value of SchedulerName.
func (s *DatabaseClusterSpecBackupStoragesItem) SetSchedulerName(val OptString) {
	s.SchedulerName = val
}

// SetStorageProvider sets the value of StorageProvider.
func (s *DatabaseClusterSpecBackupStoragesItem) SetStorageProvider(val OptDatabaseClusterSpecBackupStoragesItemStorageProvider) {
	s.StorageProvider = val
}

// SetTolerations sets the value of Tolerations.
func (s *DatabaseClusterSpecBackupStoragesItem) SetTolerations(val []DatabaseClusterSpecBackupStoragesItemTolerationsItem) {
	s.Tolerations = val
}

// SetType sets the value of Type.
func (s *DatabaseClusterSpecBackupStoragesItem) SetType(val string) {
	s.Type = val
}

// SetVerifyTLS sets the value of VerifyTLS.
func (s *DatabaseClusterSpecBackupStoragesItem) SetVerifyTLS(val OptBool) {
	s.VerifyTLS = val
}

// SetVolumeSpec sets the value of VolumeSpec.
func (s *DatabaseClusterSpecBackupStoragesItem) SetVolumeSpec(val OptDatabaseClusterSpecBackupStoragesItemVolumeSpec) {
	s.VolumeSpec = val
}

// Affinity is a group of affinity scheduling rules.
type DatabaseClusterSpecBackupStoragesItemAffinity struct {
	// Describes node affinity scheduling rules for the pod.
	NodeAffinity OptDatabaseClusterSpecBackupStoragesItemAffinityNodeAffinity `json:"nodeAffinity"`
	// Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as
	// some other pod(s)).
	PodAffinity OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinity `json:"podAffinity"`
	// Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone,
	// etc. as some other pod(s)).
	PodAntiAffinity OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinity `json:"podAntiAffinity"`
}

// GetNodeAffinity returns the value of NodeAffinity.
func (s *DatabaseClusterSpecBackupStoragesItemAffinity) GetNodeAffinity() OptDatabaseClusterSpecBackupStoragesItemAffinityNodeAffinity {
	return s.NodeAffinity
}

// GetPodAffinity returns the value of PodAffinity.
func (s *DatabaseClusterSpecBackupStoragesItemAffinity) GetPodAffinity() OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinity {
	return s.PodAffinity
}

// GetPodAntiAffinity returns the value of PodAntiAffinity.
func (s *DatabaseClusterSpecBackupStoragesItemAffinity) GetPodAntiAffinity() OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinity {
	return s.PodAntiAffinity
}

// SetNodeAffinity sets the value of NodeAffinity.
func (s *DatabaseClusterSpecBackupStoragesItemAffinity) SetNodeAffinity(val OptDatabaseClusterSpecBackupStoragesItemAffinityNodeAffinity) {
	s.NodeAffinity = val
}

// SetPodAffinity sets the value of PodAffinity.
func (s *DatabaseClusterSpecBackupStoragesItemAffinity) SetPodAffinity(val OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinity) {
	s.PodAffinity = val
}

// SetPodAntiAffinity sets the value of PodAntiAffinity.
func (s *DatabaseClusterSpecBackupStoragesItemAffinity) SetPodAntiAffinity(val OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinity) {
	s.PodAntiAffinity = val
}

// Describes node affinity scheduling rules for the pod.
type DatabaseClusterSpecBackupStoragesItemAffinityNodeAffinity struct {
	// The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions
	// specified by this field, but it may choose a node that violates one or more of the expressions.
	// The node that is most preferred is the one with the greatest sum of weights, i.e. for each node
	// that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity
	// expressions, etc.), compute a sum by iterating through the elements of this field and adding
	// "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the
	// highest sum are the most preferred.
	PreferredDuringSchedulingIgnoredDuringExecution []DatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem `json:"preferredDuringSchedulingIgnoredDuringExecution"`
	// If the affinity requirements specified by this field are not met at scheduling time, the pod will
	// not be scheduled onto the node. If the affinity requirements specified by this field cease to be
	// met at some point during pod execution (e.g. due to an update), the system may or may not try to
	// eventually evict the pod from its node.
	RequiredDuringSchedulingIgnoredDuringExecution OptDatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution `json:"requiredDuringSchedulingIgnoredDuringExecution"`
}

// GetPreferredDuringSchedulingIgnoredDuringExecution returns the value of PreferredDuringSchedulingIgnoredDuringExecution.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityNodeAffinity) GetPreferredDuringSchedulingIgnoredDuringExecution() []DatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem {
	return s.PreferredDuringSchedulingIgnoredDuringExecution
}

// GetRequiredDuringSchedulingIgnoredDuringExecution returns the value of RequiredDuringSchedulingIgnoredDuringExecution.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityNodeAffinity) GetRequiredDuringSchedulingIgnoredDuringExecution() OptDatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
	return s.RequiredDuringSchedulingIgnoredDuringExecution
}

// SetPreferredDuringSchedulingIgnoredDuringExecution sets the value of PreferredDuringSchedulingIgnoredDuringExecution.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityNodeAffinity) SetPreferredDuringSchedulingIgnoredDuringExecution(val []DatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem) {
	s.PreferredDuringSchedulingIgnoredDuringExecution = val
}

// SetRequiredDuringSchedulingIgnoredDuringExecution sets the value of RequiredDuringSchedulingIgnoredDuringExecution.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityNodeAffinity) SetRequiredDuringSchedulingIgnoredDuringExecution(val OptDatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution) {
	s.RequiredDuringSchedulingIgnoredDuringExecution = val
}

// An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op).
// A null preferred scheduling term matches no objects (i.e. is also a no-op).
type DatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem struct {
	// A node selector term, associated with the corresponding weight.
	Preference DatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreference `json:"preference"`
	// Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
	Weight int32 `json:"weight"`
}

// GetPreference returns the value of Preference.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem) GetPreference() DatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreference {
	return s.Preference
}

// GetWeight returns the value of Weight.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem) GetWeight() int32 {
	return s.Weight
}

// SetPreference sets the value of Preference.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem) SetPreference(val DatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreference) {
	s.Preference = val
}

// SetWeight sets the value of Weight.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem) SetWeight(val int32) {
	s.Weight = val
}

// A node selector term, associated with the corresponding weight.
type DatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreference struct {
	// A list of node selector requirements by node's labels.
	MatchExpressions []DatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreferenceMatchExpressionsItem `json:"matchExpressions"`
	// A list of node selector requirements by node's fields.
	MatchFields []DatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreferenceMatchFieldsItem `json:"matchFields"`
}

// GetMatchExpressions returns the value of MatchExpressions.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreference) GetMatchExpressions() []DatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreferenceMatchExpressionsItem {
	return s.MatchExpressions
}

// GetMatchFields returns the value of MatchFields.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreference) GetMatchFields() []DatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreferenceMatchFieldsItem {
	return s.MatchFields
}

// SetMatchExpressions sets the value of MatchExpressions.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreference) SetMatchExpressions(val []DatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreferenceMatchExpressionsItem) {
	s.MatchExpressions = val
}

// SetMatchFields sets the value of MatchFields.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreference) SetMatchFields(val []DatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreferenceMatchFieldsItem) {
	s.MatchFields = val
}

// A node selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type DatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreferenceMatchExpressionsItem struct {
	// The label key that the selector applies to.
	Key string `json:"key"`
	// Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists,
	// DoesNotExist. Gt, and Lt.
	Operator string `json:"operator"`
	// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If
	// the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or
	// Lt, the values array must have a single element, which will be interpreted as an integer. This
	// array is replaced during a strategic merge patch.
	Values []string `json:"values"`
}

// GetKey returns the value of Key.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreferenceMatchExpressionsItem) GetKey() string {
	return s.Key
}

// GetOperator returns the value of Operator.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreferenceMatchExpressionsItem) GetOperator() string {
	return s.Operator
}

// GetValues returns the value of Values.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreferenceMatchExpressionsItem) GetValues() []string {
	return s.Values
}

// SetKey sets the value of Key.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreferenceMatchExpressionsItem) SetKey(val string) {
	s.Key = val
}

// SetOperator sets the value of Operator.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreferenceMatchExpressionsItem) SetOperator(val string) {
	s.Operator = val
}

// SetValues sets the value of Values.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreferenceMatchExpressionsItem) SetValues(val []string) {
	s.Values = val
}

// A node selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type DatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreferenceMatchFieldsItem struct {
	// The label key that the selector applies to.
	Key string `json:"key"`
	// Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists,
	// DoesNotExist. Gt, and Lt.
	Operator string `json:"operator"`
	// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If
	// the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or
	// Lt, the values array must have a single element, which will be interpreted as an integer. This
	// array is replaced during a strategic merge patch.
	Values []string `json:"values"`
}

// GetKey returns the value of Key.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreferenceMatchFieldsItem) GetKey() string {
	return s.Key
}

// GetOperator returns the value of Operator.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreferenceMatchFieldsItem) GetOperator() string {
	return s.Operator
}

// GetValues returns the value of Values.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreferenceMatchFieldsItem) GetValues() []string {
	return s.Values
}

// SetKey sets the value of Key.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreferenceMatchFieldsItem) SetKey(val string) {
	s.Key = val
}

// SetOperator sets the value of Operator.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreferenceMatchFieldsItem) SetOperator(val string) {
	s.Operator = val
}

// SetValues sets the value of Values.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreferenceMatchFieldsItem) SetValues(val []string) {
	s.Values = val
}

// If the affinity requirements specified by this field are not met at scheduling time, the pod will
// not be scheduled onto the node. If the affinity requirements specified by this field cease to be
// met at some point during pod execution (e.g. due to an update), the system may or may not try to
// eventually evict the pod from its node.
type DatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution struct {
	// Required. A list of node selector terms. The terms are ORed.
	NodeSelectorTerms []DatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItem `json:"nodeSelectorTerms"`
}

// GetNodeSelectorTerms returns the value of NodeSelectorTerms.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution) GetNodeSelectorTerms() []DatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItem {
	return s.NodeSelectorTerms
}

// SetNodeSelectorTerms sets the value of NodeSelectorTerms.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution) SetNodeSelectorTerms(val []DatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItem) {
	s.NodeSelectorTerms = val
}

// A null or empty node selector term matches no objects. The requirements of them are ANDed. The
// TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
type DatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItem struct {
	// A list of node selector requirements by node's labels.
	MatchExpressions []DatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItemMatchExpressionsItem `json:"matchExpressions"`
	// A list of node selector requirements by node's fields.
	MatchFields []DatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItemMatchFieldsItem `json:"matchFields"`
}

// GetMatchExpressions returns the value of MatchExpressions.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItem) GetMatchExpressions() []DatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItemMatchExpressionsItem {
	return s.MatchExpressions
}

// GetMatchFields returns the value of MatchFields.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItem) GetMatchFields() []DatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItemMatchFieldsItem {
	return s.MatchFields
}

// SetMatchExpressions sets the value of MatchExpressions.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItem) SetMatchExpressions(val []DatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItemMatchExpressionsItem) {
	s.MatchExpressions = val
}

// SetMatchFields sets the value of MatchFields.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItem) SetMatchFields(val []DatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItemMatchFieldsItem) {
	s.MatchFields = val
}

// A node selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type DatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItemMatchExpressionsItem struct {
	// The label key that the selector applies to.
	Key string `json:"key"`
	// Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists,
	// DoesNotExist. Gt, and Lt.
	Operator string `json:"operator"`
	// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If
	// the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or
	// Lt, the values array must have a single element, which will be interpreted as an integer. This
	// array is replaced during a strategic merge patch.
	Values []string `json:"values"`
}

// GetKey returns the value of Key.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItemMatchExpressionsItem) GetKey() string {
	return s.Key
}

// GetOperator returns the value of Operator.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItemMatchExpressionsItem) GetOperator() string {
	return s.Operator
}

// GetValues returns the value of Values.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItemMatchExpressionsItem) GetValues() []string {
	return s.Values
}

// SetKey sets the value of Key.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItemMatchExpressionsItem) SetKey(val string) {
	s.Key = val
}

// SetOperator sets the value of Operator.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItemMatchExpressionsItem) SetOperator(val string) {
	s.Operator = val
}

// SetValues sets the value of Values.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItemMatchExpressionsItem) SetValues(val []string) {
	s.Values = val
}

// A node selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type DatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItemMatchFieldsItem struct {
	// The label key that the selector applies to.
	Key string `json:"key"`
	// Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists,
	// DoesNotExist. Gt, and Lt.
	Operator string `json:"operator"`
	// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If
	// the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or
	// Lt, the values array must have a single element, which will be interpreted as an integer. This
	// array is replaced during a strategic merge patch.
	Values []string `json:"values"`
}

// GetKey returns the value of Key.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItemMatchFieldsItem) GetKey() string {
	return s.Key
}

// GetOperator returns the value of Operator.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItemMatchFieldsItem) GetOperator() string {
	return s.Operator
}

// GetValues returns the value of Values.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItemMatchFieldsItem) GetValues() []string {
	return s.Values
}

// SetKey sets the value of Key.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItemMatchFieldsItem) SetKey(val string) {
	s.Key = val
}

// SetOperator sets the value of Operator.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItemMatchFieldsItem) SetOperator(val string) {
	s.Operator = val
}

// SetValues sets the value of Values.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItemMatchFieldsItem) SetValues(val []string) {
	s.Values = val
}

// Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as
// some other pod(s)).
type DatabaseClusterSpecBackupStoragesItemAffinityPodAffinity struct {
	// The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions
	// specified by this field, but it may choose a node that violates one or more of the expressions.
	// The node that is most preferred is the one with the greatest sum of weights, i.e. for each node
	// that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity
	// expressions, etc.), compute a sum by iterating through the elements of this field and adding
	// "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
	// node(s) with the highest sum are the most preferred.
	PreferredDuringSchedulingIgnoredDuringExecution []DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem `json:"preferredDuringSchedulingIgnoredDuringExecution"`
	// If the affinity requirements specified by this field are not met at scheduling time, the pod will
	// not be scheduled onto the node. If the affinity requirements specified by this field cease to be
	// met at some point during pod execution (e.g. due to a pod label update), the system may or may not
	// try to eventually evict the pod from its node. When there are multiple elements, the lists of
	// nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
	RequiredDuringSchedulingIgnoredDuringExecution []DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem `json:"requiredDuringSchedulingIgnoredDuringExecution"`
}

// GetPreferredDuringSchedulingIgnoredDuringExecution returns the value of PreferredDuringSchedulingIgnoredDuringExecution.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAffinity) GetPreferredDuringSchedulingIgnoredDuringExecution() []DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem {
	return s.PreferredDuringSchedulingIgnoredDuringExecution
}

// GetRequiredDuringSchedulingIgnoredDuringExecution returns the value of RequiredDuringSchedulingIgnoredDuringExecution.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAffinity) GetRequiredDuringSchedulingIgnoredDuringExecution() []DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem {
	return s.RequiredDuringSchedulingIgnoredDuringExecution
}

// SetPreferredDuringSchedulingIgnoredDuringExecution sets the value of PreferredDuringSchedulingIgnoredDuringExecution.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAffinity) SetPreferredDuringSchedulingIgnoredDuringExecution(val []DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem) {
	s.PreferredDuringSchedulingIgnoredDuringExecution = val
}

// SetRequiredDuringSchedulingIgnoredDuringExecution sets the value of RequiredDuringSchedulingIgnoredDuringExecution.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAffinity) SetRequiredDuringSchedulingIgnoredDuringExecution(val []DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem) {
	s.RequiredDuringSchedulingIgnoredDuringExecution = val
}

// The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the
// most preferred node(s).
type DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem struct {
	// Required. A pod affinity term, associated with the corresponding weight.
	PodAffinityTerm DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm `json:"podAffinityTerm"`
	// Weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
	Weight int32 `json:"weight"`
}

// GetPodAffinityTerm returns the value of PodAffinityTerm.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem) GetPodAffinityTerm() DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm {
	return s.PodAffinityTerm
}

// GetWeight returns the value of Weight.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem) GetWeight() int32 {
	return s.Weight
}

// SetPodAffinityTerm sets the value of PodAffinityTerm.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem) SetPodAffinityTerm(val DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm) {
	s.PodAffinityTerm = val
}

// SetWeight sets the value of Weight.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem) SetWeight(val int32) {
	s.Weight = val
}

// Required. A pod affinity term, associated with the corresponding weight.
type DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm struct {
	// A label query over a set of resources, in this case pods.
	LabelSelector OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector `json:"labelSelector"`
	// A label query over the set of namespaces that the term applies to. The term is applied to the
	// union of the namespaces selected by this field and the ones listed in the namespaces field. null
	// selector and null or empty namespaces list means "this pod's namespace". An empty selector ({})
	// matches all namespaces.
	NamespaceSelector OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelector `json:"namespaceSelector"`
	// Namespaces specifies a static list of namespace names that the term applies to. The term is
	// applied to the union of the namespaces listed in this field and the ones selected by
	// namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's
	// namespace".
	Namespaces []string `json:"namespaces"`
	// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
	// the labelSelector in the specified namespaces, where co-located is defined as running on a node
	// whose value of the label with key topologyKey matches that of any node on which any of the
	// selected pods is running. Empty topologyKey is not allowed.
	TopologyKey string `json:"topologyKey"`
}

// GetLabelSelector returns the value of LabelSelector.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm) GetLabelSelector() OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector {
	return s.LabelSelector
}

// GetNamespaceSelector returns the value of NamespaceSelector.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm) GetNamespaceSelector() OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelector {
	return s.NamespaceSelector
}

// GetNamespaces returns the value of Namespaces.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm) GetNamespaces() []string {
	return s.Namespaces
}

// GetTopologyKey returns the value of TopologyKey.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm) GetTopologyKey() string {
	return s.TopologyKey
}

// SetLabelSelector sets the value of LabelSelector.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm) SetLabelSelector(val OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector) {
	s.LabelSelector = val
}

// SetNamespaceSelector sets the value of NamespaceSelector.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm) SetNamespaceSelector(val OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelector) {
	s.NamespaceSelector = val
}

// SetNamespaces sets the value of Namespaces.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm) SetNamespaces(val []string) {
	s.Namespaces = val
}

// SetTopologyKey sets the value of TopologyKey.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm) SetTopologyKey(val string) {
	s.TopologyKey = val
}

// A label query over a set of resources, in this case pods.
type DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector struct {
	// MatchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchExpressionsItem `json:"matchExpressions"`
	// MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is
	// equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and
	// the values array contains only "value". The requirements are ANDed.
	MatchLabels OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchLabels `json:"matchLabels"`
}

// GetMatchExpressions returns the value of MatchExpressions.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector) GetMatchExpressions() []DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchExpressionsItem {
	return s.MatchExpressions
}

// GetMatchLabels returns the value of MatchLabels.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector) GetMatchLabels() OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchLabels {
	return s.MatchLabels
}

// SetMatchExpressions sets the value of MatchExpressions.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector) SetMatchExpressions(val []DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchExpressionsItem) {
	s.MatchExpressions = val
}

// SetMatchLabels sets the value of MatchLabels.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector) SetMatchLabels(val OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchLabels) {
	s.MatchLabels = val
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchExpressionsItem struct {
	// Key is the label key that the selector applies to.
	Key string `json:"key"`
	// Operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists
	// and DoesNotExist.
	Operator string `json:"operator"`
	// Values is an array of string values. If the operator is In or NotIn, the values array must be
	// non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array
	// is replaced during a strategic merge patch.
	Values []string `json:"values"`
}

// GetKey returns the value of Key.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchExpressionsItem) GetKey() string {
	return s.Key
}

// GetOperator returns the value of Operator.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchExpressionsItem) GetOperator() string {
	return s.Operator
}

// GetValues returns the value of Values.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchExpressionsItem) GetValues() []string {
	return s.Values
}

// SetKey sets the value of Key.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchExpressionsItem) SetKey(val string) {
	s.Key = val
}

// SetOperator sets the value of Operator.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchExpressionsItem) SetOperator(val string) {
	s.Operator = val
}

// SetValues sets the value of Values.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchExpressionsItem) SetValues(val []string) {
	s.Values = val
}

// MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is
// equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and
// the values array contains only "value". The requirements are ANDed.
type DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchLabels map[string]string

func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchLabels) init() DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchLabels {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// A label query over the set of namespaces that the term applies to. The term is applied to the
// union of the namespaces selected by this field and the ones listed in the namespaces field. null
// selector and null or empty namespaces list means "this pod's namespace". An empty selector ({})
// matches all namespaces.
type DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelector struct {
	// MatchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchExpressionsItem `json:"matchExpressions"`
	// MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is
	// equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and
	// the values array contains only "value". The requirements are ANDed.
	MatchLabels OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchLabels `json:"matchLabels"`
}

// GetMatchExpressions returns the value of MatchExpressions.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelector) GetMatchExpressions() []DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchExpressionsItem {
	return s.MatchExpressions
}

// GetMatchLabels returns the value of MatchLabels.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelector) GetMatchLabels() OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchLabels {
	return s.MatchLabels
}

// SetMatchExpressions sets the value of MatchExpressions.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelector) SetMatchExpressions(val []DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchExpressionsItem) {
	s.MatchExpressions = val
}

// SetMatchLabels sets the value of MatchLabels.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelector) SetMatchLabels(val OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchLabels) {
	s.MatchLabels = val
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchExpressionsItem struct {
	// Key is the label key that the selector applies to.
	Key string `json:"key"`
	// Operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists
	// and DoesNotExist.
	Operator string `json:"operator"`
	// Values is an array of string values. If the operator is In or NotIn, the values array must be
	// non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array
	// is replaced during a strategic merge patch.
	Values []string `json:"values"`
}

// GetKey returns the value of Key.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchExpressionsItem) GetKey() string {
	return s.Key
}

// GetOperator returns the value of Operator.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchExpressionsItem) GetOperator() string {
	return s.Operator
}

// GetValues returns the value of Values.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchExpressionsItem) GetValues() []string {
	return s.Values
}

// SetKey sets the value of Key.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchExpressionsItem) SetKey(val string) {
	s.Key = val
}

// SetOperator sets the value of Operator.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchExpressionsItem) SetOperator(val string) {
	s.Operator = val
}

// SetValues sets the value of Values.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchExpressionsItem) SetValues(val []string) {
	s.Values = val
}

// MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is
// equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and
// the values array contains only "value". The requirements are ANDed.
type DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchLabels map[string]string

func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchLabels) init() DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchLabels {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s))
// that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where
// co-located is defined as running on a node whose value of the label with key <topologyKey> matches
// that of any node on which a pod of the set of pods is running.
type DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem struct {
	// A label query over a set of resources, in this case pods.
	LabelSelector OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector `json:"labelSelector"`
	// A label query over the set of namespaces that the term applies to. The term is applied to the
	// union of the namespaces selected by this field and the ones listed in the namespaces field. null
	// selector and null or empty namespaces list means "this pod's namespace". An empty selector ({})
	// matches all namespaces.
	NamespaceSelector OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector `json:"namespaceSelector"`
	// Namespaces specifies a static list of namespace names that the term applies to. The term is
	// applied to the union of the namespaces listed in this field and the ones selected by
	// namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's
	// namespace".
	Namespaces []string `json:"namespaces"`
	// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
	// the labelSelector in the specified namespaces, where co-located is defined as running on a node
	// whose value of the label with key topologyKey matches that of any node on which any of the
	// selected pods is running. Empty topologyKey is not allowed.
	TopologyKey string `json:"topologyKey"`
}

// GetLabelSelector returns the value of LabelSelector.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem) GetLabelSelector() OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector {
	return s.LabelSelector
}

// GetNamespaceSelector returns the value of NamespaceSelector.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem) GetNamespaceSelector() OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector {
	return s.NamespaceSelector
}

// GetNamespaces returns the value of Namespaces.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem) GetNamespaces() []string {
	return s.Namespaces
}

// GetTopologyKey returns the value of TopologyKey.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem) GetTopologyKey() string {
	return s.TopologyKey
}

// SetLabelSelector sets the value of LabelSelector.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem) SetLabelSelector(val OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector) {
	s.LabelSelector = val
}

// SetNamespaceSelector sets the value of NamespaceSelector.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem) SetNamespaceSelector(val OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector) {
	s.NamespaceSelector = val
}

// SetNamespaces sets the value of Namespaces.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem) SetNamespaces(val []string) {
	s.Namespaces = val
}

// SetTopologyKey sets the value of TopologyKey.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem) SetTopologyKey(val string) {
	s.TopologyKey = val
}

// A label query over a set of resources, in this case pods.
type DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector struct {
	// MatchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchExpressionsItem `json:"matchExpressions"`
	// MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is
	// equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and
	// the values array contains only "value". The requirements are ANDed.
	MatchLabels OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchLabels `json:"matchLabels"`
}

// GetMatchExpressions returns the value of MatchExpressions.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector) GetMatchExpressions() []DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchExpressionsItem {
	return s.MatchExpressions
}

// GetMatchLabels returns the value of MatchLabels.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector) GetMatchLabels() OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchLabels {
	return s.MatchLabels
}

// SetMatchExpressions sets the value of MatchExpressions.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector) SetMatchExpressions(val []DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchExpressionsItem) {
	s.MatchExpressions = val
}

// SetMatchLabels sets the value of MatchLabels.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector) SetMatchLabels(val OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchLabels) {
	s.MatchLabels = val
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchExpressionsItem struct {
	// Key is the label key that the selector applies to.
	Key string `json:"key"`
	// Operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists
	// and DoesNotExist.
	Operator string `json:"operator"`
	// Values is an array of string values. If the operator is In or NotIn, the values array must be
	// non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array
	// is replaced during a strategic merge patch.
	Values []string `json:"values"`
}

// GetKey returns the value of Key.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchExpressionsItem) GetKey() string {
	return s.Key
}

// GetOperator returns the value of Operator.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchExpressionsItem) GetOperator() string {
	return s.Operator
}

// GetValues returns the value of Values.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchExpressionsItem) GetValues() []string {
	return s.Values
}

// SetKey sets the value of Key.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchExpressionsItem) SetKey(val string) {
	s.Key = val
}

// SetOperator sets the value of Operator.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchExpressionsItem) SetOperator(val string) {
	s.Operator = val
}

// SetValues sets the value of Values.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchExpressionsItem) SetValues(val []string) {
	s.Values = val
}

// MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is
// equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and
// the values array contains only "value". The requirements are ANDed.
type DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchLabels map[string]string

func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchLabels) init() DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchLabels {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// A label query over the set of namespaces that the term applies to. The term is applied to the
// union of the namespaces selected by this field and the ones listed in the namespaces field. null
// selector and null or empty namespaces list means "this pod's namespace". An empty selector ({})
// matches all namespaces.
type DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector struct {
	// MatchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchExpressionsItem `json:"matchExpressions"`
	// MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is
	// equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and
	// the values array contains only "value". The requirements are ANDed.
	MatchLabels OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchLabels `json:"matchLabels"`
}

// GetMatchExpressions returns the value of MatchExpressions.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector) GetMatchExpressions() []DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchExpressionsItem {
	return s.MatchExpressions
}

// GetMatchLabels returns the value of MatchLabels.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector) GetMatchLabels() OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchLabels {
	return s.MatchLabels
}

// SetMatchExpressions sets the value of MatchExpressions.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector) SetMatchExpressions(val []DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchExpressionsItem) {
	s.MatchExpressions = val
}

// SetMatchLabels sets the value of MatchLabels.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector) SetMatchLabels(val OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchLabels) {
	s.MatchLabels = val
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchExpressionsItem struct {
	// Key is the label key that the selector applies to.
	Key string `json:"key"`
	// Operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists
	// and DoesNotExist.
	Operator string `json:"operator"`
	// Values is an array of string values. If the operator is In or NotIn, the values array must be
	// non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array
	// is replaced during a strategic merge patch.
	Values []string `json:"values"`
}

// GetKey returns the value of Key.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchExpressionsItem) GetKey() string {
	return s.Key
}

// GetOperator returns the value of Operator.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchExpressionsItem) GetOperator() string {
	return s.Operator
}

// GetValues returns the value of Values.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchExpressionsItem) GetValues() []string {
	return s.Values
}

// SetKey sets the value of Key.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchExpressionsItem) SetKey(val string) {
	s.Key = val
}

// SetOperator sets the value of Operator.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchExpressionsItem) SetOperator(val string) {
	s.Operator = val
}

// SetValues sets the value of Values.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchExpressionsItem) SetValues(val []string) {
	s.Values = val
}

// MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is
// equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and
// the values array contains only "value". The requirements are ANDed.
type DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchLabels map[string]string

func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchLabels) init() DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchLabels {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone,
// etc. as some other pod(s)).
type DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinity struct {
	// The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions
	// specified by this field, but it may choose a node that violates one or more of the expressions.
	// The node that is most preferred is the one with the greatest sum of weights, i.e. for each node
	// that meets all of the scheduling requirements (resource request, requiredDuringScheduling
	// anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field
	// and adding "weight" to the sum if the node has pods which matches the corresponding
	// podAffinityTerm; the node(s) with the highest sum are the most preferred.
	PreferredDuringSchedulingIgnoredDuringExecution []DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem `json:"preferredDuringSchedulingIgnoredDuringExecution"`
	// If the anti-affinity requirements specified by this field are not met at scheduling time, the pod
	// will not be scheduled onto the node. If the anti-affinity requirements specified by this field
	// cease to be met at some point during pod execution (e.g. due to a pod label update), the system
	// may or may not try to eventually evict the pod from its node. When there are multiple elements,
	// the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be
	// satisfied.
	RequiredDuringSchedulingIgnoredDuringExecution []DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem `json:"requiredDuringSchedulingIgnoredDuringExecution"`
}

// GetPreferredDuringSchedulingIgnoredDuringExecution returns the value of PreferredDuringSchedulingIgnoredDuringExecution.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinity) GetPreferredDuringSchedulingIgnoredDuringExecution() []DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem {
	return s.PreferredDuringSchedulingIgnoredDuringExecution
}

// GetRequiredDuringSchedulingIgnoredDuringExecution returns the value of RequiredDuringSchedulingIgnoredDuringExecution.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinity) GetRequiredDuringSchedulingIgnoredDuringExecution() []DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem {
	return s.RequiredDuringSchedulingIgnoredDuringExecution
}

// SetPreferredDuringSchedulingIgnoredDuringExecution sets the value of PreferredDuringSchedulingIgnoredDuringExecution.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinity) SetPreferredDuringSchedulingIgnoredDuringExecution(val []DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem) {
	s.PreferredDuringSchedulingIgnoredDuringExecution = val
}

// SetRequiredDuringSchedulingIgnoredDuringExecution sets the value of RequiredDuringSchedulingIgnoredDuringExecution.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinity) SetRequiredDuringSchedulingIgnoredDuringExecution(val []DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem) {
	s.RequiredDuringSchedulingIgnoredDuringExecution = val
}

// The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the
// most preferred node(s).
type DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem struct {
	// Required. A pod affinity term, associated with the corresponding weight.
	PodAffinityTerm DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm `json:"podAffinityTerm"`
	// Weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
	Weight int32 `json:"weight"`
}

// GetPodAffinityTerm returns the value of PodAffinityTerm.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem) GetPodAffinityTerm() DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm {
	return s.PodAffinityTerm
}

// GetWeight returns the value of Weight.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem) GetWeight() int32 {
	return s.Weight
}

// SetPodAffinityTerm sets the value of PodAffinityTerm.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem) SetPodAffinityTerm(val DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm) {
	s.PodAffinityTerm = val
}

// SetWeight sets the value of Weight.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem) SetWeight(val int32) {
	s.Weight = val
}

// Required. A pod affinity term, associated with the corresponding weight.
type DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm struct {
	// A label query over a set of resources, in this case pods.
	LabelSelector OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector `json:"labelSelector"`
	// A label query over the set of namespaces that the term applies to. The term is applied to the
	// union of the namespaces selected by this field and the ones listed in the namespaces field. null
	// selector and null or empty namespaces list means "this pod's namespace". An empty selector ({})
	// matches all namespaces.
	NamespaceSelector OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelector `json:"namespaceSelector"`
	// Namespaces specifies a static list of namespace names that the term applies to. The term is
	// applied to the union of the namespaces listed in this field and the ones selected by
	// namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's
	// namespace".
	Namespaces []string `json:"namespaces"`
	// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
	// the labelSelector in the specified namespaces, where co-located is defined as running on a node
	// whose value of the label with key topologyKey matches that of any node on which any of the
	// selected pods is running. Empty topologyKey is not allowed.
	TopologyKey string `json:"topologyKey"`
}

// GetLabelSelector returns the value of LabelSelector.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm) GetLabelSelector() OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector {
	return s.LabelSelector
}

// GetNamespaceSelector returns the value of NamespaceSelector.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm) GetNamespaceSelector() OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelector {
	return s.NamespaceSelector
}

// GetNamespaces returns the value of Namespaces.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm) GetNamespaces() []string {
	return s.Namespaces
}

// GetTopologyKey returns the value of TopologyKey.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm) GetTopologyKey() string {
	return s.TopologyKey
}

// SetLabelSelector sets the value of LabelSelector.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm) SetLabelSelector(val OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector) {
	s.LabelSelector = val
}

// SetNamespaceSelector sets the value of NamespaceSelector.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm) SetNamespaceSelector(val OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelector) {
	s.NamespaceSelector = val
}

// SetNamespaces sets the value of Namespaces.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm) SetNamespaces(val []string) {
	s.Namespaces = val
}

// SetTopologyKey sets the value of TopologyKey.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm) SetTopologyKey(val string) {
	s.TopologyKey = val
}

// A label query over a set of resources, in this case pods.
type DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector struct {
	// MatchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchExpressionsItem `json:"matchExpressions"`
	// MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is
	// equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and
	// the values array contains only "value". The requirements are ANDed.
	MatchLabels OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchLabels `json:"matchLabels"`
}

// GetMatchExpressions returns the value of MatchExpressions.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector) GetMatchExpressions() []DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchExpressionsItem {
	return s.MatchExpressions
}

// GetMatchLabels returns the value of MatchLabels.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector) GetMatchLabels() OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchLabels {
	return s.MatchLabels
}

// SetMatchExpressions sets the value of MatchExpressions.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector) SetMatchExpressions(val []DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchExpressionsItem) {
	s.MatchExpressions = val
}

// SetMatchLabels sets the value of MatchLabels.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector) SetMatchLabels(val OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchLabels) {
	s.MatchLabels = val
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchExpressionsItem struct {
	// Key is the label key that the selector applies to.
	Key string `json:"key"`
	// Operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists
	// and DoesNotExist.
	Operator string `json:"operator"`
	// Values is an array of string values. If the operator is In or NotIn, the values array must be
	// non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array
	// is replaced during a strategic merge patch.
	Values []string `json:"values"`
}

// GetKey returns the value of Key.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchExpressionsItem) GetKey() string {
	return s.Key
}

// GetOperator returns the value of Operator.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchExpressionsItem) GetOperator() string {
	return s.Operator
}

// GetValues returns the value of Values.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchExpressionsItem) GetValues() []string {
	return s.Values
}

// SetKey sets the value of Key.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchExpressionsItem) SetKey(val string) {
	s.Key = val
}

// SetOperator sets the value of Operator.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchExpressionsItem) SetOperator(val string) {
	s.Operator = val
}

// SetValues sets the value of Values.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchExpressionsItem) SetValues(val []string) {
	s.Values = val
}

// MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is
// equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and
// the values array contains only "value". The requirements are ANDed.
type DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchLabels map[string]string

func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchLabels) init() DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchLabels {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// A label query over the set of namespaces that the term applies to. The term is applied to the
// union of the namespaces selected by this field and the ones listed in the namespaces field. null
// selector and null or empty namespaces list means "this pod's namespace". An empty selector ({})
// matches all namespaces.
type DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelector struct {
	// MatchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchExpressionsItem `json:"matchExpressions"`
	// MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is
	// equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and
	// the values array contains only "value". The requirements are ANDed.
	MatchLabels OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchLabels `json:"matchLabels"`
}

// GetMatchExpressions returns the value of MatchExpressions.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelector) GetMatchExpressions() []DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchExpressionsItem {
	return s.MatchExpressions
}

// GetMatchLabels returns the value of MatchLabels.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelector) GetMatchLabels() OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchLabels {
	return s.MatchLabels
}

// SetMatchExpressions sets the value of MatchExpressions.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelector) SetMatchExpressions(val []DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchExpressionsItem) {
	s.MatchExpressions = val
}

// SetMatchLabels sets the value of MatchLabels.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelector) SetMatchLabels(val OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchLabels) {
	s.MatchLabels = val
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchExpressionsItem struct {
	// Key is the label key that the selector applies to.
	Key string `json:"key"`
	// Operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists
	// and DoesNotExist.
	Operator string `json:"operator"`
	// Values is an array of string values. If the operator is In or NotIn, the values array must be
	// non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array
	// is replaced during a strategic merge patch.
	Values []string `json:"values"`
}

// GetKey returns the value of Key.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchExpressionsItem) GetKey() string {
	return s.Key
}

// GetOperator returns the value of Operator.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchExpressionsItem) GetOperator() string {
	return s.Operator
}

// GetValues returns the value of Values.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchExpressionsItem) GetValues() []string {
	return s.Values
}

// SetKey sets the value of Key.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchExpressionsItem) SetKey(val string) {
	s.Key = val
}

// SetOperator sets the value of Operator.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchExpressionsItem) SetOperator(val string) {
	s.Operator = val
}

// SetValues sets the value of Values.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchExpressionsItem) SetValues(val []string) {
	s.Values = val
}

// MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is
// equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and
// the values array contains only "value". The requirements are ANDed.
type DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchLabels map[string]string

func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchLabels) init() DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchLabels {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s))
// that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where
// co-located is defined as running on a node whose value of the label with key <topologyKey> matches
// that of any node on which a pod of the set of pods is running.
type DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem struct {
	// A label query over a set of resources, in this case pods.
	LabelSelector OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector `json:"labelSelector"`
	// A label query over the set of namespaces that the term applies to. The term is applied to the
	// union of the namespaces selected by this field and the ones listed in the namespaces field. null
	// selector and null or empty namespaces list means "this pod's namespace". An empty selector ({})
	// matches all namespaces.
	NamespaceSelector OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector `json:"namespaceSelector"`
	// Namespaces specifies a static list of namespace names that the term applies to. The term is
	// applied to the union of the namespaces listed in this field and the ones selected by
	// namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's
	// namespace".
	Namespaces []string `json:"namespaces"`
	// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
	// the labelSelector in the specified namespaces, where co-located is defined as running on a node
	// whose value of the label with key topologyKey matches that of any node on which any of the
	// selected pods is running. Empty topologyKey is not allowed.
	TopologyKey string `json:"topologyKey"`
}

// GetLabelSelector returns the value of LabelSelector.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem) GetLabelSelector() OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector {
	return s.LabelSelector
}

// GetNamespaceSelector returns the value of NamespaceSelector.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem) GetNamespaceSelector() OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector {
	return s.NamespaceSelector
}

// GetNamespaces returns the value of Namespaces.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem) GetNamespaces() []string {
	return s.Namespaces
}

// GetTopologyKey returns the value of TopologyKey.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem) GetTopologyKey() string {
	return s.TopologyKey
}

// SetLabelSelector sets the value of LabelSelector.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem) SetLabelSelector(val OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector) {
	s.LabelSelector = val
}

// SetNamespaceSelector sets the value of NamespaceSelector.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem) SetNamespaceSelector(val OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector) {
	s.NamespaceSelector = val
}

// SetNamespaces sets the value of Namespaces.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem) SetNamespaces(val []string) {
	s.Namespaces = val
}

// SetTopologyKey sets the value of TopologyKey.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem) SetTopologyKey(val string) {
	s.TopologyKey = val
}

// A label query over a set of resources, in this case pods.
type DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector struct {
	// MatchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchExpressionsItem `json:"matchExpressions"`
	// MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is
	// equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and
	// the values array contains only "value". The requirements are ANDed.
	MatchLabels OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchLabels `json:"matchLabels"`
}

// GetMatchExpressions returns the value of MatchExpressions.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector) GetMatchExpressions() []DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchExpressionsItem {
	return s.MatchExpressions
}

// GetMatchLabels returns the value of MatchLabels.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector) GetMatchLabels() OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchLabels {
	return s.MatchLabels
}

// SetMatchExpressions sets the value of MatchExpressions.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector) SetMatchExpressions(val []DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchExpressionsItem) {
	s.MatchExpressions = val
}

// SetMatchLabels sets the value of MatchLabels.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector) SetMatchLabels(val OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchLabels) {
	s.MatchLabels = val
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchExpressionsItem struct {
	// Key is the label key that the selector applies to.
	Key string `json:"key"`
	// Operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists
	// and DoesNotExist.
	Operator string `json:"operator"`
	// Values is an array of string values. If the operator is In or NotIn, the values array must be
	// non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array
	// is replaced during a strategic merge patch.
	Values []string `json:"values"`
}

// GetKey returns the value of Key.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchExpressionsItem) GetKey() string {
	return s.Key
}

// GetOperator returns the value of Operator.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchExpressionsItem) GetOperator() string {
	return s.Operator
}

// GetValues returns the value of Values.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchExpressionsItem) GetValues() []string {
	return s.Values
}

// SetKey sets the value of Key.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchExpressionsItem) SetKey(val string) {
	s.Key = val
}

// SetOperator sets the value of Operator.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchExpressionsItem) SetOperator(val string) {
	s.Operator = val
}

// SetValues sets the value of Values.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchExpressionsItem) SetValues(val []string) {
	s.Values = val
}

// MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is
// equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and
// the values array contains only "value". The requirements are ANDed.
type DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchLabels map[string]string

func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchLabels) init() DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchLabels {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// A label query over the set of namespaces that the term applies to. The term is applied to the
// union of the namespaces selected by this field and the ones listed in the namespaces field. null
// selector and null or empty namespaces list means "this pod's namespace". An empty selector ({})
// matches all namespaces.
type DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector struct {
	// MatchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchExpressionsItem `json:"matchExpressions"`
	// MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is
	// equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and
	// the values array contains only "value". The requirements are ANDed.
	MatchLabels OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchLabels `json:"matchLabels"`
}

// GetMatchExpressions returns the value of MatchExpressions.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector) GetMatchExpressions() []DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchExpressionsItem {
	return s.MatchExpressions
}

// GetMatchLabels returns the value of MatchLabels.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector) GetMatchLabels() OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchLabels {
	return s.MatchLabels
}

// SetMatchExpressions sets the value of MatchExpressions.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector) SetMatchExpressions(val []DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchExpressionsItem) {
	s.MatchExpressions = val
}

// SetMatchLabels sets the value of MatchLabels.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector) SetMatchLabels(val OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchLabels) {
	s.MatchLabels = val
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchExpressionsItem struct {
	// Key is the label key that the selector applies to.
	Key string `json:"key"`
	// Operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists
	// and DoesNotExist.
	Operator string `json:"operator"`
	// Values is an array of string values. If the operator is In or NotIn, the values array must be
	// non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array
	// is replaced during a strategic merge patch.
	Values []string `json:"values"`
}

// GetKey returns the value of Key.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchExpressionsItem) GetKey() string {
	return s.Key
}

// GetOperator returns the value of Operator.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchExpressionsItem) GetOperator() string {
	return s.Operator
}

// GetValues returns the value of Values.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchExpressionsItem) GetValues() []string {
	return s.Values
}

// SetKey sets the value of Key.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchExpressionsItem) SetKey(val string) {
	s.Key = val
}

// SetOperator sets the value of Operator.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchExpressionsItem) SetOperator(val string) {
	s.Operator = val
}

// SetValues sets the value of Values.
func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchExpressionsItem) SetValues(val []string) {
	s.Values = val
}

// MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is
// equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and
// the values array contains only "value". The requirements are ANDed.
type DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchLabels map[string]string

func (s *DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchLabels) init() DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchLabels {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

type DatabaseClusterSpecBackupStoragesItemAnnotations map[string]string

func (s *DatabaseClusterSpecBackupStoragesItemAnnotations) init() DatabaseClusterSpecBackupStoragesItemAnnotations {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// SecurityContext holds security configuration that will be applied to a container. Some fields are
// present in both SecurityContext and PodSecurityContext.  When both are set, the values in
// SecurityContext take precedence.
type DatabaseClusterSpecBackupStoragesItemContainerSecurityContext struct {
	// AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent
	// process. This bool directly controls if the no_new_privs flag will be set on the container process.
	//  AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has
	// CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
	AllowPrivilegeEscalation OptBool `json:"allowPrivilegeEscalation"`
	// The capabilities to add/drop when running containers. Defaults to the default set of capabilities
	// granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
	Capabilities OptDatabaseClusterSpecBackupStoragesItemContainerSecurityContextCapabilities `json:"capabilities"`
	// Run container in privileged mode. Processes in privileged containers are essentially equivalent to
	// root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is
	// windows.
	Privileged OptBool `json:"privileged"`
	// ProcMount denotes the type of proc mount to use for the containers. The default is
	// DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths.
	// This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set
	// when spec.os.name is windows.
	ProcMount OptString `json:"procMount"`
	// Whether this container has a read-only root filesystem. Default is false. Note that this field
	// cannot be set when spec.os.name is windows.
	ReadOnlyRootFilesystem OptBool `json:"readOnlyRootFilesystem"`
	// The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be
	// set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value
	// specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.
	// name is windows.
	RunAsGroup OptInt64 `json:"runAsGroup"`
	// Indicates that the container must run as a non-root user. If true, the Kubelet will validate the
	// image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if
	// it does. If unset or false, no such validation will be performed. May also be set in
	// PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in
	// SecurityContext takes precedence.
	RunAsNonRoot OptBool `json:"runAsNonRoot"`
	// The UID to run the entrypoint of the container process. Defaults to user specified in image
	// metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext
	// and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this
	// field cannot be set when spec.os.name is windows.
	RunAsUser OptInt64 `json:"runAsUser"`
	// The SELinux context to be applied to the container. If unspecified, the container runtime will
	// allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If
	// set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes
	// precedence. Note that this field cannot be set when spec.os.name is windows.
	SeLinuxOptions OptDatabaseClusterSpecBackupStoragesItemContainerSecurityContextSeLinuxOptions `json:"seLinuxOptions"`
	// The seccomp options to use by this container. If seccomp options are provided at both the pod &
	// container level, the container options override the pod options. Note that this field cannot be
	// set when spec.os.name is windows.
	SeccompProfile OptDatabaseClusterSpecBackupStoragesItemContainerSecurityContextSeccompProfile `json:"seccompProfile"`
	// The Windows specific settings applied to all containers. If unspecified, the options from the
	// PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value
	// specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.
	// name is linux.
	WindowsOptions OptDatabaseClusterSpecBackupStoragesItemContainerSecurityContextWindowsOptions `json:"windowsOptions"`
}

// GetAllowPrivilegeEscalation returns the value of AllowPrivilegeEscalation.
func (s *DatabaseClusterSpecBackupStoragesItemContainerSecurityContext) GetAllowPrivilegeEscalation() OptBool {
	return s.AllowPrivilegeEscalation
}

// GetCapabilities returns the value of Capabilities.
func (s *DatabaseClusterSpecBackupStoragesItemContainerSecurityContext) GetCapabilities() OptDatabaseClusterSpecBackupStoragesItemContainerSecurityContextCapabilities {
	return s.Capabilities
}

// GetPrivileged returns the value of Privileged.
func (s *DatabaseClusterSpecBackupStoragesItemContainerSecurityContext) GetPrivileged() OptBool {
	return s.Privileged
}

// GetProcMount returns the value of ProcMount.
func (s *DatabaseClusterSpecBackupStoragesItemContainerSecurityContext) GetProcMount() OptString {
	return s.ProcMount
}

// GetReadOnlyRootFilesystem returns the value of ReadOnlyRootFilesystem.
func (s *DatabaseClusterSpecBackupStoragesItemContainerSecurityContext) GetReadOnlyRootFilesystem() OptBool {
	return s.ReadOnlyRootFilesystem
}

// GetRunAsGroup returns the value of RunAsGroup.
func (s *DatabaseClusterSpecBackupStoragesItemContainerSecurityContext) GetRunAsGroup() OptInt64 {
	return s.RunAsGroup
}

// GetRunAsNonRoot returns the value of RunAsNonRoot.
func (s *DatabaseClusterSpecBackupStoragesItemContainerSecurityContext) GetRunAsNonRoot() OptBool {
	return s.RunAsNonRoot
}

// GetRunAsUser returns the value of RunAsUser.
func (s *DatabaseClusterSpecBackupStoragesItemContainerSecurityContext) GetRunAsUser() OptInt64 {
	return s.RunAsUser
}

// GetSeLinuxOptions returns the value of SeLinuxOptions.
func (s *DatabaseClusterSpecBackupStoragesItemContainerSecurityContext) GetSeLinuxOptions() OptDatabaseClusterSpecBackupStoragesItemContainerSecurityContextSeLinuxOptions {
	return s.SeLinuxOptions
}

// GetSeccompProfile returns the value of SeccompProfile.
func (s *DatabaseClusterSpecBackupStoragesItemContainerSecurityContext) GetSeccompProfile() OptDatabaseClusterSpecBackupStoragesItemContainerSecurityContextSeccompProfile {
	return s.SeccompProfile
}

// GetWindowsOptions returns the value of WindowsOptions.
func (s *DatabaseClusterSpecBackupStoragesItemContainerSecurityContext) GetWindowsOptions() OptDatabaseClusterSpecBackupStoragesItemContainerSecurityContextWindowsOptions {
	return s.WindowsOptions
}

// SetAllowPrivilegeEscalation sets the value of AllowPrivilegeEscalation.
func (s *DatabaseClusterSpecBackupStoragesItemContainerSecurityContext) SetAllowPrivilegeEscalation(val OptBool) {
	s.AllowPrivilegeEscalation = val
}

// SetCapabilities sets the value of Capabilities.
func (s *DatabaseClusterSpecBackupStoragesItemContainerSecurityContext) SetCapabilities(val OptDatabaseClusterSpecBackupStoragesItemContainerSecurityContextCapabilities) {
	s.Capabilities = val
}

// SetPrivileged sets the value of Privileged.
func (s *DatabaseClusterSpecBackupStoragesItemContainerSecurityContext) SetPrivileged(val OptBool) {
	s.Privileged = val
}

// SetProcMount sets the value of ProcMount.
func (s *DatabaseClusterSpecBackupStoragesItemContainerSecurityContext) SetProcMount(val OptString) {
	s.ProcMount = val
}

// SetReadOnlyRootFilesystem sets the value of ReadOnlyRootFilesystem.
func (s *DatabaseClusterSpecBackupStoragesItemContainerSecurityContext) SetReadOnlyRootFilesystem(val OptBool) {
	s.ReadOnlyRootFilesystem = val
}

// SetRunAsGroup sets the value of RunAsGroup.
func (s *DatabaseClusterSpecBackupStoragesItemContainerSecurityContext) SetRunAsGroup(val OptInt64) {
	s.RunAsGroup = val
}

// SetRunAsNonRoot sets the value of RunAsNonRoot.
func (s *DatabaseClusterSpecBackupStoragesItemContainerSecurityContext) SetRunAsNonRoot(val OptBool) {
	s.RunAsNonRoot = val
}

// SetRunAsUser sets the value of RunAsUser.
func (s *DatabaseClusterSpecBackupStoragesItemContainerSecurityContext) SetRunAsUser(val OptInt64) {
	s.RunAsUser = val
}

// SetSeLinuxOptions sets the value of SeLinuxOptions.
func (s *DatabaseClusterSpecBackupStoragesItemContainerSecurityContext) SetSeLinuxOptions(val OptDatabaseClusterSpecBackupStoragesItemContainerSecurityContextSeLinuxOptions) {
	s.SeLinuxOptions = val
}

// SetSeccompProfile sets the value of SeccompProfile.
func (s *DatabaseClusterSpecBackupStoragesItemContainerSecurityContext) SetSeccompProfile(val OptDatabaseClusterSpecBackupStoragesItemContainerSecurityContextSeccompProfile) {
	s.SeccompProfile = val
}

// SetWindowsOptions sets the value of WindowsOptions.
func (s *DatabaseClusterSpecBackupStoragesItemContainerSecurityContext) SetWindowsOptions(val OptDatabaseClusterSpecBackupStoragesItemContainerSecurityContextWindowsOptions) {
	s.WindowsOptions = val
}

// The capabilities to add/drop when running containers. Defaults to the default set of capabilities
// granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
type DatabaseClusterSpecBackupStoragesItemContainerSecurityContextCapabilities struct {
	// Added capabilities.
	Add []string `json:"add"`
	// Removed capabilities.
	Drop []string `json:"drop"`
}

// GetAdd returns the value of Add.
func (s *DatabaseClusterSpecBackupStoragesItemContainerSecurityContextCapabilities) GetAdd() []string {
	return s.Add
}

// GetDrop returns the value of Drop.
func (s *DatabaseClusterSpecBackupStoragesItemContainerSecurityContextCapabilities) GetDrop() []string {
	return s.Drop
}

// SetAdd sets the value of Add.
func (s *DatabaseClusterSpecBackupStoragesItemContainerSecurityContextCapabilities) SetAdd(val []string) {
	s.Add = val
}

// SetDrop sets the value of Drop.
func (s *DatabaseClusterSpecBackupStoragesItemContainerSecurityContextCapabilities) SetDrop(val []string) {
	s.Drop = val
}

// The SELinux context to be applied to the container. If unspecified, the container runtime will
// allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If
// set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes
// precedence. Note that this field cannot be set when spec.os.name is windows.
type DatabaseClusterSpecBackupStoragesItemContainerSecurityContextSeLinuxOptions struct {
	// Level is SELinux level label that applies to the container.
	Level OptString `json:"level"`
	// Role is a SELinux role label that applies to the container.
	Role OptString `json:"role"`
	// Type is a SELinux type label that applies to the container.
	Type OptString `json:"type"`
	// User is a SELinux user label that applies to the container.
	User OptString `json:"user"`
}

// GetLevel returns the value of Level.
func (s *DatabaseClusterSpecBackupStoragesItemContainerSecurityContextSeLinuxOptions) GetLevel() OptString {
	return s.Level
}

// GetRole returns the value of Role.
func (s *DatabaseClusterSpecBackupStoragesItemContainerSecurityContextSeLinuxOptions) GetRole() OptString {
	return s.Role
}

// GetType returns the value of Type.
func (s *DatabaseClusterSpecBackupStoragesItemContainerSecurityContextSeLinuxOptions) GetType() OptString {
	return s.Type
}

// GetUser returns the value of User.
func (s *DatabaseClusterSpecBackupStoragesItemContainerSecurityContextSeLinuxOptions) GetUser() OptString {
	return s.User
}

// SetLevel sets the value of Level.
func (s *DatabaseClusterSpecBackupStoragesItemContainerSecurityContextSeLinuxOptions) SetLevel(val OptString) {
	s.Level = val
}

// SetRole sets the value of Role.
func (s *DatabaseClusterSpecBackupStoragesItemContainerSecurityContextSeLinuxOptions) SetRole(val OptString) {
	s.Role = val
}

// SetType sets the value of Type.
func (s *DatabaseClusterSpecBackupStoragesItemContainerSecurityContextSeLinuxOptions) SetType(val OptString) {
	s.Type = val
}

// SetUser sets the value of User.
func (s *DatabaseClusterSpecBackupStoragesItemContainerSecurityContextSeLinuxOptions) SetUser(val OptString) {
	s.User = val
}

// The seccomp options to use by this container. If seccomp options are provided at both the pod &
// container level, the container options override the pod options. Note that this field cannot be
// set when spec.os.name is windows.
type DatabaseClusterSpecBackupStoragesItemContainerSecurityContextSeccompProfile struct {
	// LocalhostProfile indicates a profile defined in a file on the node should be used. The profile
	// must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's
	// configured seccomp profile location. Must only be set if type is "Localhost".
	LocalhostProfile OptString `json:"localhostProfile"`
	// Type indicates which kind of seccomp profile will be applied. Valid options are:
	// Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container
	// runtime default profile should be used. Unconfined - no profile should be applied.
	Type string `json:"type"`
}

// GetLocalhostProfile returns the value of LocalhostProfile.
func (s *DatabaseClusterSpecBackupStoragesItemContainerSecurityContextSeccompProfile) GetLocalhostProfile() OptString {
	return s.LocalhostProfile
}

// GetType returns the value of Type.
func (s *DatabaseClusterSpecBackupStoragesItemContainerSecurityContextSeccompProfile) GetType() string {
	return s.Type
}

// SetLocalhostProfile sets the value of LocalhostProfile.
func (s *DatabaseClusterSpecBackupStoragesItemContainerSecurityContextSeccompProfile) SetLocalhostProfile(val OptString) {
	s.LocalhostProfile = val
}

// SetType sets the value of Type.
func (s *DatabaseClusterSpecBackupStoragesItemContainerSecurityContextSeccompProfile) SetType(val string) {
	s.Type = val
}

// The Windows specific settings applied to all containers. If unspecified, the options from the
// PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value
// specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.
// name is linux.
type DatabaseClusterSpecBackupStoragesItemContainerSecurityContextWindowsOptions struct {
	// GMSACredentialSpec is where the GMSA admission webhook (https://github.
	// com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the
	// GMSACredentialSpecName field.
	GmsaCredentialSpec OptString `json:"gmsaCredentialSpec"`
	// GMSACredentialSpecName is the name of the GMSA credential spec to use.
	GmsaCredentialSpecName OptString `json:"gmsaCredentialSpecName"`
	// HostProcess determines if a container should be run as a 'Host Process' container. This field is
	// alpha-level and will only be honored by components that enable the WindowsHostProcessContainers
	// feature flag. Setting this field without the feature flag will result in errors when validating
	// the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not
	// allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if
	// HostProcess is true then HostNetwork must also be set to true.
	HostProcess OptBool `json:"hostProcess"`
	// The UserName in Windows to run the entrypoint of the container process. Defaults to the user
	// specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both
	// SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
	RunAsUserName OptString `json:"runAsUserName"`
}

// GetGmsaCredentialSpec returns the value of GmsaCredentialSpec.
func (s *DatabaseClusterSpecBackupStoragesItemContainerSecurityContextWindowsOptions) GetGmsaCredentialSpec() OptString {
	return s.GmsaCredentialSpec
}

// GetGmsaCredentialSpecName returns the value of GmsaCredentialSpecName.
func (s *DatabaseClusterSpecBackupStoragesItemContainerSecurityContextWindowsOptions) GetGmsaCredentialSpecName() OptString {
	return s.GmsaCredentialSpecName
}

// GetHostProcess returns the value of HostProcess.
func (s *DatabaseClusterSpecBackupStoragesItemContainerSecurityContextWindowsOptions) GetHostProcess() OptBool {
	return s.HostProcess
}

// GetRunAsUserName returns the value of RunAsUserName.
func (s *DatabaseClusterSpecBackupStoragesItemContainerSecurityContextWindowsOptions) GetRunAsUserName() OptString {
	return s.RunAsUserName
}

// SetGmsaCredentialSpec sets the value of GmsaCredentialSpec.
func (s *DatabaseClusterSpecBackupStoragesItemContainerSecurityContextWindowsOptions) SetGmsaCredentialSpec(val OptString) {
	s.GmsaCredentialSpec = val
}

// SetGmsaCredentialSpecName sets the value of GmsaCredentialSpecName.
func (s *DatabaseClusterSpecBackupStoragesItemContainerSecurityContextWindowsOptions) SetGmsaCredentialSpecName(val OptString) {
	s.GmsaCredentialSpecName = val
}

// SetHostProcess sets the value of HostProcess.
func (s *DatabaseClusterSpecBackupStoragesItemContainerSecurityContextWindowsOptions) SetHostProcess(val OptBool) {
	s.HostProcess = val
}

// SetRunAsUserName sets the value of RunAsUserName.
func (s *DatabaseClusterSpecBackupStoragesItemContainerSecurityContextWindowsOptions) SetRunAsUserName(val OptString) {
	s.RunAsUserName = val
}

type DatabaseClusterSpecBackupStoragesItemLabels map[string]string

func (s *DatabaseClusterSpecBackupStoragesItemLabels) init() DatabaseClusterSpecBackupStoragesItemLabels {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

type DatabaseClusterSpecBackupStoragesItemNodeSelector map[string]string

func (s *DatabaseClusterSpecBackupStoragesItemNodeSelector) init() DatabaseClusterSpecBackupStoragesItemNodeSelector {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// PodSecurityContext holds pod-level security attributes and common container settings. Some fields
// are also present in container.securityContext.  Field values of container.securityContext take
// precedence over field values of PodSecurityContext.
type DatabaseClusterSpecBackupStoragesItemPodSecurityContext struct {
	// A special supplemental group that applies to all containers in a pod. Some volume types allow the
	// Kubelet to change the ownership of that volume to be owned by the pod:
	// 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume
	// will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----
	// If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this
	// field cannot be set when spec.os.name is windows.
	FsGroup OptInt64 `json:"fsGroup"`
	// FsGroupChangePolicy defines behavior of changing ownership and permission of the volume before
	// being exposed inside Pod. This field will only apply to volume types which support fsGroup based
	// ownership(and permissions). It will have no effect on ephemeral volume types such as: secret,
	// configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified,
	// "Always" is used. Note that this field cannot be set when spec.os.name is windows.
	FsGroupChangePolicy OptString `json:"fsGroupChangePolicy"`
	// The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be
	// set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value
	// specified in SecurityContext takes precedence for that container. Note that this field cannot be
	// set when spec.os.name is windows.
	RunAsGroup OptInt64 `json:"runAsGroup"`
	// Indicates that the container must run as a non-root user. If true, the Kubelet will validate the
	// image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if
	// it does. If unset or false, no such validation will be performed. May also be set in
	// SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in
	// SecurityContext takes precedence.
	RunAsNonRoot OptBool `json:"runAsNonRoot"`
	// The UID to run the entrypoint of the container process. Defaults to user specified in image
	// metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and
	// PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
	// Note that this field cannot be set when spec.os.name is windows.
	RunAsUser OptInt64 `json:"runAsUser"`
	// The SELinux context to be applied to all containers. If unspecified, the container runtime will
	// allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set
	// in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes
	// precedence for that container. Note that this field cannot be set when spec.os.name is windows.
	SeLinuxOptions OptDatabaseClusterSpecBackupStoragesItemPodSecurityContextSeLinuxOptions `json:"seLinuxOptions"`
	// The seccomp options to use by the containers in this pod. Note that this field cannot be set when
	// spec.os.name is windows.
	SeccompProfile OptDatabaseClusterSpecBackupStoragesItemPodSecurityContextSeccompProfile `json:"seccompProfile"`
	// A list of groups applied to the first process run in each container, in addition to the
	// container's primary GID, the fsGroup (if specified), and group memberships defined in the
	// container image for the uid of the container process. If unspecified, no additional groups are
	// added to any container. Note that group memberships defined in the container image for the uid of
	// the container process are still effective, even if they are not included in this list. Note that
	// this field cannot be set when spec.os.name is windows.
	SupplementalGroups []int64 `json:"supplementalGroups"`
	// Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the
	// container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is
	// windows.
	Sysctls []DatabaseClusterSpecBackupStoragesItemPodSecurityContextSysctlsItem `json:"sysctls"`
	// The Windows specific settings applied to all containers. If unspecified, the options within a
	// container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext,
	// the value specified in SecurityContext takes precedence. Note that this field cannot be set when
	// spec.os.name is linux.
	WindowsOptions OptDatabaseClusterSpecBackupStoragesItemPodSecurityContextWindowsOptions `json:"windowsOptions"`
}

// GetFsGroup returns the value of FsGroup.
func (s *DatabaseClusterSpecBackupStoragesItemPodSecurityContext) GetFsGroup() OptInt64 {
	return s.FsGroup
}

// GetFsGroupChangePolicy returns the value of FsGroupChangePolicy.
func (s *DatabaseClusterSpecBackupStoragesItemPodSecurityContext) GetFsGroupChangePolicy() OptString {
	return s.FsGroupChangePolicy
}

// GetRunAsGroup returns the value of RunAsGroup.
func (s *DatabaseClusterSpecBackupStoragesItemPodSecurityContext) GetRunAsGroup() OptInt64 {
	return s.RunAsGroup
}

// GetRunAsNonRoot returns the value of RunAsNonRoot.
func (s *DatabaseClusterSpecBackupStoragesItemPodSecurityContext) GetRunAsNonRoot() OptBool {
	return s.RunAsNonRoot
}

// GetRunAsUser returns the value of RunAsUser.
func (s *DatabaseClusterSpecBackupStoragesItemPodSecurityContext) GetRunAsUser() OptInt64 {
	return s.RunAsUser
}

// GetSeLinuxOptions returns the value of SeLinuxOptions.
func (s *DatabaseClusterSpecBackupStoragesItemPodSecurityContext) GetSeLinuxOptions() OptDatabaseClusterSpecBackupStoragesItemPodSecurityContextSeLinuxOptions {
	return s.SeLinuxOptions
}

// GetSeccompProfile returns the value of SeccompProfile.
func (s *DatabaseClusterSpecBackupStoragesItemPodSecurityContext) GetSeccompProfile() OptDatabaseClusterSpecBackupStoragesItemPodSecurityContextSeccompProfile {
	return s.SeccompProfile
}

// GetSupplementalGroups returns the value of SupplementalGroups.
func (s *DatabaseClusterSpecBackupStoragesItemPodSecurityContext) GetSupplementalGroups() []int64 {
	return s.SupplementalGroups
}

// GetSysctls returns the value of Sysctls.
func (s *DatabaseClusterSpecBackupStoragesItemPodSecurityContext) GetSysctls() []DatabaseClusterSpecBackupStoragesItemPodSecurityContextSysctlsItem {
	return s.Sysctls
}

// GetWindowsOptions returns the value of WindowsOptions.
func (s *DatabaseClusterSpecBackupStoragesItemPodSecurityContext) GetWindowsOptions() OptDatabaseClusterSpecBackupStoragesItemPodSecurityContextWindowsOptions {
	return s.WindowsOptions
}

// SetFsGroup sets the value of FsGroup.
func (s *DatabaseClusterSpecBackupStoragesItemPodSecurityContext) SetFsGroup(val OptInt64) {
	s.FsGroup = val
}

// SetFsGroupChangePolicy sets the value of FsGroupChangePolicy.
func (s *DatabaseClusterSpecBackupStoragesItemPodSecurityContext) SetFsGroupChangePolicy(val OptString) {
	s.FsGroupChangePolicy = val
}

// SetRunAsGroup sets the value of RunAsGroup.
func (s *DatabaseClusterSpecBackupStoragesItemPodSecurityContext) SetRunAsGroup(val OptInt64) {
	s.RunAsGroup = val
}

// SetRunAsNonRoot sets the value of RunAsNonRoot.
func (s *DatabaseClusterSpecBackupStoragesItemPodSecurityContext) SetRunAsNonRoot(val OptBool) {
	s.RunAsNonRoot = val
}

// SetRunAsUser sets the value of RunAsUser.
func (s *DatabaseClusterSpecBackupStoragesItemPodSecurityContext) SetRunAsUser(val OptInt64) {
	s.RunAsUser = val
}

// SetSeLinuxOptions sets the value of SeLinuxOptions.
func (s *DatabaseClusterSpecBackupStoragesItemPodSecurityContext) SetSeLinuxOptions(val OptDatabaseClusterSpecBackupStoragesItemPodSecurityContextSeLinuxOptions) {
	s.SeLinuxOptions = val
}

// SetSeccompProfile sets the value of SeccompProfile.
func (s *DatabaseClusterSpecBackupStoragesItemPodSecurityContext) SetSeccompProfile(val OptDatabaseClusterSpecBackupStoragesItemPodSecurityContextSeccompProfile) {
	s.SeccompProfile = val
}

// SetSupplementalGroups sets the value of SupplementalGroups.
func (s *DatabaseClusterSpecBackupStoragesItemPodSecurityContext) SetSupplementalGroups(val []int64) {
	s.SupplementalGroups = val
}

// SetSysctls sets the value of Sysctls.
func (s *DatabaseClusterSpecBackupStoragesItemPodSecurityContext) SetSysctls(val []DatabaseClusterSpecBackupStoragesItemPodSecurityContextSysctlsItem) {
	s.Sysctls = val
}

// SetWindowsOptions sets the value of WindowsOptions.
func (s *DatabaseClusterSpecBackupStoragesItemPodSecurityContext) SetWindowsOptions(val OptDatabaseClusterSpecBackupStoragesItemPodSecurityContextWindowsOptions) {
	s.WindowsOptions = val
}

// The SELinux context to be applied to all containers. If unspecified, the container runtime will
// allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set
// in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes
// precedence for that container. Note that this field cannot be set when spec.os.name is windows.
type DatabaseClusterSpecBackupStoragesItemPodSecurityContextSeLinuxOptions struct {
	// Level is SELinux level label that applies to the container.
	Level OptString `json:"level"`
	// Role is a SELinux role label that applies to the container.
	Role OptString `json:"role"`
	// Type is a SELinux type label that applies to the container.
	Type OptString `json:"type"`
	// User is a SELinux user label that applies to the container.
	User OptString `json:"user"`
}

// GetLevel returns the value of Level.
func (s *DatabaseClusterSpecBackupStoragesItemPodSecurityContextSeLinuxOptions) GetLevel() OptString {
	return s.Level
}

// GetRole returns the value of Role.
func (s *DatabaseClusterSpecBackupStoragesItemPodSecurityContextSeLinuxOptions) GetRole() OptString {
	return s.Role
}

// GetType returns the value of Type.
func (s *DatabaseClusterSpecBackupStoragesItemPodSecurityContextSeLinuxOptions) GetType() OptString {
	return s.Type
}

// GetUser returns the value of User.
func (s *DatabaseClusterSpecBackupStoragesItemPodSecurityContextSeLinuxOptions) GetUser() OptString {
	return s.User
}

// SetLevel sets the value of Level.
func (s *DatabaseClusterSpecBackupStoragesItemPodSecurityContextSeLinuxOptions) SetLevel(val OptString) {
	s.Level = val
}

// SetRole sets the value of Role.
func (s *DatabaseClusterSpecBackupStoragesItemPodSecurityContextSeLinuxOptions) SetRole(val OptString) {
	s.Role = val
}

// SetType sets the value of Type.
func (s *DatabaseClusterSpecBackupStoragesItemPodSecurityContextSeLinuxOptions) SetType(val OptString) {
	s.Type = val
}

// SetUser sets the value of User.
func (s *DatabaseClusterSpecBackupStoragesItemPodSecurityContextSeLinuxOptions) SetUser(val OptString) {
	s.User = val
}

// The seccomp options to use by the containers in this pod. Note that this field cannot be set when
// spec.os.name is windows.
type DatabaseClusterSpecBackupStoragesItemPodSecurityContextSeccompProfile struct {
	// LocalhostProfile indicates a profile defined in a file on the node should be used. The profile
	// must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's
	// configured seccomp profile location. Must only be set if type is "Localhost".
	LocalhostProfile OptString `json:"localhostProfile"`
	// Type indicates which kind of seccomp profile will be applied. Valid options are:
	// Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container
	// runtime default profile should be used. Unconfined - no profile should be applied.
	Type string `json:"type"`
}

// GetLocalhostProfile returns the value of LocalhostProfile.
func (s *DatabaseClusterSpecBackupStoragesItemPodSecurityContextSeccompProfile) GetLocalhostProfile() OptString {
	return s.LocalhostProfile
}

// GetType returns the value of Type.
func (s *DatabaseClusterSpecBackupStoragesItemPodSecurityContextSeccompProfile) GetType() string {
	return s.Type
}

// SetLocalhostProfile sets the value of LocalhostProfile.
func (s *DatabaseClusterSpecBackupStoragesItemPodSecurityContextSeccompProfile) SetLocalhostProfile(val OptString) {
	s.LocalhostProfile = val
}

// SetType sets the value of Type.
func (s *DatabaseClusterSpecBackupStoragesItemPodSecurityContextSeccompProfile) SetType(val string) {
	s.Type = val
}

// Sysctl defines a kernel parameter to be set.
type DatabaseClusterSpecBackupStoragesItemPodSecurityContextSysctlsItem struct {
	// Name of a property to set.
	Name string `json:"name"`
	// Value of a property to set.
	Value string `json:"value"`
}

// GetName returns the value of Name.
func (s *DatabaseClusterSpecBackupStoragesItemPodSecurityContextSysctlsItem) GetName() string {
	return s.Name
}

// GetValue returns the value of Value.
func (s *DatabaseClusterSpecBackupStoragesItemPodSecurityContextSysctlsItem) GetValue() string {
	return s.Value
}

// SetName sets the value of Name.
func (s *DatabaseClusterSpecBackupStoragesItemPodSecurityContextSysctlsItem) SetName(val string) {
	s.Name = val
}

// SetValue sets the value of Value.
func (s *DatabaseClusterSpecBackupStoragesItemPodSecurityContextSysctlsItem) SetValue(val string) {
	s.Value = val
}

// The Windows specific settings applied to all containers. If unspecified, the options within a
// container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext,
// the value specified in SecurityContext takes precedence. Note that this field cannot be set when
// spec.os.name is linux.
type DatabaseClusterSpecBackupStoragesItemPodSecurityContextWindowsOptions struct {
	// GMSACredentialSpec is where the GMSA admission webhook (https://github.
	// com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the
	// GMSACredentialSpecName field.
	GmsaCredentialSpec OptString `json:"gmsaCredentialSpec"`
	// GMSACredentialSpecName is the name of the GMSA credential spec to use.
	GmsaCredentialSpecName OptString `json:"gmsaCredentialSpecName"`
	// HostProcess determines if a container should be run as a 'Host Process' container. This field is
	// alpha-level and will only be honored by components that enable the WindowsHostProcessContainers
	// feature flag. Setting this field without the feature flag will result in errors when validating
	// the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not
	// allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if
	// HostProcess is true then HostNetwork must also be set to true.
	HostProcess OptBool `json:"hostProcess"`
	// The UserName in Windows to run the entrypoint of the container process. Defaults to the user
	// specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both
	// SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
	RunAsUserName OptString `json:"runAsUserName"`
}

// GetGmsaCredentialSpec returns the value of GmsaCredentialSpec.
func (s *DatabaseClusterSpecBackupStoragesItemPodSecurityContextWindowsOptions) GetGmsaCredentialSpec() OptString {
	return s.GmsaCredentialSpec
}

// GetGmsaCredentialSpecName returns the value of GmsaCredentialSpecName.
func (s *DatabaseClusterSpecBackupStoragesItemPodSecurityContextWindowsOptions) GetGmsaCredentialSpecName() OptString {
	return s.GmsaCredentialSpecName
}

// GetHostProcess returns the value of HostProcess.
func (s *DatabaseClusterSpecBackupStoragesItemPodSecurityContextWindowsOptions) GetHostProcess() OptBool {
	return s.HostProcess
}

// GetRunAsUserName returns the value of RunAsUserName.
func (s *DatabaseClusterSpecBackupStoragesItemPodSecurityContextWindowsOptions) GetRunAsUserName() OptString {
	return s.RunAsUserName
}

// SetGmsaCredentialSpec sets the value of GmsaCredentialSpec.
func (s *DatabaseClusterSpecBackupStoragesItemPodSecurityContextWindowsOptions) SetGmsaCredentialSpec(val OptString) {
	s.GmsaCredentialSpec = val
}

// SetGmsaCredentialSpecName sets the value of GmsaCredentialSpecName.
func (s *DatabaseClusterSpecBackupStoragesItemPodSecurityContextWindowsOptions) SetGmsaCredentialSpecName(val OptString) {
	s.GmsaCredentialSpecName = val
}

// SetHostProcess sets the value of HostProcess.
func (s *DatabaseClusterSpecBackupStoragesItemPodSecurityContextWindowsOptions) SetHostProcess(val OptBool) {
	s.HostProcess = val
}

// SetRunAsUserName sets the value of RunAsUserName.
func (s *DatabaseClusterSpecBackupStoragesItemPodSecurityContextWindowsOptions) SetRunAsUserName(val OptString) {
	s.RunAsUserName = val
}

// ResourceRequirements describes the compute resource requirements.
type DatabaseClusterSpecBackupStoragesItemResources struct {
	// Claims lists the names of resources, defined in spec.resourceClaims, that are used by this
	// container.
	// This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
	// This field is immutable. It can only be set for containers.
	Claims []DatabaseClusterSpecBackupStoragesItemResourcesClaimsItem `json:"claims"`
	// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.
	// io/docs/concepts/configuration/manage-resources-containers/.
	Limits OptDatabaseClusterSpecBackupStoragesItemResourcesLimits `json:"limits"`
	// Requests describes the minimum amount of compute resources required. If Requests is omitted for a
	// container, it defaults to Limits if that is explicitly specified, otherwise to an
	// implementation-defined value. More info: https://kubernetes.
	// io/docs/concepts/configuration/manage-resources-containers/.
	Requests OptDatabaseClusterSpecBackupStoragesItemResourcesRequests `json:"requests"`
}

// GetClaims returns the value of Claims.
func (s *DatabaseClusterSpecBackupStoragesItemResources) GetClaims() []DatabaseClusterSpecBackupStoragesItemResourcesClaimsItem {
	return s.Claims
}

// GetLimits returns the value of Limits.
func (s *DatabaseClusterSpecBackupStoragesItemResources) GetLimits() OptDatabaseClusterSpecBackupStoragesItemResourcesLimits {
	return s.Limits
}

// GetRequests returns the value of Requests.
func (s *DatabaseClusterSpecBackupStoragesItemResources) GetRequests() OptDatabaseClusterSpecBackupStoragesItemResourcesRequests {
	return s.Requests
}

// SetClaims sets the value of Claims.
func (s *DatabaseClusterSpecBackupStoragesItemResources) SetClaims(val []DatabaseClusterSpecBackupStoragesItemResourcesClaimsItem) {
	s.Claims = val
}

// SetLimits sets the value of Limits.
func (s *DatabaseClusterSpecBackupStoragesItemResources) SetLimits(val OptDatabaseClusterSpecBackupStoragesItemResourcesLimits) {
	s.Limits = val
}

// SetRequests sets the value of Requests.
func (s *DatabaseClusterSpecBackupStoragesItemResources) SetRequests(val OptDatabaseClusterSpecBackupStoragesItemResourcesRequests) {
	s.Requests = val
}

// ResourceClaim references one entry in PodSpec.ResourceClaims.
type DatabaseClusterSpecBackupStoragesItemResourcesClaimsItem struct {
	// Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is
	// used. It makes that resource available inside a container.
	Name string `json:"name"`
}

// GetName returns the value of Name.
func (s *DatabaseClusterSpecBackupStoragesItemResourcesClaimsItem) GetName() string {
	return s.Name
}

// SetName sets the value of Name.
func (s *DatabaseClusterSpecBackupStoragesItemResourcesClaimsItem) SetName(val string) {
	s.Name = val
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.
// io/docs/concepts/configuration/manage-resources-containers/.
type DatabaseClusterSpecBackupStoragesItemResourcesLimits map[string]DatabaseClusterSpecBackupStoragesItemResourcesLimitsItem

func (s *DatabaseClusterSpecBackupStoragesItemResourcesLimits) init() DatabaseClusterSpecBackupStoragesItemResourcesLimits {
	m := *s
	if m == nil {
		m = map[string]DatabaseClusterSpecBackupStoragesItemResourcesLimitsItem{}
		*s = m
	}
	return m
}

// DatabaseClusterSpecBackupStoragesItemResourcesLimitsItem represents sum type.
type DatabaseClusterSpecBackupStoragesItemResourcesLimitsItem struct {
	Type   DatabaseClusterSpecBackupStoragesItemResourcesLimitsItemType // switch on this field
	Int    int
	String string
}

// DatabaseClusterSpecBackupStoragesItemResourcesLimitsItemType is oneOf type of DatabaseClusterSpecBackupStoragesItemResourcesLimitsItem.
type DatabaseClusterSpecBackupStoragesItemResourcesLimitsItemType string

// Possible values for DatabaseClusterSpecBackupStoragesItemResourcesLimitsItemType.
const (
	IntDatabaseClusterSpecBackupStoragesItemResourcesLimitsItem    DatabaseClusterSpecBackupStoragesItemResourcesLimitsItemType = "int"
	StringDatabaseClusterSpecBackupStoragesItemResourcesLimitsItem DatabaseClusterSpecBackupStoragesItemResourcesLimitsItemType = "string"
)

// IsInt reports whether DatabaseClusterSpecBackupStoragesItemResourcesLimitsItem is int.
func (s DatabaseClusterSpecBackupStoragesItemResourcesLimitsItem) IsInt() bool {
	return s.Type == IntDatabaseClusterSpecBackupStoragesItemResourcesLimitsItem
}

// IsString reports whether DatabaseClusterSpecBackupStoragesItemResourcesLimitsItem is string.
func (s DatabaseClusterSpecBackupStoragesItemResourcesLimitsItem) IsString() bool {
	return s.Type == StringDatabaseClusterSpecBackupStoragesItemResourcesLimitsItem
}

// SetInt sets DatabaseClusterSpecBackupStoragesItemResourcesLimitsItem to int.
func (s *DatabaseClusterSpecBackupStoragesItemResourcesLimitsItem) SetInt(v int) {
	s.Type = IntDatabaseClusterSpecBackupStoragesItemResourcesLimitsItem
	s.Int = v
}

// GetInt returns int and true boolean if DatabaseClusterSpecBackupStoragesItemResourcesLimitsItem is int.
func (s DatabaseClusterSpecBackupStoragesItemResourcesLimitsItem) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntDatabaseClusterSpecBackupStoragesItemResourcesLimitsItem returns new DatabaseClusterSpecBackupStoragesItemResourcesLimitsItem from int.
func NewIntDatabaseClusterSpecBackupStoragesItemResourcesLimitsItem(v int) DatabaseClusterSpecBackupStoragesItemResourcesLimitsItem {
	var s DatabaseClusterSpecBackupStoragesItemResourcesLimitsItem
	s.SetInt(v)
	return s
}

// SetString sets DatabaseClusterSpecBackupStoragesItemResourcesLimitsItem to string.
func (s *DatabaseClusterSpecBackupStoragesItemResourcesLimitsItem) SetString(v string) {
	s.Type = StringDatabaseClusterSpecBackupStoragesItemResourcesLimitsItem
	s.String = v
}

// GetString returns string and true boolean if DatabaseClusterSpecBackupStoragesItemResourcesLimitsItem is string.
func (s DatabaseClusterSpecBackupStoragesItemResourcesLimitsItem) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringDatabaseClusterSpecBackupStoragesItemResourcesLimitsItem returns new DatabaseClusterSpecBackupStoragesItemResourcesLimitsItem from string.
func NewStringDatabaseClusterSpecBackupStoragesItemResourcesLimitsItem(v string) DatabaseClusterSpecBackupStoragesItemResourcesLimitsItem {
	var s DatabaseClusterSpecBackupStoragesItemResourcesLimitsItem
	s.SetString(v)
	return s
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a
// container, it defaults to Limits if that is explicitly specified, otherwise to an
// implementation-defined value. More info: https://kubernetes.
// io/docs/concepts/configuration/manage-resources-containers/.
type DatabaseClusterSpecBackupStoragesItemResourcesRequests map[string]DatabaseClusterSpecBackupStoragesItemResourcesRequestsItem

func (s *DatabaseClusterSpecBackupStoragesItemResourcesRequests) init() DatabaseClusterSpecBackupStoragesItemResourcesRequests {
	m := *s
	if m == nil {
		m = map[string]DatabaseClusterSpecBackupStoragesItemResourcesRequestsItem{}
		*s = m
	}
	return m
}

// DatabaseClusterSpecBackupStoragesItemResourcesRequestsItem represents sum type.
type DatabaseClusterSpecBackupStoragesItemResourcesRequestsItem struct {
	Type   DatabaseClusterSpecBackupStoragesItemResourcesRequestsItemType // switch on this field
	Int    int
	String string
}

// DatabaseClusterSpecBackupStoragesItemResourcesRequestsItemType is oneOf type of DatabaseClusterSpecBackupStoragesItemResourcesRequestsItem.
type DatabaseClusterSpecBackupStoragesItemResourcesRequestsItemType string

// Possible values for DatabaseClusterSpecBackupStoragesItemResourcesRequestsItemType.
const (
	IntDatabaseClusterSpecBackupStoragesItemResourcesRequestsItem    DatabaseClusterSpecBackupStoragesItemResourcesRequestsItemType = "int"
	StringDatabaseClusterSpecBackupStoragesItemResourcesRequestsItem DatabaseClusterSpecBackupStoragesItemResourcesRequestsItemType = "string"
)

// IsInt reports whether DatabaseClusterSpecBackupStoragesItemResourcesRequestsItem is int.
func (s DatabaseClusterSpecBackupStoragesItemResourcesRequestsItem) IsInt() bool {
	return s.Type == IntDatabaseClusterSpecBackupStoragesItemResourcesRequestsItem
}

// IsString reports whether DatabaseClusterSpecBackupStoragesItemResourcesRequestsItem is string.
func (s DatabaseClusterSpecBackupStoragesItemResourcesRequestsItem) IsString() bool {
	return s.Type == StringDatabaseClusterSpecBackupStoragesItemResourcesRequestsItem
}

// SetInt sets DatabaseClusterSpecBackupStoragesItemResourcesRequestsItem to int.
func (s *DatabaseClusterSpecBackupStoragesItemResourcesRequestsItem) SetInt(v int) {
	s.Type = IntDatabaseClusterSpecBackupStoragesItemResourcesRequestsItem
	s.Int = v
}

// GetInt returns int and true boolean if DatabaseClusterSpecBackupStoragesItemResourcesRequestsItem is int.
func (s DatabaseClusterSpecBackupStoragesItemResourcesRequestsItem) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntDatabaseClusterSpecBackupStoragesItemResourcesRequestsItem returns new DatabaseClusterSpecBackupStoragesItemResourcesRequestsItem from int.
func NewIntDatabaseClusterSpecBackupStoragesItemResourcesRequestsItem(v int) DatabaseClusterSpecBackupStoragesItemResourcesRequestsItem {
	var s DatabaseClusterSpecBackupStoragesItemResourcesRequestsItem
	s.SetInt(v)
	return s
}

// SetString sets DatabaseClusterSpecBackupStoragesItemResourcesRequestsItem to string.
func (s *DatabaseClusterSpecBackupStoragesItemResourcesRequestsItem) SetString(v string) {
	s.Type = StringDatabaseClusterSpecBackupStoragesItemResourcesRequestsItem
	s.String = v
}

// GetString returns string and true boolean if DatabaseClusterSpecBackupStoragesItemResourcesRequestsItem is string.
func (s DatabaseClusterSpecBackupStoragesItemResourcesRequestsItem) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringDatabaseClusterSpecBackupStoragesItemResourcesRequestsItem returns new DatabaseClusterSpecBackupStoragesItemResourcesRequestsItem from string.
func NewStringDatabaseClusterSpecBackupStoragesItemResourcesRequestsItem(v string) DatabaseClusterSpecBackupStoragesItemResourcesRequestsItem {
	var s DatabaseClusterSpecBackupStoragesItemResourcesRequestsItem
	s.SetString(v)
	return s
}

// BackupStorageProviderSpec represents set of settings to configure cloud provider.
type DatabaseClusterSpecBackupStoragesItemStorageProvider struct {
	Bucket OptString `json:"bucket"`
	// A container name is a valid DNS name that conforms to the Azure naming rules.
	ContainerName     OptString `json:"containerName"`
	CredentialsSecret string    `json:"credentialsSecret"`
	EndpointUrl       OptString `json:"endpointUrl"`
	Prefix            OptString `json:"prefix"`
	Region            OptString `json:"region"`
	// STANDARD, NEARLINE, COLDLINE, ARCHIVE for GCP Hot (Frequently accessed or modified data), Cool
	// (Infrequently accessed or modified data), Archive (Rarely accessed or modified data) for Azure.
	StorageClass OptString `json:"storageClass"`
}

// GetBucket returns the value of Bucket.
func (s *DatabaseClusterSpecBackupStoragesItemStorageProvider) GetBucket() OptString {
	return s.Bucket
}

// GetContainerName returns the value of ContainerName.
func (s *DatabaseClusterSpecBackupStoragesItemStorageProvider) GetContainerName() OptString {
	return s.ContainerName
}

// GetCredentialsSecret returns the value of CredentialsSecret.
func (s *DatabaseClusterSpecBackupStoragesItemStorageProvider) GetCredentialsSecret() string {
	return s.CredentialsSecret
}

// GetEndpointUrl returns the value of EndpointUrl.
func (s *DatabaseClusterSpecBackupStoragesItemStorageProvider) GetEndpointUrl() OptString {
	return s.EndpointUrl
}

// GetPrefix returns the value of Prefix.
func (s *DatabaseClusterSpecBackupStoragesItemStorageProvider) GetPrefix() OptString {
	return s.Prefix
}

// GetRegion returns the value of Region.
func (s *DatabaseClusterSpecBackupStoragesItemStorageProvider) GetRegion() OptString {
	return s.Region
}

// GetStorageClass returns the value of StorageClass.
func (s *DatabaseClusterSpecBackupStoragesItemStorageProvider) GetStorageClass() OptString {
	return s.StorageClass
}

// SetBucket sets the value of Bucket.
func (s *DatabaseClusterSpecBackupStoragesItemStorageProvider) SetBucket(val OptString) {
	s.Bucket = val
}

// SetContainerName sets the value of ContainerName.
func (s *DatabaseClusterSpecBackupStoragesItemStorageProvider) SetContainerName(val OptString) {
	s.ContainerName = val
}

// SetCredentialsSecret sets the value of CredentialsSecret.
func (s *DatabaseClusterSpecBackupStoragesItemStorageProvider) SetCredentialsSecret(val string) {
	s.CredentialsSecret = val
}

// SetEndpointUrl sets the value of EndpointUrl.
func (s *DatabaseClusterSpecBackupStoragesItemStorageProvider) SetEndpointUrl(val OptString) {
	s.EndpointUrl = val
}

// SetPrefix sets the value of Prefix.
func (s *DatabaseClusterSpecBackupStoragesItemStorageProvider) SetPrefix(val OptString) {
	s.Prefix = val
}

// SetRegion sets the value of Region.
func (s *DatabaseClusterSpecBackupStoragesItemStorageProvider) SetRegion(val OptString) {
	s.Region = val
}

// SetStorageClass sets the value of StorageClass.
func (s *DatabaseClusterSpecBackupStoragesItemStorageProvider) SetStorageClass(val OptString) {
	s.StorageClass = val
}

// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,
// effect> using the matching operator <operator>.
type DatabaseClusterSpecBackupStoragesItemTolerationsItem struct {
	// Effect indicates the taint effect to match. Empty means match all taint effects. When specified,
	// allowed values are NoSchedule, PreferNoSchedule and NoExecute.
	Effect OptString `json:"effect"`
	// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key
	// is empty, operator must be Exists; this combination means to match all values and all keys.
	Key OptString `json:"key"`
	// Operator represents a key's relationship to the value. Valid operators are Exists and Equal.
	// Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all
	// taints of a particular category.
	Operator OptString `json:"operator"`
	// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute,
	// otherwise this field is ignored) tolerates the taint. By default, it is not set, which means
	// tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict
	// immediately) by the system.
	TolerationSeconds OptInt64 `json:"tolerationSeconds"`
	// Value is the taint value the toleration matches to. If the operator is Exists, the value should be
	// empty, otherwise just a regular string.
	Value OptString `json:"value"`
}

// GetEffect returns the value of Effect.
func (s *DatabaseClusterSpecBackupStoragesItemTolerationsItem) GetEffect() OptString {
	return s.Effect
}

// GetKey returns the value of Key.
func (s *DatabaseClusterSpecBackupStoragesItemTolerationsItem) GetKey() OptString {
	return s.Key
}

// GetOperator returns the value of Operator.
func (s *DatabaseClusterSpecBackupStoragesItemTolerationsItem) GetOperator() OptString {
	return s.Operator
}

// GetTolerationSeconds returns the value of TolerationSeconds.
func (s *DatabaseClusterSpecBackupStoragesItemTolerationsItem) GetTolerationSeconds() OptInt64 {
	return s.TolerationSeconds
}

// GetValue returns the value of Value.
func (s *DatabaseClusterSpecBackupStoragesItemTolerationsItem) GetValue() OptString {
	return s.Value
}

// SetEffect sets the value of Effect.
func (s *DatabaseClusterSpecBackupStoragesItemTolerationsItem) SetEffect(val OptString) {
	s.Effect = val
}

// SetKey sets the value of Key.
func (s *DatabaseClusterSpecBackupStoragesItemTolerationsItem) SetKey(val OptString) {
	s.Key = val
}

// SetOperator sets the value of Operator.
func (s *DatabaseClusterSpecBackupStoragesItemTolerationsItem) SetOperator(val OptString) {
	s.Operator = val
}

// SetTolerationSeconds sets the value of TolerationSeconds.
func (s *DatabaseClusterSpecBackupStoragesItemTolerationsItem) SetTolerationSeconds(val OptInt64) {
	s.TolerationSeconds = val
}

// SetValue sets the value of Value.
func (s *DatabaseClusterSpecBackupStoragesItemTolerationsItem) SetValue(val OptString) {
	s.Value = val
}

// VolumeSpec represents a specification to configure volume for underlying database.
type DatabaseClusterSpecBackupStoragesItemVolumeSpec struct {
	// EmptyDir to use as data volume for mysql. EmptyDir represents a temporary directory that shares a
	// pod's lifetime.
	EmptyDir OptDatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDir `json:"emptyDir"`
	// HostPath to use as data volume for mysql. HostPath represents a pre-existing file or directory on
	// the host machine that is directly exposed to the container.
	HostPath OptDatabaseClusterSpecBackupStoragesItemVolumeSpecHostPath `json:"hostPath"`
	// PersistentVolumeClaim to specify PVC spec for the volume for mysql data. It has the highest level
	// of precedence, followed by HostPath and EmptyDir. And represents the PVC specification.
	PersistentVolumeClaim OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaim `json:"persistentVolumeClaim"`
}

// GetEmptyDir returns the value of EmptyDir.
func (s *DatabaseClusterSpecBackupStoragesItemVolumeSpec) GetEmptyDir() OptDatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDir {
	return s.EmptyDir
}

// GetHostPath returns the value of HostPath.
func (s *DatabaseClusterSpecBackupStoragesItemVolumeSpec) GetHostPath() OptDatabaseClusterSpecBackupStoragesItemVolumeSpecHostPath {
	return s.HostPath
}

// GetPersistentVolumeClaim returns the value of PersistentVolumeClaim.
func (s *DatabaseClusterSpecBackupStoragesItemVolumeSpec) GetPersistentVolumeClaim() OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaim {
	return s.PersistentVolumeClaim
}

// SetEmptyDir sets the value of EmptyDir.
func (s *DatabaseClusterSpecBackupStoragesItemVolumeSpec) SetEmptyDir(val OptDatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDir) {
	s.EmptyDir = val
}

// SetHostPath sets the value of HostPath.
func (s *DatabaseClusterSpecBackupStoragesItemVolumeSpec) SetHostPath(val OptDatabaseClusterSpecBackupStoragesItemVolumeSpecHostPath) {
	s.HostPath = val
}

// SetPersistentVolumeClaim sets the value of PersistentVolumeClaim.
func (s *DatabaseClusterSpecBackupStoragesItemVolumeSpec) SetPersistentVolumeClaim(val OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaim) {
	s.PersistentVolumeClaim = val
}

// EmptyDir to use as data volume for mysql. EmptyDir represents a temporary directory that shares a
// pod's lifetime.
type DatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDir struct {
	// Medium represents what type of storage medium should back this directory. The default is "" which
	// means to use the node's default medium. Must be an empty string (default) or Memory. More info:
	// https://kubernetes.io/docs/concepts/storage/volumes#emptydir.
	Medium OptString `json:"medium"`
	// SizeLimit is the total amount of local storage required for this EmptyDir volume. The size limit
	// is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the
	// minimum value between the SizeLimit specified here and the sum of memory limits of all containers
	// in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.
	// io/docs/user-guide/volumes#emptydir.
	SizeLimit OptDatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDirSizeLimit `json:"sizeLimit"`
}

// GetMedium returns the value of Medium.
func (s *DatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDir) GetMedium() OptString {
	return s.Medium
}

// GetSizeLimit returns the value of SizeLimit.
func (s *DatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDir) GetSizeLimit() OptDatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDirSizeLimit {
	return s.SizeLimit
}

// SetMedium sets the value of Medium.
func (s *DatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDir) SetMedium(val OptString) {
	s.Medium = val
}

// SetSizeLimit sets the value of SizeLimit.
func (s *DatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDir) SetSizeLimit(val OptDatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDirSizeLimit) {
	s.SizeLimit = val
}

// SizeLimit is the total amount of local storage required for this EmptyDir volume. The size limit
// is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the
// minimum value between the SizeLimit specified here and the sum of memory limits of all containers
// in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.
// io/docs/user-guide/volumes#emptydir.
// DatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDirSizeLimit represents sum type.
type DatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDirSizeLimit struct {
	Type   DatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDirSizeLimitType // switch on this field
	Int    int
	String string
}

// DatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDirSizeLimitType is oneOf type of DatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDirSizeLimit.
type DatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDirSizeLimitType string

// Possible values for DatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDirSizeLimitType.
const (
	IntDatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDirSizeLimit    DatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDirSizeLimitType = "int"
	StringDatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDirSizeLimit DatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDirSizeLimitType = "string"
)

// IsInt reports whether DatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDirSizeLimit is int.
func (s DatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDirSizeLimit) IsInt() bool {
	return s.Type == IntDatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDirSizeLimit
}

// IsString reports whether DatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDirSizeLimit is string.
func (s DatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDirSizeLimit) IsString() bool {
	return s.Type == StringDatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDirSizeLimit
}

// SetInt sets DatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDirSizeLimit to int.
func (s *DatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDirSizeLimit) SetInt(v int) {
	s.Type = IntDatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDirSizeLimit
	s.Int = v
}

// GetInt returns int and true boolean if DatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDirSizeLimit is int.
func (s DatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDirSizeLimit) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntDatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDirSizeLimit returns new DatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDirSizeLimit from int.
func NewIntDatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDirSizeLimit(v int) DatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDirSizeLimit {
	var s DatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDirSizeLimit
	s.SetInt(v)
	return s
}

// SetString sets DatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDirSizeLimit to string.
func (s *DatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDirSizeLimit) SetString(v string) {
	s.Type = StringDatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDirSizeLimit
	s.String = v
}

// GetString returns string and true boolean if DatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDirSizeLimit is string.
func (s DatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDirSizeLimit) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringDatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDirSizeLimit returns new DatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDirSizeLimit from string.
func NewStringDatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDirSizeLimit(v string) DatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDirSizeLimit {
	var s DatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDirSizeLimit
	s.SetString(v)
	return s
}

// HostPath to use as data volume for mysql. HostPath represents a pre-existing file or directory on
// the host machine that is directly exposed to the container.
type DatabaseClusterSpecBackupStoragesItemVolumeSpecHostPath struct {
	// Path of the directory on the host. If the path is a symlink, it will follow the link to the real
	// path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath.
	Path string `json:"path"`
	// Type for HostPath Volume Defaults to "" More info: https://kubernetes.
	// io/docs/concepts/storage/volumes#hostpath.
	Type OptString `json:"type"`
}

// GetPath returns the value of Path.
func (s *DatabaseClusterSpecBackupStoragesItemVolumeSpecHostPath) GetPath() string {
	return s.Path
}

// GetType returns the value of Type.
func (s *DatabaseClusterSpecBackupStoragesItemVolumeSpecHostPath) GetType() OptString {
	return s.Type
}

// SetPath sets the value of Path.
func (s *DatabaseClusterSpecBackupStoragesItemVolumeSpecHostPath) SetPath(val string) {
	s.Path = val
}

// SetType sets the value of Type.
func (s *DatabaseClusterSpecBackupStoragesItemVolumeSpecHostPath) SetType(val OptString) {
	s.Type = val
}

// PersistentVolumeClaim to specify PVC spec for the volume for mysql data. It has the highest level
// of precedence, followed by HostPath and EmptyDir. And represents the PVC specification.
type DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaim struct {
	// AccessModes contains the desired access modes the volume should have. More info:
	// https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1.
	AccessModes []string `json:"accessModes"`
	// DataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.
	// storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an
	// external controller can support the specified data source, it will create a new volume based on
	// the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled,
	// dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to
	// dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then
	// dataSourceRef will not be copied to dataSource.
	DataSource OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimDataSource `json:"dataSource"`
	// DataSourceRef specifies the object from which to populate the volume with data, if a non-empty
	// volume is desired. This may be any object from a non-empty API group (non core object) or a
	// PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if
	// the type of the specified object matches some installed volume populator or dynamic provisioner.
	// This field will replace the functionality of the dataSource field and as such if both fields are
	// non-empty, they must have the same value. For backwards compatibility, when namespace isn't
	// specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same
	// value automatically if one of them is empty and the other is non-empty. When namespace is
	// specified in dataSourceRef, dataSource isn't set to the same value and must be empty. There are
	// three important differences between dataSource and dataSourceRef: * While dataSource only allows
	// two specific types of objects, dataSourceRef allows any non-core object, as well as
	// PersistentVolumeClaim objects. * While dataSource ignores disallowed values (dropping them),
	// dataSourceRef preserves all values, and generates an error if a disallowed value is specified. *
	// While dataSource only allows local objects, dataSourceRef allows objects in any namespaces. (Beta)
	// Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the
	// namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be
	// enabled.
	DataSourceRef OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimDataSourceRef `json:"dataSourceRef"`
	// Resources represents the minimum resources the volume should have. If
	// RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource
	// requirements that are lower than previous value but must still be higher than capacity recorded in
	// the status field of the claim. More info: https://kubernetes.
	// io/docs/concepts/storage/persistent-volumes#resources.
	Resources OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResources `json:"resources"`
	// Selector is a label query over volumes to consider for binding.
	Selector OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimSelector `json:"selector"`
	// StorageClassName is the name of the StorageClass required by the claim. More info:
	// https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1.
	StorageClassName OptString `json:"storageClassName"`
	// VolumeMode defines what type of volume is required by the claim. Value of Filesystem is implied
	// when not included in claim spec.
	VolumeMode OptString `json:"volumeMode"`
	// VolumeName is the binding reference to the PersistentVolume backing this claim.
	VolumeName OptString `json:"volumeName"`
}

// GetAccessModes returns the value of AccessModes.
func (s *DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaim) GetAccessModes() []string {
	return s.AccessModes
}

// GetDataSource returns the value of DataSource.
func (s *DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaim) GetDataSource() OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimDataSource {
	return s.DataSource
}

// GetDataSourceRef returns the value of DataSourceRef.
func (s *DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaim) GetDataSourceRef() OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimDataSourceRef {
	return s.DataSourceRef
}

// GetResources returns the value of Resources.
func (s *DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaim) GetResources() OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResources {
	return s.Resources
}

// GetSelector returns the value of Selector.
func (s *DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaim) GetSelector() OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimSelector {
	return s.Selector
}

// GetStorageClassName returns the value of StorageClassName.
func (s *DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaim) GetStorageClassName() OptString {
	return s.StorageClassName
}

// GetVolumeMode returns the value of VolumeMode.
func (s *DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaim) GetVolumeMode() OptString {
	return s.VolumeMode
}

// GetVolumeName returns the value of VolumeName.
func (s *DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaim) GetVolumeName() OptString {
	return s.VolumeName
}

// SetAccessModes sets the value of AccessModes.
func (s *DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaim) SetAccessModes(val []string) {
	s.AccessModes = val
}

// SetDataSource sets the value of DataSource.
func (s *DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaim) SetDataSource(val OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimDataSource) {
	s.DataSource = val
}

// SetDataSourceRef sets the value of DataSourceRef.
func (s *DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaim) SetDataSourceRef(val OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimDataSourceRef) {
	s.DataSourceRef = val
}

// SetResources sets the value of Resources.
func (s *DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaim) SetResources(val OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResources) {
	s.Resources = val
}

// SetSelector sets the value of Selector.
func (s *DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaim) SetSelector(val OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimSelector) {
	s.Selector = val
}

// SetStorageClassName sets the value of StorageClassName.
func (s *DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaim) SetStorageClassName(val OptString) {
	s.StorageClassName = val
}

// SetVolumeMode sets the value of VolumeMode.
func (s *DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaim) SetVolumeMode(val OptString) {
	s.VolumeMode = val
}

// SetVolumeName sets the value of VolumeName.
func (s *DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaim) SetVolumeName(val OptString) {
	s.VolumeName = val
}

// DataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.
// storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an
// external controller can support the specified data source, it will create a new volume based on
// the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled,
// dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to
// dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then
// dataSourceRef will not be copied to dataSource.
type DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimDataSource struct {
	// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the
	// specified Kind must be in the core API group. For any other third-party types, APIGroup is
	// required.
	ApiGroup OptString `json:"apiGroup"`
	// Kind is the type of resource being referenced.
	Kind string `json:"kind"`
	// Name is the name of resource being referenced.
	Name string `json:"name"`
}

// GetApiGroup returns the value of ApiGroup.
func (s *DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimDataSource) GetApiGroup() OptString {
	return s.ApiGroup
}

// GetKind returns the value of Kind.
func (s *DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimDataSource) GetKind() string {
	return s.Kind
}

// GetName returns the value of Name.
func (s *DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimDataSource) GetName() string {
	return s.Name
}

// SetApiGroup sets the value of ApiGroup.
func (s *DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimDataSource) SetApiGroup(val OptString) {
	s.ApiGroup = val
}

// SetKind sets the value of Kind.
func (s *DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimDataSource) SetKind(val string) {
	s.Kind = val
}

// SetName sets the value of Name.
func (s *DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimDataSource) SetName(val string) {
	s.Name = val
}

// DataSourceRef specifies the object from which to populate the volume with data, if a non-empty
// volume is desired. This may be any object from a non-empty API group (non core object) or a
// PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if
// the type of the specified object matches some installed volume populator or dynamic provisioner.
// This field will replace the functionality of the dataSource field and as such if both fields are
// non-empty, they must have the same value. For backwards compatibility, when namespace isn't
// specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same
// value automatically if one of them is empty and the other is non-empty. When namespace is
// specified in dataSourceRef, dataSource isn't set to the same value and must be empty. There are
// three important differences between dataSource and dataSourceRef: * While dataSource only allows
// two specific types of objects, dataSourceRef allows any non-core object, as well as
// PersistentVolumeClaim objects. * While dataSource ignores disallowed values (dropping them),
// dataSourceRef preserves all values, and generates an error if a disallowed value is specified. *
// While dataSource only allows local objects, dataSourceRef allows objects in any namespaces. (Beta)
// Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the
// namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be
// enabled.
type DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimDataSourceRef struct {
	// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the
	// specified Kind must be in the core API group. For any other third-party types, APIGroup is
	// required.
	ApiGroup OptString `json:"apiGroup"`
	// Kind is the type of resource being referenced.
	Kind string `json:"kind"`
	// Name is the name of resource being referenced.
	Name string `json:"name"`
	// Namespace is the namespace of resource being referenced Note that when a namespace is specified, a
	// gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow
	// that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
	// (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
	Namespace OptString `json:"namespace"`
}

// GetApiGroup returns the value of ApiGroup.
func (s *DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimDataSourceRef) GetApiGroup() OptString {
	return s.ApiGroup
}

// GetKind returns the value of Kind.
func (s *DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimDataSourceRef) GetKind() string {
	return s.Kind
}

// GetName returns the value of Name.
func (s *DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimDataSourceRef) GetName() string {
	return s.Name
}

// GetNamespace returns the value of Namespace.
func (s *DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimDataSourceRef) GetNamespace() OptString {
	return s.Namespace
}

// SetApiGroup sets the value of ApiGroup.
func (s *DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimDataSourceRef) SetApiGroup(val OptString) {
	s.ApiGroup = val
}

// SetKind sets the value of Kind.
func (s *DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimDataSourceRef) SetKind(val string) {
	s.Kind = val
}

// SetName sets the value of Name.
func (s *DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimDataSourceRef) SetName(val string) {
	s.Name = val
}

// SetNamespace sets the value of Namespace.
func (s *DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimDataSourceRef) SetNamespace(val OptString) {
	s.Namespace = val
}

// Resources represents the minimum resources the volume should have. If
// RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource
// requirements that are lower than previous value but must still be higher than capacity recorded in
// the status field of the claim. More info: https://kubernetes.
// io/docs/concepts/storage/persistent-volumes#resources.
type DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResources struct {
	// Claims lists the names of resources, defined in spec.resourceClaims, that are used by this
	// container.
	// This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
	// This field is immutable. It can only be set for containers.
	Claims []DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesClaimsItem `json:"claims"`
	// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.
	// io/docs/concepts/configuration/manage-resources-containers/.
	Limits OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesLimits `json:"limits"`
	// Requests describes the minimum amount of compute resources required. If Requests is omitted for a
	// container, it defaults to Limits if that is explicitly specified, otherwise to an
	// implementation-defined value. More info: https://kubernetes.
	// io/docs/concepts/configuration/manage-resources-containers/.
	Requests OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesRequests `json:"requests"`
}

// GetClaims returns the value of Claims.
func (s *DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResources) GetClaims() []DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesClaimsItem {
	return s.Claims
}

// GetLimits returns the value of Limits.
func (s *DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResources) GetLimits() OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesLimits {
	return s.Limits
}

// GetRequests returns the value of Requests.
func (s *DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResources) GetRequests() OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesRequests {
	return s.Requests
}

// SetClaims sets the value of Claims.
func (s *DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResources) SetClaims(val []DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesClaimsItem) {
	s.Claims = val
}

// SetLimits sets the value of Limits.
func (s *DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResources) SetLimits(val OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesLimits) {
	s.Limits = val
}

// SetRequests sets the value of Requests.
func (s *DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResources) SetRequests(val OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesRequests) {
	s.Requests = val
}

// ResourceClaim references one entry in PodSpec.ResourceClaims.
type DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesClaimsItem struct {
	// Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is
	// used. It makes that resource available inside a container.
	Name string `json:"name"`
}

// GetName returns the value of Name.
func (s *DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesClaimsItem) GetName() string {
	return s.Name
}

// SetName sets the value of Name.
func (s *DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesClaimsItem) SetName(val string) {
	s.Name = val
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.
// io/docs/concepts/configuration/manage-resources-containers/.
type DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesLimits map[string]DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesLimitsItem

func (s *DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesLimits) init() DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesLimits {
	m := *s
	if m == nil {
		m = map[string]DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesLimitsItem{}
		*s = m
	}
	return m
}

// DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesLimitsItem represents sum type.
type DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesLimitsItem struct {
	Type   DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesLimitsItemType // switch on this field
	Int    int
	String string
}

// DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesLimitsItemType is oneOf type of DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesLimitsItem.
type DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesLimitsItemType string

// Possible values for DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesLimitsItemType.
const (
	IntDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesLimitsItem    DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesLimitsItemType = "int"
	StringDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesLimitsItem DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesLimitsItemType = "string"
)

// IsInt reports whether DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesLimitsItem is int.
func (s DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesLimitsItem) IsInt() bool {
	return s.Type == IntDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesLimitsItem
}

// IsString reports whether DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesLimitsItem is string.
func (s DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesLimitsItem) IsString() bool {
	return s.Type == StringDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesLimitsItem
}

// SetInt sets DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesLimitsItem to int.
func (s *DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesLimitsItem) SetInt(v int) {
	s.Type = IntDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesLimitsItem
	s.Int = v
}

// GetInt returns int and true boolean if DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesLimitsItem is int.
func (s DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesLimitsItem) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesLimitsItem returns new DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesLimitsItem from int.
func NewIntDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesLimitsItem(v int) DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesLimitsItem {
	var s DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesLimitsItem
	s.SetInt(v)
	return s
}

// SetString sets DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesLimitsItem to string.
func (s *DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesLimitsItem) SetString(v string) {
	s.Type = StringDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesLimitsItem
	s.String = v
}

// GetString returns string and true boolean if DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesLimitsItem is string.
func (s DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesLimitsItem) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesLimitsItem returns new DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesLimitsItem from string.
func NewStringDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesLimitsItem(v string) DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesLimitsItem {
	var s DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesLimitsItem
	s.SetString(v)
	return s
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a
// container, it defaults to Limits if that is explicitly specified, otherwise to an
// implementation-defined value. More info: https://kubernetes.
// io/docs/concepts/configuration/manage-resources-containers/.
type DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesRequests map[string]DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesRequestsItem

func (s *DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesRequests) init() DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesRequests {
	m := *s
	if m == nil {
		m = map[string]DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesRequestsItem{}
		*s = m
	}
	return m
}

// DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesRequestsItem represents sum type.
type DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesRequestsItem struct {
	Type   DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesRequestsItemType // switch on this field
	Int    int
	String string
}

// DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesRequestsItemType is oneOf type of DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesRequestsItem.
type DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesRequestsItemType string

// Possible values for DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesRequestsItemType.
const (
	IntDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesRequestsItem    DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesRequestsItemType = "int"
	StringDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesRequestsItem DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesRequestsItemType = "string"
)

// IsInt reports whether DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesRequestsItem is int.
func (s DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesRequestsItem) IsInt() bool {
	return s.Type == IntDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesRequestsItem
}

// IsString reports whether DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesRequestsItem is string.
func (s DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesRequestsItem) IsString() bool {
	return s.Type == StringDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesRequestsItem
}

// SetInt sets DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesRequestsItem to int.
func (s *DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesRequestsItem) SetInt(v int) {
	s.Type = IntDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesRequestsItem
	s.Int = v
}

// GetInt returns int and true boolean if DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesRequestsItem is int.
func (s DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesRequestsItem) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesRequestsItem returns new DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesRequestsItem from int.
func NewIntDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesRequestsItem(v int) DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesRequestsItem {
	var s DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesRequestsItem
	s.SetInt(v)
	return s
}

// SetString sets DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesRequestsItem to string.
func (s *DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesRequestsItem) SetString(v string) {
	s.Type = StringDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesRequestsItem
	s.String = v
}

// GetString returns string and true boolean if DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesRequestsItem is string.
func (s DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesRequestsItem) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesRequestsItem returns new DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesRequestsItem from string.
func NewStringDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesRequestsItem(v string) DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesRequestsItem {
	var s DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesRequestsItem
	s.SetString(v)
	return s
}

// Selector is a label query over volumes to consider for binding.
type DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimSelector struct {
	// MatchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimSelectorMatchExpressionsItem `json:"matchExpressions"`
	// MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is
	// equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and
	// the values array contains only "value". The requirements are ANDed.
	MatchLabels OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimSelectorMatchLabels `json:"matchLabels"`
}

// GetMatchExpressions returns the value of MatchExpressions.
func (s *DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimSelector) GetMatchExpressions() []DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimSelectorMatchExpressionsItem {
	return s.MatchExpressions
}

// GetMatchLabels returns the value of MatchLabels.
func (s *DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimSelector) GetMatchLabels() OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimSelectorMatchLabels {
	return s.MatchLabels
}

// SetMatchExpressions sets the value of MatchExpressions.
func (s *DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimSelector) SetMatchExpressions(val []DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimSelectorMatchExpressionsItem) {
	s.MatchExpressions = val
}

// SetMatchLabels sets the value of MatchLabels.
func (s *DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimSelector) SetMatchLabels(val OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimSelectorMatchLabels) {
	s.MatchLabels = val
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimSelectorMatchExpressionsItem struct {
	// Key is the label key that the selector applies to.
	Key string `json:"key"`
	// Operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists
	// and DoesNotExist.
	Operator string `json:"operator"`
	// Values is an array of string values. If the operator is In or NotIn, the values array must be
	// non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array
	// is replaced during a strategic merge patch.
	Values []string `json:"values"`
}

// GetKey returns the value of Key.
func (s *DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimSelectorMatchExpressionsItem) GetKey() string {
	return s.Key
}

// GetOperator returns the value of Operator.
func (s *DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimSelectorMatchExpressionsItem) GetOperator() string {
	return s.Operator
}

// GetValues returns the value of Values.
func (s *DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimSelectorMatchExpressionsItem) GetValues() []string {
	return s.Values
}

// SetKey sets the value of Key.
func (s *DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimSelectorMatchExpressionsItem) SetKey(val string) {
	s.Key = val
}

// SetOperator sets the value of Operator.
func (s *DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimSelectorMatchExpressionsItem) SetOperator(val string) {
	s.Operator = val
}

// SetValues sets the value of Values.
func (s *DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimSelectorMatchExpressionsItem) SetValues(val []string) {
	s.Values = val
}

// MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is
// equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and
// the values array contains only "value". The requirements are ANDed.
type DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimSelectorMatchLabels map[string]string

func (s *DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimSelectorMatchLabels) init() DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimSelectorMatchLabels {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// DBInstance represents resource requests for a database cluster.
type DatabaseClusterSpecDbInstance struct {
	CPU              OptDatabaseClusterSpecDbInstanceCPU      `json:"cpu"`
	DiskSize         OptDatabaseClusterSpecDbInstanceDiskSize `json:"diskSize"`
	Memory           OptDatabaseClusterSpecDbInstanceMemory   `json:"memory"`
	StorageClassName OptString                                `json:"storageClassName"`
}

// GetCPU returns the value of CPU.
func (s *DatabaseClusterSpecDbInstance) GetCPU() OptDatabaseClusterSpecDbInstanceCPU {
	return s.CPU
}

// GetDiskSize returns the value of DiskSize.
func (s *DatabaseClusterSpecDbInstance) GetDiskSize() OptDatabaseClusterSpecDbInstanceDiskSize {
	return s.DiskSize
}

// GetMemory returns the value of Memory.
func (s *DatabaseClusterSpecDbInstance) GetMemory() OptDatabaseClusterSpecDbInstanceMemory {
	return s.Memory
}

// GetStorageClassName returns the value of StorageClassName.
func (s *DatabaseClusterSpecDbInstance) GetStorageClassName() OptString {
	return s.StorageClassName
}

// SetCPU sets the value of CPU.
func (s *DatabaseClusterSpecDbInstance) SetCPU(val OptDatabaseClusterSpecDbInstanceCPU) {
	s.CPU = val
}

// SetDiskSize sets the value of DiskSize.
func (s *DatabaseClusterSpecDbInstance) SetDiskSize(val OptDatabaseClusterSpecDbInstanceDiskSize) {
	s.DiskSize = val
}

// SetMemory sets the value of Memory.
func (s *DatabaseClusterSpecDbInstance) SetMemory(val OptDatabaseClusterSpecDbInstanceMemory) {
	s.Memory = val
}

// SetStorageClassName sets the value of StorageClassName.
func (s *DatabaseClusterSpecDbInstance) SetStorageClassName(val OptString) {
	s.StorageClassName = val
}

// DatabaseClusterSpecDbInstanceCPU represents sum type.
type DatabaseClusterSpecDbInstanceCPU struct {
	Type   DatabaseClusterSpecDbInstanceCPUType // switch on this field
	Int    int
	String string
}

// DatabaseClusterSpecDbInstanceCPUType is oneOf type of DatabaseClusterSpecDbInstanceCPU.
type DatabaseClusterSpecDbInstanceCPUType string

// Possible values for DatabaseClusterSpecDbInstanceCPUType.
const (
	IntDatabaseClusterSpecDbInstanceCPU    DatabaseClusterSpecDbInstanceCPUType = "int"
	StringDatabaseClusterSpecDbInstanceCPU DatabaseClusterSpecDbInstanceCPUType = "string"
)

// IsInt reports whether DatabaseClusterSpecDbInstanceCPU is int.
func (s DatabaseClusterSpecDbInstanceCPU) IsInt() bool {
	return s.Type == IntDatabaseClusterSpecDbInstanceCPU
}

// IsString reports whether DatabaseClusterSpecDbInstanceCPU is string.
func (s DatabaseClusterSpecDbInstanceCPU) IsString() bool {
	return s.Type == StringDatabaseClusterSpecDbInstanceCPU
}

// SetInt sets DatabaseClusterSpecDbInstanceCPU to int.
func (s *DatabaseClusterSpecDbInstanceCPU) SetInt(v int) {
	s.Type = IntDatabaseClusterSpecDbInstanceCPU
	s.Int = v
}

// GetInt returns int and true boolean if DatabaseClusterSpecDbInstanceCPU is int.
func (s DatabaseClusterSpecDbInstanceCPU) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntDatabaseClusterSpecDbInstanceCPU returns new DatabaseClusterSpecDbInstanceCPU from int.
func NewIntDatabaseClusterSpecDbInstanceCPU(v int) DatabaseClusterSpecDbInstanceCPU {
	var s DatabaseClusterSpecDbInstanceCPU
	s.SetInt(v)
	return s
}

// SetString sets DatabaseClusterSpecDbInstanceCPU to string.
func (s *DatabaseClusterSpecDbInstanceCPU) SetString(v string) {
	s.Type = StringDatabaseClusterSpecDbInstanceCPU
	s.String = v
}

// GetString returns string and true boolean if DatabaseClusterSpecDbInstanceCPU is string.
func (s DatabaseClusterSpecDbInstanceCPU) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringDatabaseClusterSpecDbInstanceCPU returns new DatabaseClusterSpecDbInstanceCPU from string.
func NewStringDatabaseClusterSpecDbInstanceCPU(v string) DatabaseClusterSpecDbInstanceCPU {
	var s DatabaseClusterSpecDbInstanceCPU
	s.SetString(v)
	return s
}

// DatabaseClusterSpecDbInstanceDiskSize represents sum type.
type DatabaseClusterSpecDbInstanceDiskSize struct {
	Type   DatabaseClusterSpecDbInstanceDiskSizeType // switch on this field
	Int    int
	String string
}

// DatabaseClusterSpecDbInstanceDiskSizeType is oneOf type of DatabaseClusterSpecDbInstanceDiskSize.
type DatabaseClusterSpecDbInstanceDiskSizeType string

// Possible values for DatabaseClusterSpecDbInstanceDiskSizeType.
const (
	IntDatabaseClusterSpecDbInstanceDiskSize    DatabaseClusterSpecDbInstanceDiskSizeType = "int"
	StringDatabaseClusterSpecDbInstanceDiskSize DatabaseClusterSpecDbInstanceDiskSizeType = "string"
)

// IsInt reports whether DatabaseClusterSpecDbInstanceDiskSize is int.
func (s DatabaseClusterSpecDbInstanceDiskSize) IsInt() bool {
	return s.Type == IntDatabaseClusterSpecDbInstanceDiskSize
}

// IsString reports whether DatabaseClusterSpecDbInstanceDiskSize is string.
func (s DatabaseClusterSpecDbInstanceDiskSize) IsString() bool {
	return s.Type == StringDatabaseClusterSpecDbInstanceDiskSize
}

// SetInt sets DatabaseClusterSpecDbInstanceDiskSize to int.
func (s *DatabaseClusterSpecDbInstanceDiskSize) SetInt(v int) {
	s.Type = IntDatabaseClusterSpecDbInstanceDiskSize
	s.Int = v
}

// GetInt returns int and true boolean if DatabaseClusterSpecDbInstanceDiskSize is int.
func (s DatabaseClusterSpecDbInstanceDiskSize) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntDatabaseClusterSpecDbInstanceDiskSize returns new DatabaseClusterSpecDbInstanceDiskSize from int.
func NewIntDatabaseClusterSpecDbInstanceDiskSize(v int) DatabaseClusterSpecDbInstanceDiskSize {
	var s DatabaseClusterSpecDbInstanceDiskSize
	s.SetInt(v)
	return s
}

// SetString sets DatabaseClusterSpecDbInstanceDiskSize to string.
func (s *DatabaseClusterSpecDbInstanceDiskSize) SetString(v string) {
	s.Type = StringDatabaseClusterSpecDbInstanceDiskSize
	s.String = v
}

// GetString returns string and true boolean if DatabaseClusterSpecDbInstanceDiskSize is string.
func (s DatabaseClusterSpecDbInstanceDiskSize) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringDatabaseClusterSpecDbInstanceDiskSize returns new DatabaseClusterSpecDbInstanceDiskSize from string.
func NewStringDatabaseClusterSpecDbInstanceDiskSize(v string) DatabaseClusterSpecDbInstanceDiskSize {
	var s DatabaseClusterSpecDbInstanceDiskSize
	s.SetString(v)
	return s
}

// DatabaseClusterSpecDbInstanceMemory represents sum type.
type DatabaseClusterSpecDbInstanceMemory struct {
	Type   DatabaseClusterSpecDbInstanceMemoryType // switch on this field
	Int    int
	String string
}

// DatabaseClusterSpecDbInstanceMemoryType is oneOf type of DatabaseClusterSpecDbInstanceMemory.
type DatabaseClusterSpecDbInstanceMemoryType string

// Possible values for DatabaseClusterSpecDbInstanceMemoryType.
const (
	IntDatabaseClusterSpecDbInstanceMemory    DatabaseClusterSpecDbInstanceMemoryType = "int"
	StringDatabaseClusterSpecDbInstanceMemory DatabaseClusterSpecDbInstanceMemoryType = "string"
)

// IsInt reports whether DatabaseClusterSpecDbInstanceMemory is int.
func (s DatabaseClusterSpecDbInstanceMemory) IsInt() bool {
	return s.Type == IntDatabaseClusterSpecDbInstanceMemory
}

// IsString reports whether DatabaseClusterSpecDbInstanceMemory is string.
func (s DatabaseClusterSpecDbInstanceMemory) IsString() bool {
	return s.Type == StringDatabaseClusterSpecDbInstanceMemory
}

// SetInt sets DatabaseClusterSpecDbInstanceMemory to int.
func (s *DatabaseClusterSpecDbInstanceMemory) SetInt(v int) {
	s.Type = IntDatabaseClusterSpecDbInstanceMemory
	s.Int = v
}

// GetInt returns int and true boolean if DatabaseClusterSpecDbInstanceMemory is int.
func (s DatabaseClusterSpecDbInstanceMemory) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntDatabaseClusterSpecDbInstanceMemory returns new DatabaseClusterSpecDbInstanceMemory from int.
func NewIntDatabaseClusterSpecDbInstanceMemory(v int) DatabaseClusterSpecDbInstanceMemory {
	var s DatabaseClusterSpecDbInstanceMemory
	s.SetInt(v)
	return s
}

// SetString sets DatabaseClusterSpecDbInstanceMemory to string.
func (s *DatabaseClusterSpecDbInstanceMemory) SetString(v string) {
	s.Type = StringDatabaseClusterSpecDbInstanceMemory
	s.String = v
}

// GetString returns string and true boolean if DatabaseClusterSpecDbInstanceMemory is string.
func (s DatabaseClusterSpecDbInstanceMemory) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringDatabaseClusterSpecDbInstanceMemory returns new DatabaseClusterSpecDbInstanceMemory from string.
func NewStringDatabaseClusterSpecDbInstanceMemory(v string) DatabaseClusterSpecDbInstanceMemory {
	var s DatabaseClusterSpecDbInstanceMemory
	s.SetString(v)
	return s
}

// LoadBalancer contains a load balancer settings. For PXC it's haproxy or proxysql. For PSMDB it's
// mongos.
type DatabaseClusterSpecLoadBalancer struct {
	Annotations   OptDatabaseClusterSpecLoadBalancerAnnotations `json:"annotations"`
	Configuration OptString                                     `json:"configuration"`
	// Service Type string describes ingress methods for a service.
	ExposeType               OptString `json:"exposeType"`
	Image                    OptString `json:"image"`
	LoadBalancerSourceRanges []string  `json:"loadBalancerSourceRanges"`
	// ResourceRequirements describes the compute resource requirements.
	Resources OptDatabaseClusterSpecLoadBalancerResources `json:"resources"`
	Size      OptInt32                                    `json:"size"`
	// ServiceExternalTrafficPolicyType describes how nodes distribute service traffic they receive on
	// one of the Service's "externally-facing" addresses (NodePorts, ExternalIPs, and LoadBalancer IPs).
	TrafficPolicy OptString `json:"trafficPolicy"`
	// LoadBalancerType contains supported loadbalancers. It can be proxysql or haproxy for PXC clusters,
	// mongos for PSMDB clusters or pgbouncer for Postgresql clusters.
	Type OptString `json:"type"`
}

// GetAnnotations returns the value of Annotations.
func (s *DatabaseClusterSpecLoadBalancer) GetAnnotations() OptDatabaseClusterSpecLoadBalancerAnnotations {
	return s.Annotations
}

// GetConfiguration returns the value of Configuration.
func (s *DatabaseClusterSpecLoadBalancer) GetConfiguration() OptString {
	return s.Configuration
}

// GetExposeType returns the value of ExposeType.
func (s *DatabaseClusterSpecLoadBalancer) GetExposeType() OptString {
	return s.ExposeType
}

// GetImage returns the value of Image.
func (s *DatabaseClusterSpecLoadBalancer) GetImage() OptString {
	return s.Image
}

// GetLoadBalancerSourceRanges returns the value of LoadBalancerSourceRanges.
func (s *DatabaseClusterSpecLoadBalancer) GetLoadBalancerSourceRanges() []string {
	return s.LoadBalancerSourceRanges
}

// GetResources returns the value of Resources.
func (s *DatabaseClusterSpecLoadBalancer) GetResources() OptDatabaseClusterSpecLoadBalancerResources {
	return s.Resources
}

// GetSize returns the value of Size.
func (s *DatabaseClusterSpecLoadBalancer) GetSize() OptInt32 {
	return s.Size
}

// GetTrafficPolicy returns the value of TrafficPolicy.
func (s *DatabaseClusterSpecLoadBalancer) GetTrafficPolicy() OptString {
	return s.TrafficPolicy
}

// GetType returns the value of Type.
func (s *DatabaseClusterSpecLoadBalancer) GetType() OptString {
	return s.Type
}

// SetAnnotations sets the value of Annotations.
func (s *DatabaseClusterSpecLoadBalancer) SetAnnotations(val OptDatabaseClusterSpecLoadBalancerAnnotations) {
	s.Annotations = val
}

// SetConfiguration sets the value of Configuration.
func (s *DatabaseClusterSpecLoadBalancer) SetConfiguration(val OptString) {
	s.Configuration = val
}

// SetExposeType sets the value of ExposeType.
func (s *DatabaseClusterSpecLoadBalancer) SetExposeType(val OptString) {
	s.ExposeType = val
}

// SetImage sets the value of Image.
func (s *DatabaseClusterSpecLoadBalancer) SetImage(val OptString) {
	s.Image = val
}

// SetLoadBalancerSourceRanges sets the value of LoadBalancerSourceRanges.
func (s *DatabaseClusterSpecLoadBalancer) SetLoadBalancerSourceRanges(val []string) {
	s.LoadBalancerSourceRanges = val
}

// SetResources sets the value of Resources.
func (s *DatabaseClusterSpecLoadBalancer) SetResources(val OptDatabaseClusterSpecLoadBalancerResources) {
	s.Resources = val
}

// SetSize sets the value of Size.
func (s *DatabaseClusterSpecLoadBalancer) SetSize(val OptInt32) {
	s.Size = val
}

// SetTrafficPolicy sets the value of TrafficPolicy.
func (s *DatabaseClusterSpecLoadBalancer) SetTrafficPolicy(val OptString) {
	s.TrafficPolicy = val
}

// SetType sets the value of Type.
func (s *DatabaseClusterSpecLoadBalancer) SetType(val OptString) {
	s.Type = val
}

type DatabaseClusterSpecLoadBalancerAnnotations map[string]string

func (s *DatabaseClusterSpecLoadBalancerAnnotations) init() DatabaseClusterSpecLoadBalancerAnnotations {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// ResourceRequirements describes the compute resource requirements.
type DatabaseClusterSpecLoadBalancerResources struct {
	// Claims lists the names of resources, defined in spec.resourceClaims, that are used by this
	// container.
	// This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
	// This field is immutable. It can only be set for containers.
	Claims []DatabaseClusterSpecLoadBalancerResourcesClaimsItem `json:"claims"`
	// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.
	// io/docs/concepts/configuration/manage-resources-containers/.
	Limits OptDatabaseClusterSpecLoadBalancerResourcesLimits `json:"limits"`
	// Requests describes the minimum amount of compute resources required. If Requests is omitted for a
	// container, it defaults to Limits if that is explicitly specified, otherwise to an
	// implementation-defined value. More info: https://kubernetes.
	// io/docs/concepts/configuration/manage-resources-containers/.
	Requests OptDatabaseClusterSpecLoadBalancerResourcesRequests `json:"requests"`
}

// GetClaims returns the value of Claims.
func (s *DatabaseClusterSpecLoadBalancerResources) GetClaims() []DatabaseClusterSpecLoadBalancerResourcesClaimsItem {
	return s.Claims
}

// GetLimits returns the value of Limits.
func (s *DatabaseClusterSpecLoadBalancerResources) GetLimits() OptDatabaseClusterSpecLoadBalancerResourcesLimits {
	return s.Limits
}

// GetRequests returns the value of Requests.
func (s *DatabaseClusterSpecLoadBalancerResources) GetRequests() OptDatabaseClusterSpecLoadBalancerResourcesRequests {
	return s.Requests
}

// SetClaims sets the value of Claims.
func (s *DatabaseClusterSpecLoadBalancerResources) SetClaims(val []DatabaseClusterSpecLoadBalancerResourcesClaimsItem) {
	s.Claims = val
}

// SetLimits sets the value of Limits.
func (s *DatabaseClusterSpecLoadBalancerResources) SetLimits(val OptDatabaseClusterSpecLoadBalancerResourcesLimits) {
	s.Limits = val
}

// SetRequests sets the value of Requests.
func (s *DatabaseClusterSpecLoadBalancerResources) SetRequests(val OptDatabaseClusterSpecLoadBalancerResourcesRequests) {
	s.Requests = val
}

// ResourceClaim references one entry in PodSpec.ResourceClaims.
type DatabaseClusterSpecLoadBalancerResourcesClaimsItem struct {
	// Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is
	// used. It makes that resource available inside a container.
	Name string `json:"name"`
}

// GetName returns the value of Name.
func (s *DatabaseClusterSpecLoadBalancerResourcesClaimsItem) GetName() string {
	return s.Name
}

// SetName sets the value of Name.
func (s *DatabaseClusterSpecLoadBalancerResourcesClaimsItem) SetName(val string) {
	s.Name = val
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.
// io/docs/concepts/configuration/manage-resources-containers/.
type DatabaseClusterSpecLoadBalancerResourcesLimits map[string]DatabaseClusterSpecLoadBalancerResourcesLimitsItem

func (s *DatabaseClusterSpecLoadBalancerResourcesLimits) init() DatabaseClusterSpecLoadBalancerResourcesLimits {
	m := *s
	if m == nil {
		m = map[string]DatabaseClusterSpecLoadBalancerResourcesLimitsItem{}
		*s = m
	}
	return m
}

// DatabaseClusterSpecLoadBalancerResourcesLimitsItem represents sum type.
type DatabaseClusterSpecLoadBalancerResourcesLimitsItem struct {
	Type   DatabaseClusterSpecLoadBalancerResourcesLimitsItemType // switch on this field
	Int    int
	String string
}

// DatabaseClusterSpecLoadBalancerResourcesLimitsItemType is oneOf type of DatabaseClusterSpecLoadBalancerResourcesLimitsItem.
type DatabaseClusterSpecLoadBalancerResourcesLimitsItemType string

// Possible values for DatabaseClusterSpecLoadBalancerResourcesLimitsItemType.
const (
	IntDatabaseClusterSpecLoadBalancerResourcesLimitsItem    DatabaseClusterSpecLoadBalancerResourcesLimitsItemType = "int"
	StringDatabaseClusterSpecLoadBalancerResourcesLimitsItem DatabaseClusterSpecLoadBalancerResourcesLimitsItemType = "string"
)

// IsInt reports whether DatabaseClusterSpecLoadBalancerResourcesLimitsItem is int.
func (s DatabaseClusterSpecLoadBalancerResourcesLimitsItem) IsInt() bool {
	return s.Type == IntDatabaseClusterSpecLoadBalancerResourcesLimitsItem
}

// IsString reports whether DatabaseClusterSpecLoadBalancerResourcesLimitsItem is string.
func (s DatabaseClusterSpecLoadBalancerResourcesLimitsItem) IsString() bool {
	return s.Type == StringDatabaseClusterSpecLoadBalancerResourcesLimitsItem
}

// SetInt sets DatabaseClusterSpecLoadBalancerResourcesLimitsItem to int.
func (s *DatabaseClusterSpecLoadBalancerResourcesLimitsItem) SetInt(v int) {
	s.Type = IntDatabaseClusterSpecLoadBalancerResourcesLimitsItem
	s.Int = v
}

// GetInt returns int and true boolean if DatabaseClusterSpecLoadBalancerResourcesLimitsItem is int.
func (s DatabaseClusterSpecLoadBalancerResourcesLimitsItem) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntDatabaseClusterSpecLoadBalancerResourcesLimitsItem returns new DatabaseClusterSpecLoadBalancerResourcesLimitsItem from int.
func NewIntDatabaseClusterSpecLoadBalancerResourcesLimitsItem(v int) DatabaseClusterSpecLoadBalancerResourcesLimitsItem {
	var s DatabaseClusterSpecLoadBalancerResourcesLimitsItem
	s.SetInt(v)
	return s
}

// SetString sets DatabaseClusterSpecLoadBalancerResourcesLimitsItem to string.
func (s *DatabaseClusterSpecLoadBalancerResourcesLimitsItem) SetString(v string) {
	s.Type = StringDatabaseClusterSpecLoadBalancerResourcesLimitsItem
	s.String = v
}

// GetString returns string and true boolean if DatabaseClusterSpecLoadBalancerResourcesLimitsItem is string.
func (s DatabaseClusterSpecLoadBalancerResourcesLimitsItem) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringDatabaseClusterSpecLoadBalancerResourcesLimitsItem returns new DatabaseClusterSpecLoadBalancerResourcesLimitsItem from string.
func NewStringDatabaseClusterSpecLoadBalancerResourcesLimitsItem(v string) DatabaseClusterSpecLoadBalancerResourcesLimitsItem {
	var s DatabaseClusterSpecLoadBalancerResourcesLimitsItem
	s.SetString(v)
	return s
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a
// container, it defaults to Limits if that is explicitly specified, otherwise to an
// implementation-defined value. More info: https://kubernetes.
// io/docs/concepts/configuration/manage-resources-containers/.
type DatabaseClusterSpecLoadBalancerResourcesRequests map[string]DatabaseClusterSpecLoadBalancerResourcesRequestsItem

func (s *DatabaseClusterSpecLoadBalancerResourcesRequests) init() DatabaseClusterSpecLoadBalancerResourcesRequests {
	m := *s
	if m == nil {
		m = map[string]DatabaseClusterSpecLoadBalancerResourcesRequestsItem{}
		*s = m
	}
	return m
}

// DatabaseClusterSpecLoadBalancerResourcesRequestsItem represents sum type.
type DatabaseClusterSpecLoadBalancerResourcesRequestsItem struct {
	Type   DatabaseClusterSpecLoadBalancerResourcesRequestsItemType // switch on this field
	Int    int
	String string
}

// DatabaseClusterSpecLoadBalancerResourcesRequestsItemType is oneOf type of DatabaseClusterSpecLoadBalancerResourcesRequestsItem.
type DatabaseClusterSpecLoadBalancerResourcesRequestsItemType string

// Possible values for DatabaseClusterSpecLoadBalancerResourcesRequestsItemType.
const (
	IntDatabaseClusterSpecLoadBalancerResourcesRequestsItem    DatabaseClusterSpecLoadBalancerResourcesRequestsItemType = "int"
	StringDatabaseClusterSpecLoadBalancerResourcesRequestsItem DatabaseClusterSpecLoadBalancerResourcesRequestsItemType = "string"
)

// IsInt reports whether DatabaseClusterSpecLoadBalancerResourcesRequestsItem is int.
func (s DatabaseClusterSpecLoadBalancerResourcesRequestsItem) IsInt() bool {
	return s.Type == IntDatabaseClusterSpecLoadBalancerResourcesRequestsItem
}

// IsString reports whether DatabaseClusterSpecLoadBalancerResourcesRequestsItem is string.
func (s DatabaseClusterSpecLoadBalancerResourcesRequestsItem) IsString() bool {
	return s.Type == StringDatabaseClusterSpecLoadBalancerResourcesRequestsItem
}

// SetInt sets DatabaseClusterSpecLoadBalancerResourcesRequestsItem to int.
func (s *DatabaseClusterSpecLoadBalancerResourcesRequestsItem) SetInt(v int) {
	s.Type = IntDatabaseClusterSpecLoadBalancerResourcesRequestsItem
	s.Int = v
}

// GetInt returns int and true boolean if DatabaseClusterSpecLoadBalancerResourcesRequestsItem is int.
func (s DatabaseClusterSpecLoadBalancerResourcesRequestsItem) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntDatabaseClusterSpecLoadBalancerResourcesRequestsItem returns new DatabaseClusterSpecLoadBalancerResourcesRequestsItem from int.
func NewIntDatabaseClusterSpecLoadBalancerResourcesRequestsItem(v int) DatabaseClusterSpecLoadBalancerResourcesRequestsItem {
	var s DatabaseClusterSpecLoadBalancerResourcesRequestsItem
	s.SetInt(v)
	return s
}

// SetString sets DatabaseClusterSpecLoadBalancerResourcesRequestsItem to string.
func (s *DatabaseClusterSpecLoadBalancerResourcesRequestsItem) SetString(v string) {
	s.Type = StringDatabaseClusterSpecLoadBalancerResourcesRequestsItem
	s.String = v
}

// GetString returns string and true boolean if DatabaseClusterSpecLoadBalancerResourcesRequestsItem is string.
func (s DatabaseClusterSpecLoadBalancerResourcesRequestsItem) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringDatabaseClusterSpecLoadBalancerResourcesRequestsItem returns new DatabaseClusterSpecLoadBalancerResourcesRequestsItem from string.
func NewStringDatabaseClusterSpecLoadBalancerResourcesRequestsItem(v string) DatabaseClusterSpecLoadBalancerResourcesRequestsItem {
	var s DatabaseClusterSpecLoadBalancerResourcesRequestsItem
	s.SetString(v)
	return s
}

// Monitoring contains a monitoring settings.
type DatabaseClusterSpecMonitoring struct {
	// SecurityContext holds security configuration that will be applied to a container. Some fields are
	// present in both SecurityContext and PodSecurityContext.  When both are set, the values in
	// SecurityContext take precedence.
	ContainerSecurityContext OptDatabaseClusterSpecMonitoringContainerSecurityContext `json:"containerSecurityContext"`
	// PullPolicy describes a policy for if/when to pull a container image.
	ImagePullPolicy OptString `json:"imagePullPolicy"`
	// PMMSpec contains PMM settings.
	Pmm OptDatabaseClusterSpecMonitoringPmm `json:"pmm"`
	// ResourceRequirements describes the compute resource requirements.
	Resources        OptDatabaseClusterSpecMonitoringResources `json:"resources"`
	RuntimeClassName OptString                                 `json:"runtimeClassName"`
}

// GetContainerSecurityContext returns the value of ContainerSecurityContext.
func (s *DatabaseClusterSpecMonitoring) GetContainerSecurityContext() OptDatabaseClusterSpecMonitoringContainerSecurityContext {
	return s.ContainerSecurityContext
}

// GetImagePullPolicy returns the value of ImagePullPolicy.
func (s *DatabaseClusterSpecMonitoring) GetImagePullPolicy() OptString {
	return s.ImagePullPolicy
}

// GetPmm returns the value of Pmm.
func (s *DatabaseClusterSpecMonitoring) GetPmm() OptDatabaseClusterSpecMonitoringPmm {
	return s.Pmm
}

// GetResources returns the value of Resources.
func (s *DatabaseClusterSpecMonitoring) GetResources() OptDatabaseClusterSpecMonitoringResources {
	return s.Resources
}

// GetRuntimeClassName returns the value of RuntimeClassName.
func (s *DatabaseClusterSpecMonitoring) GetRuntimeClassName() OptString {
	return s.RuntimeClassName
}

// SetContainerSecurityContext sets the value of ContainerSecurityContext.
func (s *DatabaseClusterSpecMonitoring) SetContainerSecurityContext(val OptDatabaseClusterSpecMonitoringContainerSecurityContext) {
	s.ContainerSecurityContext = val
}

// SetImagePullPolicy sets the value of ImagePullPolicy.
func (s *DatabaseClusterSpecMonitoring) SetImagePullPolicy(val OptString) {
	s.ImagePullPolicy = val
}

// SetPmm sets the value of Pmm.
func (s *DatabaseClusterSpecMonitoring) SetPmm(val OptDatabaseClusterSpecMonitoringPmm) {
	s.Pmm = val
}

// SetResources sets the value of Resources.
func (s *DatabaseClusterSpecMonitoring) SetResources(val OptDatabaseClusterSpecMonitoringResources) {
	s.Resources = val
}

// SetRuntimeClassName sets the value of RuntimeClassName.
func (s *DatabaseClusterSpecMonitoring) SetRuntimeClassName(val OptString) {
	s.RuntimeClassName = val
}

// SecurityContext holds security configuration that will be applied to a container. Some fields are
// present in both SecurityContext and PodSecurityContext.  When both are set, the values in
// SecurityContext take precedence.
type DatabaseClusterSpecMonitoringContainerSecurityContext struct {
	// AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent
	// process. This bool directly controls if the no_new_privs flag will be set on the container process.
	//  AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has
	// CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
	AllowPrivilegeEscalation OptBool `json:"allowPrivilegeEscalation"`
	// The capabilities to add/drop when running containers. Defaults to the default set of capabilities
	// granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
	Capabilities OptDatabaseClusterSpecMonitoringContainerSecurityContextCapabilities `json:"capabilities"`
	// Run container in privileged mode. Processes in privileged containers are essentially equivalent to
	// root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is
	// windows.
	Privileged OptBool `json:"privileged"`
	// ProcMount denotes the type of proc mount to use for the containers. The default is
	// DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths.
	// This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set
	// when spec.os.name is windows.
	ProcMount OptString `json:"procMount"`
	// Whether this container has a read-only root filesystem. Default is false. Note that this field
	// cannot be set when spec.os.name is windows.
	ReadOnlyRootFilesystem OptBool `json:"readOnlyRootFilesystem"`
	// The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be
	// set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value
	// specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.
	// name is windows.
	RunAsGroup OptInt64 `json:"runAsGroup"`
	// Indicates that the container must run as a non-root user. If true, the Kubelet will validate the
	// image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if
	// it does. If unset or false, no such validation will be performed. May also be set in
	// PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in
	// SecurityContext takes precedence.
	RunAsNonRoot OptBool `json:"runAsNonRoot"`
	// The UID to run the entrypoint of the container process. Defaults to user specified in image
	// metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext
	// and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this
	// field cannot be set when spec.os.name is windows.
	RunAsUser OptInt64 `json:"runAsUser"`
	// The SELinux context to be applied to the container. If unspecified, the container runtime will
	// allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If
	// set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes
	// precedence. Note that this field cannot be set when spec.os.name is windows.
	SeLinuxOptions OptDatabaseClusterSpecMonitoringContainerSecurityContextSeLinuxOptions `json:"seLinuxOptions"`
	// The seccomp options to use by this container. If seccomp options are provided at both the pod &
	// container level, the container options override the pod options. Note that this field cannot be
	// set when spec.os.name is windows.
	SeccompProfile OptDatabaseClusterSpecMonitoringContainerSecurityContextSeccompProfile `json:"seccompProfile"`
	// The Windows specific settings applied to all containers. If unspecified, the options from the
	// PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value
	// specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.
	// name is linux.
	WindowsOptions OptDatabaseClusterSpecMonitoringContainerSecurityContextWindowsOptions `json:"windowsOptions"`
}

// GetAllowPrivilegeEscalation returns the value of AllowPrivilegeEscalation.
func (s *DatabaseClusterSpecMonitoringContainerSecurityContext) GetAllowPrivilegeEscalation() OptBool {
	return s.AllowPrivilegeEscalation
}

// GetCapabilities returns the value of Capabilities.
func (s *DatabaseClusterSpecMonitoringContainerSecurityContext) GetCapabilities() OptDatabaseClusterSpecMonitoringContainerSecurityContextCapabilities {
	return s.Capabilities
}

// GetPrivileged returns the value of Privileged.
func (s *DatabaseClusterSpecMonitoringContainerSecurityContext) GetPrivileged() OptBool {
	return s.Privileged
}

// GetProcMount returns the value of ProcMount.
func (s *DatabaseClusterSpecMonitoringContainerSecurityContext) GetProcMount() OptString {
	return s.ProcMount
}

// GetReadOnlyRootFilesystem returns the value of ReadOnlyRootFilesystem.
func (s *DatabaseClusterSpecMonitoringContainerSecurityContext) GetReadOnlyRootFilesystem() OptBool {
	return s.ReadOnlyRootFilesystem
}

// GetRunAsGroup returns the value of RunAsGroup.
func (s *DatabaseClusterSpecMonitoringContainerSecurityContext) GetRunAsGroup() OptInt64 {
	return s.RunAsGroup
}

// GetRunAsNonRoot returns the value of RunAsNonRoot.
func (s *DatabaseClusterSpecMonitoringContainerSecurityContext) GetRunAsNonRoot() OptBool {
	return s.RunAsNonRoot
}

// GetRunAsUser returns the value of RunAsUser.
func (s *DatabaseClusterSpecMonitoringContainerSecurityContext) GetRunAsUser() OptInt64 {
	return s.RunAsUser
}

// GetSeLinuxOptions returns the value of SeLinuxOptions.
func (s *DatabaseClusterSpecMonitoringContainerSecurityContext) GetSeLinuxOptions() OptDatabaseClusterSpecMonitoringContainerSecurityContextSeLinuxOptions {
	return s.SeLinuxOptions
}

// GetSeccompProfile returns the value of SeccompProfile.
func (s *DatabaseClusterSpecMonitoringContainerSecurityContext) GetSeccompProfile() OptDatabaseClusterSpecMonitoringContainerSecurityContextSeccompProfile {
	return s.SeccompProfile
}

// GetWindowsOptions returns the value of WindowsOptions.
func (s *DatabaseClusterSpecMonitoringContainerSecurityContext) GetWindowsOptions() OptDatabaseClusterSpecMonitoringContainerSecurityContextWindowsOptions {
	return s.WindowsOptions
}

// SetAllowPrivilegeEscalation sets the value of AllowPrivilegeEscalation.
func (s *DatabaseClusterSpecMonitoringContainerSecurityContext) SetAllowPrivilegeEscalation(val OptBool) {
	s.AllowPrivilegeEscalation = val
}

// SetCapabilities sets the value of Capabilities.
func (s *DatabaseClusterSpecMonitoringContainerSecurityContext) SetCapabilities(val OptDatabaseClusterSpecMonitoringContainerSecurityContextCapabilities) {
	s.Capabilities = val
}

// SetPrivileged sets the value of Privileged.
func (s *DatabaseClusterSpecMonitoringContainerSecurityContext) SetPrivileged(val OptBool) {
	s.Privileged = val
}

// SetProcMount sets the value of ProcMount.
func (s *DatabaseClusterSpecMonitoringContainerSecurityContext) SetProcMount(val OptString) {
	s.ProcMount = val
}

// SetReadOnlyRootFilesystem sets the value of ReadOnlyRootFilesystem.
func (s *DatabaseClusterSpecMonitoringContainerSecurityContext) SetReadOnlyRootFilesystem(val OptBool) {
	s.ReadOnlyRootFilesystem = val
}

// SetRunAsGroup sets the value of RunAsGroup.
func (s *DatabaseClusterSpecMonitoringContainerSecurityContext) SetRunAsGroup(val OptInt64) {
	s.RunAsGroup = val
}

// SetRunAsNonRoot sets the value of RunAsNonRoot.
func (s *DatabaseClusterSpecMonitoringContainerSecurityContext) SetRunAsNonRoot(val OptBool) {
	s.RunAsNonRoot = val
}

// SetRunAsUser sets the value of RunAsUser.
func (s *DatabaseClusterSpecMonitoringContainerSecurityContext) SetRunAsUser(val OptInt64) {
	s.RunAsUser = val
}

// SetSeLinuxOptions sets the value of SeLinuxOptions.
func (s *DatabaseClusterSpecMonitoringContainerSecurityContext) SetSeLinuxOptions(val OptDatabaseClusterSpecMonitoringContainerSecurityContextSeLinuxOptions) {
	s.SeLinuxOptions = val
}

// SetSeccompProfile sets the value of SeccompProfile.
func (s *DatabaseClusterSpecMonitoringContainerSecurityContext) SetSeccompProfile(val OptDatabaseClusterSpecMonitoringContainerSecurityContextSeccompProfile) {
	s.SeccompProfile = val
}

// SetWindowsOptions sets the value of WindowsOptions.
func (s *DatabaseClusterSpecMonitoringContainerSecurityContext) SetWindowsOptions(val OptDatabaseClusterSpecMonitoringContainerSecurityContextWindowsOptions) {
	s.WindowsOptions = val
}

// The capabilities to add/drop when running containers. Defaults to the default set of capabilities
// granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
type DatabaseClusterSpecMonitoringContainerSecurityContextCapabilities struct {
	// Added capabilities.
	Add []string `json:"add"`
	// Removed capabilities.
	Drop []string `json:"drop"`
}

// GetAdd returns the value of Add.
func (s *DatabaseClusterSpecMonitoringContainerSecurityContextCapabilities) GetAdd() []string {
	return s.Add
}

// GetDrop returns the value of Drop.
func (s *DatabaseClusterSpecMonitoringContainerSecurityContextCapabilities) GetDrop() []string {
	return s.Drop
}

// SetAdd sets the value of Add.
func (s *DatabaseClusterSpecMonitoringContainerSecurityContextCapabilities) SetAdd(val []string) {
	s.Add = val
}

// SetDrop sets the value of Drop.
func (s *DatabaseClusterSpecMonitoringContainerSecurityContextCapabilities) SetDrop(val []string) {
	s.Drop = val
}

// The SELinux context to be applied to the container. If unspecified, the container runtime will
// allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If
// set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes
// precedence. Note that this field cannot be set when spec.os.name is windows.
type DatabaseClusterSpecMonitoringContainerSecurityContextSeLinuxOptions struct {
	// Level is SELinux level label that applies to the container.
	Level OptString `json:"level"`
	// Role is a SELinux role label that applies to the container.
	Role OptString `json:"role"`
	// Type is a SELinux type label that applies to the container.
	Type OptString `json:"type"`
	// User is a SELinux user label that applies to the container.
	User OptString `json:"user"`
}

// GetLevel returns the value of Level.
func (s *DatabaseClusterSpecMonitoringContainerSecurityContextSeLinuxOptions) GetLevel() OptString {
	return s.Level
}

// GetRole returns the value of Role.
func (s *DatabaseClusterSpecMonitoringContainerSecurityContextSeLinuxOptions) GetRole() OptString {
	return s.Role
}

// GetType returns the value of Type.
func (s *DatabaseClusterSpecMonitoringContainerSecurityContextSeLinuxOptions) GetType() OptString {
	return s.Type
}

// GetUser returns the value of User.
func (s *DatabaseClusterSpecMonitoringContainerSecurityContextSeLinuxOptions) GetUser() OptString {
	return s.User
}

// SetLevel sets the value of Level.
func (s *DatabaseClusterSpecMonitoringContainerSecurityContextSeLinuxOptions) SetLevel(val OptString) {
	s.Level = val
}

// SetRole sets the value of Role.
func (s *DatabaseClusterSpecMonitoringContainerSecurityContextSeLinuxOptions) SetRole(val OptString) {
	s.Role = val
}

// SetType sets the value of Type.
func (s *DatabaseClusterSpecMonitoringContainerSecurityContextSeLinuxOptions) SetType(val OptString) {
	s.Type = val
}

// SetUser sets the value of User.
func (s *DatabaseClusterSpecMonitoringContainerSecurityContextSeLinuxOptions) SetUser(val OptString) {
	s.User = val
}

// The seccomp options to use by this container. If seccomp options are provided at both the pod &
// container level, the container options override the pod options. Note that this field cannot be
// set when spec.os.name is windows.
type DatabaseClusterSpecMonitoringContainerSecurityContextSeccompProfile struct {
	// LocalhostProfile indicates a profile defined in a file on the node should be used. The profile
	// must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's
	// configured seccomp profile location. Must only be set if type is "Localhost".
	LocalhostProfile OptString `json:"localhostProfile"`
	// Type indicates which kind of seccomp profile will be applied. Valid options are:
	// Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container
	// runtime default profile should be used. Unconfined - no profile should be applied.
	Type string `json:"type"`
}

// GetLocalhostProfile returns the value of LocalhostProfile.
func (s *DatabaseClusterSpecMonitoringContainerSecurityContextSeccompProfile) GetLocalhostProfile() OptString {
	return s.LocalhostProfile
}

// GetType returns the value of Type.
func (s *DatabaseClusterSpecMonitoringContainerSecurityContextSeccompProfile) GetType() string {
	return s.Type
}

// SetLocalhostProfile sets the value of LocalhostProfile.
func (s *DatabaseClusterSpecMonitoringContainerSecurityContextSeccompProfile) SetLocalhostProfile(val OptString) {
	s.LocalhostProfile = val
}

// SetType sets the value of Type.
func (s *DatabaseClusterSpecMonitoringContainerSecurityContextSeccompProfile) SetType(val string) {
	s.Type = val
}

// The Windows specific settings applied to all containers. If unspecified, the options from the
// PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value
// specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.
// name is linux.
type DatabaseClusterSpecMonitoringContainerSecurityContextWindowsOptions struct {
	// GMSACredentialSpec is where the GMSA admission webhook (https://github.
	// com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the
	// GMSACredentialSpecName field.
	GmsaCredentialSpec OptString `json:"gmsaCredentialSpec"`
	// GMSACredentialSpecName is the name of the GMSA credential spec to use.
	GmsaCredentialSpecName OptString `json:"gmsaCredentialSpecName"`
	// HostProcess determines if a container should be run as a 'Host Process' container. This field is
	// alpha-level and will only be honored by components that enable the WindowsHostProcessContainers
	// feature flag. Setting this field without the feature flag will result in errors when validating
	// the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not
	// allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if
	// HostProcess is true then HostNetwork must also be set to true.
	HostProcess OptBool `json:"hostProcess"`
	// The UserName in Windows to run the entrypoint of the container process. Defaults to the user
	// specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both
	// SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
	RunAsUserName OptString `json:"runAsUserName"`
}

// GetGmsaCredentialSpec returns the value of GmsaCredentialSpec.
func (s *DatabaseClusterSpecMonitoringContainerSecurityContextWindowsOptions) GetGmsaCredentialSpec() OptString {
	return s.GmsaCredentialSpec
}

// GetGmsaCredentialSpecName returns the value of GmsaCredentialSpecName.
func (s *DatabaseClusterSpecMonitoringContainerSecurityContextWindowsOptions) GetGmsaCredentialSpecName() OptString {
	return s.GmsaCredentialSpecName
}

// GetHostProcess returns the value of HostProcess.
func (s *DatabaseClusterSpecMonitoringContainerSecurityContextWindowsOptions) GetHostProcess() OptBool {
	return s.HostProcess
}

// GetRunAsUserName returns the value of RunAsUserName.
func (s *DatabaseClusterSpecMonitoringContainerSecurityContextWindowsOptions) GetRunAsUserName() OptString {
	return s.RunAsUserName
}

// SetGmsaCredentialSpec sets the value of GmsaCredentialSpec.
func (s *DatabaseClusterSpecMonitoringContainerSecurityContextWindowsOptions) SetGmsaCredentialSpec(val OptString) {
	s.GmsaCredentialSpec = val
}

// SetGmsaCredentialSpecName sets the value of GmsaCredentialSpecName.
func (s *DatabaseClusterSpecMonitoringContainerSecurityContextWindowsOptions) SetGmsaCredentialSpecName(val OptString) {
	s.GmsaCredentialSpecName = val
}

// SetHostProcess sets the value of HostProcess.
func (s *DatabaseClusterSpecMonitoringContainerSecurityContextWindowsOptions) SetHostProcess(val OptBool) {
	s.HostProcess = val
}

// SetRunAsUserName sets the value of RunAsUserName.
func (s *DatabaseClusterSpecMonitoringContainerSecurityContextWindowsOptions) SetRunAsUserName(val OptString) {
	s.RunAsUserName = val
}

// PMMSpec contains PMM settings.
type DatabaseClusterSpecMonitoringPmm struct {
	Image         OptString `json:"image"`
	Login         OptString `json:"login"`
	Password      OptString `json:"password"`
	PublicAddress OptString `json:"publicAddress"`
	ServerHost    OptString `json:"serverHost"`
	ServerUser    OptString `json:"serverUser"`
}

// GetImage returns the value of Image.
func (s *DatabaseClusterSpecMonitoringPmm) GetImage() OptString {
	return s.Image
}

// GetLogin returns the value of Login.
func (s *DatabaseClusterSpecMonitoringPmm) GetLogin() OptString {
	return s.Login
}

// GetPassword returns the value of Password.
func (s *DatabaseClusterSpecMonitoringPmm) GetPassword() OptString {
	return s.Password
}

// GetPublicAddress returns the value of PublicAddress.
func (s *DatabaseClusterSpecMonitoringPmm) GetPublicAddress() OptString {
	return s.PublicAddress
}

// GetServerHost returns the value of ServerHost.
func (s *DatabaseClusterSpecMonitoringPmm) GetServerHost() OptString {
	return s.ServerHost
}

// GetServerUser returns the value of ServerUser.
func (s *DatabaseClusterSpecMonitoringPmm) GetServerUser() OptString {
	return s.ServerUser
}

// SetImage sets the value of Image.
func (s *DatabaseClusterSpecMonitoringPmm) SetImage(val OptString) {
	s.Image = val
}

// SetLogin sets the value of Login.
func (s *DatabaseClusterSpecMonitoringPmm) SetLogin(val OptString) {
	s.Login = val
}

// SetPassword sets the value of Password.
func (s *DatabaseClusterSpecMonitoringPmm) SetPassword(val OptString) {
	s.Password = val
}

// SetPublicAddress sets the value of PublicAddress.
func (s *DatabaseClusterSpecMonitoringPmm) SetPublicAddress(val OptString) {
	s.PublicAddress = val
}

// SetServerHost sets the value of ServerHost.
func (s *DatabaseClusterSpecMonitoringPmm) SetServerHost(val OptString) {
	s.ServerHost = val
}

// SetServerUser sets the value of ServerUser.
func (s *DatabaseClusterSpecMonitoringPmm) SetServerUser(val OptString) {
	s.ServerUser = val
}

// ResourceRequirements describes the compute resource requirements.
type DatabaseClusterSpecMonitoringResources struct {
	// Claims lists the names of resources, defined in spec.resourceClaims, that are used by this
	// container.
	// This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
	// This field is immutable. It can only be set for containers.
	Claims []DatabaseClusterSpecMonitoringResourcesClaimsItem `json:"claims"`
	// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.
	// io/docs/concepts/configuration/manage-resources-containers/.
	Limits OptDatabaseClusterSpecMonitoringResourcesLimits `json:"limits"`
	// Requests describes the minimum amount of compute resources required. If Requests is omitted for a
	// container, it defaults to Limits if that is explicitly specified, otherwise to an
	// implementation-defined value. More info: https://kubernetes.
	// io/docs/concepts/configuration/manage-resources-containers/.
	Requests OptDatabaseClusterSpecMonitoringResourcesRequests `json:"requests"`
}

// GetClaims returns the value of Claims.
func (s *DatabaseClusterSpecMonitoringResources) GetClaims() []DatabaseClusterSpecMonitoringResourcesClaimsItem {
	return s.Claims
}

// GetLimits returns the value of Limits.
func (s *DatabaseClusterSpecMonitoringResources) GetLimits() OptDatabaseClusterSpecMonitoringResourcesLimits {
	return s.Limits
}

// GetRequests returns the value of Requests.
func (s *DatabaseClusterSpecMonitoringResources) GetRequests() OptDatabaseClusterSpecMonitoringResourcesRequests {
	return s.Requests
}

// SetClaims sets the value of Claims.
func (s *DatabaseClusterSpecMonitoringResources) SetClaims(val []DatabaseClusterSpecMonitoringResourcesClaimsItem) {
	s.Claims = val
}

// SetLimits sets the value of Limits.
func (s *DatabaseClusterSpecMonitoringResources) SetLimits(val OptDatabaseClusterSpecMonitoringResourcesLimits) {
	s.Limits = val
}

// SetRequests sets the value of Requests.
func (s *DatabaseClusterSpecMonitoringResources) SetRequests(val OptDatabaseClusterSpecMonitoringResourcesRequests) {
	s.Requests = val
}

// ResourceClaim references one entry in PodSpec.ResourceClaims.
type DatabaseClusterSpecMonitoringResourcesClaimsItem struct {
	// Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is
	// used. It makes that resource available inside a container.
	Name string `json:"name"`
}

// GetName returns the value of Name.
func (s *DatabaseClusterSpecMonitoringResourcesClaimsItem) GetName() string {
	return s.Name
}

// SetName sets the value of Name.
func (s *DatabaseClusterSpecMonitoringResourcesClaimsItem) SetName(val string) {
	s.Name = val
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.
// io/docs/concepts/configuration/manage-resources-containers/.
type DatabaseClusterSpecMonitoringResourcesLimits map[string]DatabaseClusterSpecMonitoringResourcesLimitsItem

func (s *DatabaseClusterSpecMonitoringResourcesLimits) init() DatabaseClusterSpecMonitoringResourcesLimits {
	m := *s
	if m == nil {
		m = map[string]DatabaseClusterSpecMonitoringResourcesLimitsItem{}
		*s = m
	}
	return m
}

// DatabaseClusterSpecMonitoringResourcesLimitsItem represents sum type.
type DatabaseClusterSpecMonitoringResourcesLimitsItem struct {
	Type   DatabaseClusterSpecMonitoringResourcesLimitsItemType // switch on this field
	Int    int
	String string
}

// DatabaseClusterSpecMonitoringResourcesLimitsItemType is oneOf type of DatabaseClusterSpecMonitoringResourcesLimitsItem.
type DatabaseClusterSpecMonitoringResourcesLimitsItemType string

// Possible values for DatabaseClusterSpecMonitoringResourcesLimitsItemType.
const (
	IntDatabaseClusterSpecMonitoringResourcesLimitsItem    DatabaseClusterSpecMonitoringResourcesLimitsItemType = "int"
	StringDatabaseClusterSpecMonitoringResourcesLimitsItem DatabaseClusterSpecMonitoringResourcesLimitsItemType = "string"
)

// IsInt reports whether DatabaseClusterSpecMonitoringResourcesLimitsItem is int.
func (s DatabaseClusterSpecMonitoringResourcesLimitsItem) IsInt() bool {
	return s.Type == IntDatabaseClusterSpecMonitoringResourcesLimitsItem
}

// IsString reports whether DatabaseClusterSpecMonitoringResourcesLimitsItem is string.
func (s DatabaseClusterSpecMonitoringResourcesLimitsItem) IsString() bool {
	return s.Type == StringDatabaseClusterSpecMonitoringResourcesLimitsItem
}

// SetInt sets DatabaseClusterSpecMonitoringResourcesLimitsItem to int.
func (s *DatabaseClusterSpecMonitoringResourcesLimitsItem) SetInt(v int) {
	s.Type = IntDatabaseClusterSpecMonitoringResourcesLimitsItem
	s.Int = v
}

// GetInt returns int and true boolean if DatabaseClusterSpecMonitoringResourcesLimitsItem is int.
func (s DatabaseClusterSpecMonitoringResourcesLimitsItem) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntDatabaseClusterSpecMonitoringResourcesLimitsItem returns new DatabaseClusterSpecMonitoringResourcesLimitsItem from int.
func NewIntDatabaseClusterSpecMonitoringResourcesLimitsItem(v int) DatabaseClusterSpecMonitoringResourcesLimitsItem {
	var s DatabaseClusterSpecMonitoringResourcesLimitsItem
	s.SetInt(v)
	return s
}

// SetString sets DatabaseClusterSpecMonitoringResourcesLimitsItem to string.
func (s *DatabaseClusterSpecMonitoringResourcesLimitsItem) SetString(v string) {
	s.Type = StringDatabaseClusterSpecMonitoringResourcesLimitsItem
	s.String = v
}

// GetString returns string and true boolean if DatabaseClusterSpecMonitoringResourcesLimitsItem is string.
func (s DatabaseClusterSpecMonitoringResourcesLimitsItem) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringDatabaseClusterSpecMonitoringResourcesLimitsItem returns new DatabaseClusterSpecMonitoringResourcesLimitsItem from string.
func NewStringDatabaseClusterSpecMonitoringResourcesLimitsItem(v string) DatabaseClusterSpecMonitoringResourcesLimitsItem {
	var s DatabaseClusterSpecMonitoringResourcesLimitsItem
	s.SetString(v)
	return s
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a
// container, it defaults to Limits if that is explicitly specified, otherwise to an
// implementation-defined value. More info: https://kubernetes.
// io/docs/concepts/configuration/manage-resources-containers/.
type DatabaseClusterSpecMonitoringResourcesRequests map[string]DatabaseClusterSpecMonitoringResourcesRequestsItem

func (s *DatabaseClusterSpecMonitoringResourcesRequests) init() DatabaseClusterSpecMonitoringResourcesRequests {
	m := *s
	if m == nil {
		m = map[string]DatabaseClusterSpecMonitoringResourcesRequestsItem{}
		*s = m
	}
	return m
}

// DatabaseClusterSpecMonitoringResourcesRequestsItem represents sum type.
type DatabaseClusterSpecMonitoringResourcesRequestsItem struct {
	Type   DatabaseClusterSpecMonitoringResourcesRequestsItemType // switch on this field
	Int    int
	String string
}

// DatabaseClusterSpecMonitoringResourcesRequestsItemType is oneOf type of DatabaseClusterSpecMonitoringResourcesRequestsItem.
type DatabaseClusterSpecMonitoringResourcesRequestsItemType string

// Possible values for DatabaseClusterSpecMonitoringResourcesRequestsItemType.
const (
	IntDatabaseClusterSpecMonitoringResourcesRequestsItem    DatabaseClusterSpecMonitoringResourcesRequestsItemType = "int"
	StringDatabaseClusterSpecMonitoringResourcesRequestsItem DatabaseClusterSpecMonitoringResourcesRequestsItemType = "string"
)

// IsInt reports whether DatabaseClusterSpecMonitoringResourcesRequestsItem is int.
func (s DatabaseClusterSpecMonitoringResourcesRequestsItem) IsInt() bool {
	return s.Type == IntDatabaseClusterSpecMonitoringResourcesRequestsItem
}

// IsString reports whether DatabaseClusterSpecMonitoringResourcesRequestsItem is string.
func (s DatabaseClusterSpecMonitoringResourcesRequestsItem) IsString() bool {
	return s.Type == StringDatabaseClusterSpecMonitoringResourcesRequestsItem
}

// SetInt sets DatabaseClusterSpecMonitoringResourcesRequestsItem to int.
func (s *DatabaseClusterSpecMonitoringResourcesRequestsItem) SetInt(v int) {
	s.Type = IntDatabaseClusterSpecMonitoringResourcesRequestsItem
	s.Int = v
}

// GetInt returns int and true boolean if DatabaseClusterSpecMonitoringResourcesRequestsItem is int.
func (s DatabaseClusterSpecMonitoringResourcesRequestsItem) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntDatabaseClusterSpecMonitoringResourcesRequestsItem returns new DatabaseClusterSpecMonitoringResourcesRequestsItem from int.
func NewIntDatabaseClusterSpecMonitoringResourcesRequestsItem(v int) DatabaseClusterSpecMonitoringResourcesRequestsItem {
	var s DatabaseClusterSpecMonitoringResourcesRequestsItem
	s.SetInt(v)
	return s
}

// SetString sets DatabaseClusterSpecMonitoringResourcesRequestsItem to string.
func (s *DatabaseClusterSpecMonitoringResourcesRequestsItem) SetString(v string) {
	s.Type = StringDatabaseClusterSpecMonitoringResourcesRequestsItem
	s.String = v
}

// GetString returns string and true boolean if DatabaseClusterSpecMonitoringResourcesRequestsItem is string.
func (s DatabaseClusterSpecMonitoringResourcesRequestsItem) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringDatabaseClusterSpecMonitoringResourcesRequestsItem returns new DatabaseClusterSpecMonitoringResourcesRequestsItem from string.
func NewStringDatabaseClusterSpecMonitoringResourcesRequestsItem(v string) DatabaseClusterSpecMonitoringResourcesRequestsItem {
	var s DatabaseClusterSpecMonitoringResourcesRequestsItem
	s.SetString(v)
	return s
}

// DatabaseClusterStatus defines the observed state of Database.
type DatabaseClusterStatus struct {
	Host    OptString `json:"host"`
	Message OptString `json:"message"`
	Ready   OptInt32  `json:"ready"`
	Size    OptInt32  `json:"size"`
	// AppState is used to represent cluster's state.
	Status OptString `json:"status"`
}

// GetHost returns the value of Host.
func (s *DatabaseClusterStatus) GetHost() OptString {
	return s.Host
}

// GetMessage returns the value of Message.
func (s *DatabaseClusterStatus) GetMessage() OptString {
	return s.Message
}

// GetReady returns the value of Ready.
func (s *DatabaseClusterStatus) GetReady() OptInt32 {
	return s.Ready
}

// GetSize returns the value of Size.
func (s *DatabaseClusterStatus) GetSize() OptInt32 {
	return s.Size
}

// GetStatus returns the value of Status.
func (s *DatabaseClusterStatus) GetStatus() OptString {
	return s.Status
}

// SetHost sets the value of Host.
func (s *DatabaseClusterStatus) SetHost(val OptString) {
	s.Host = val
}

// SetMessage sets the value of Message.
func (s *DatabaseClusterStatus) SetMessage(val OptString) {
	s.Message = val
}

// SetReady sets the value of Ready.
func (s *DatabaseClusterStatus) SetReady(val OptInt32) {
	s.Ready = val
}

// SetSize sets the value of Size.
func (s *DatabaseClusterStatus) SetSize(val OptInt32) {
	s.Size = val
}

// SetStatus sets the value of Status.
func (s *DatabaseClusterStatus) SetStatus(val OptString) {
	s.Status = val
}

// Kubernetes object.
// Ref: #/components/schemas/KubernetesCluster
type KubernetesCluster struct {
	Name OptString `json:"name"`
}

// GetName returns the value of Name.
func (s *KubernetesCluster) GetName() OptString {
	return s.Name
}

// SetName sets the value of Name.
func (s *KubernetesCluster) SetName(val OptString) {
	s.Name = val
}

func (*KubernetesCluster) listKubernetesClustersRes() {}
func (*KubernetesCluster) registerKubernetesRes()     {}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatabaseClusterSpec returns new OptDatabaseClusterSpec with value set to v.
func NewOptDatabaseClusterSpec(v DatabaseClusterSpec) OptDatabaseClusterSpec {
	return OptDatabaseClusterSpec{
		Value: v,
		Set:   true,
	}
}

// OptDatabaseClusterSpec is optional DatabaseClusterSpec.
type OptDatabaseClusterSpec struct {
	Value DatabaseClusterSpec
	Set   bool
}

// IsSet returns true if OptDatabaseClusterSpec was set.
func (o OptDatabaseClusterSpec) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDatabaseClusterSpec) Reset() {
	var v DatabaseClusterSpec
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatabaseClusterSpec) SetTo(v DatabaseClusterSpec) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatabaseClusterSpec) Get() (v DatabaseClusterSpec, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatabaseClusterSpec) Or(d DatabaseClusterSpec) DatabaseClusterSpec {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatabaseClusterSpecBackup returns new OptDatabaseClusterSpecBackup with value set to v.
func NewOptDatabaseClusterSpecBackup(v DatabaseClusterSpecBackup) OptDatabaseClusterSpecBackup {
	return OptDatabaseClusterSpecBackup{
		Value: v,
		Set:   true,
	}
}

// OptDatabaseClusterSpecBackup is optional DatabaseClusterSpecBackup.
type OptDatabaseClusterSpecBackup struct {
	Value DatabaseClusterSpecBackup
	Set   bool
}

// IsSet returns true if OptDatabaseClusterSpecBackup was set.
func (o OptDatabaseClusterSpecBackup) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDatabaseClusterSpecBackup) Reset() {
	var v DatabaseClusterSpecBackup
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatabaseClusterSpecBackup) SetTo(v DatabaseClusterSpecBackup) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatabaseClusterSpecBackup) Get() (v DatabaseClusterSpecBackup, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatabaseClusterSpecBackup) Or(d DatabaseClusterSpecBackup) DatabaseClusterSpecBackup {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatabaseClusterSpecBackupAnnotations returns new OptDatabaseClusterSpecBackupAnnotations with value set to v.
func NewOptDatabaseClusterSpecBackupAnnotations(v DatabaseClusterSpecBackupAnnotations) OptDatabaseClusterSpecBackupAnnotations {
	return OptDatabaseClusterSpecBackupAnnotations{
		Value: v,
		Set:   true,
	}
}

// OptDatabaseClusterSpecBackupAnnotations is optional DatabaseClusterSpecBackupAnnotations.
type OptDatabaseClusterSpecBackupAnnotations struct {
	Value DatabaseClusterSpecBackupAnnotations
	Set   bool
}

// IsSet returns true if OptDatabaseClusterSpecBackupAnnotations was set.
func (o OptDatabaseClusterSpecBackupAnnotations) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDatabaseClusterSpecBackupAnnotations) Reset() {
	var v DatabaseClusterSpecBackupAnnotations
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatabaseClusterSpecBackupAnnotations) SetTo(v DatabaseClusterSpecBackupAnnotations) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatabaseClusterSpecBackupAnnotations) Get() (v DatabaseClusterSpecBackupAnnotations, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatabaseClusterSpecBackupAnnotations) Or(d DatabaseClusterSpecBackupAnnotations) DatabaseClusterSpecBackupAnnotations {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatabaseClusterSpecBackupContainerSecurityContext returns new OptDatabaseClusterSpecBackupContainerSecurityContext with value set to v.
func NewOptDatabaseClusterSpecBackupContainerSecurityContext(v DatabaseClusterSpecBackupContainerSecurityContext) OptDatabaseClusterSpecBackupContainerSecurityContext {
	return OptDatabaseClusterSpecBackupContainerSecurityContext{
		Value: v,
		Set:   true,
	}
}

// OptDatabaseClusterSpecBackupContainerSecurityContext is optional DatabaseClusterSpecBackupContainerSecurityContext.
type OptDatabaseClusterSpecBackupContainerSecurityContext struct {
	Value DatabaseClusterSpecBackupContainerSecurityContext
	Set   bool
}

// IsSet returns true if OptDatabaseClusterSpecBackupContainerSecurityContext was set.
func (o OptDatabaseClusterSpecBackupContainerSecurityContext) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDatabaseClusterSpecBackupContainerSecurityContext) Reset() {
	var v DatabaseClusterSpecBackupContainerSecurityContext
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatabaseClusterSpecBackupContainerSecurityContext) SetTo(v DatabaseClusterSpecBackupContainerSecurityContext) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatabaseClusterSpecBackupContainerSecurityContext) Get() (v DatabaseClusterSpecBackupContainerSecurityContext, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatabaseClusterSpecBackupContainerSecurityContext) Or(d DatabaseClusterSpecBackupContainerSecurityContext) DatabaseClusterSpecBackupContainerSecurityContext {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatabaseClusterSpecBackupContainerSecurityContextCapabilities returns new OptDatabaseClusterSpecBackupContainerSecurityContextCapabilities with value set to v.
func NewOptDatabaseClusterSpecBackupContainerSecurityContextCapabilities(v DatabaseClusterSpecBackupContainerSecurityContextCapabilities) OptDatabaseClusterSpecBackupContainerSecurityContextCapabilities {
	return OptDatabaseClusterSpecBackupContainerSecurityContextCapabilities{
		Value: v,
		Set:   true,
	}
}

// OptDatabaseClusterSpecBackupContainerSecurityContextCapabilities is optional DatabaseClusterSpecBackupContainerSecurityContextCapabilities.
type OptDatabaseClusterSpecBackupContainerSecurityContextCapabilities struct {
	Value DatabaseClusterSpecBackupContainerSecurityContextCapabilities
	Set   bool
}

// IsSet returns true if OptDatabaseClusterSpecBackupContainerSecurityContextCapabilities was set.
func (o OptDatabaseClusterSpecBackupContainerSecurityContextCapabilities) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDatabaseClusterSpecBackupContainerSecurityContextCapabilities) Reset() {
	var v DatabaseClusterSpecBackupContainerSecurityContextCapabilities
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatabaseClusterSpecBackupContainerSecurityContextCapabilities) SetTo(v DatabaseClusterSpecBackupContainerSecurityContextCapabilities) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatabaseClusterSpecBackupContainerSecurityContextCapabilities) Get() (v DatabaseClusterSpecBackupContainerSecurityContextCapabilities, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatabaseClusterSpecBackupContainerSecurityContextCapabilities) Or(d DatabaseClusterSpecBackupContainerSecurityContextCapabilities) DatabaseClusterSpecBackupContainerSecurityContextCapabilities {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatabaseClusterSpecBackupContainerSecurityContextSeLinuxOptions returns new OptDatabaseClusterSpecBackupContainerSecurityContextSeLinuxOptions with value set to v.
func NewOptDatabaseClusterSpecBackupContainerSecurityContextSeLinuxOptions(v DatabaseClusterSpecBackupContainerSecurityContextSeLinuxOptions) OptDatabaseClusterSpecBackupContainerSecurityContextSeLinuxOptions {
	return OptDatabaseClusterSpecBackupContainerSecurityContextSeLinuxOptions{
		Value: v,
		Set:   true,
	}
}

// OptDatabaseClusterSpecBackupContainerSecurityContextSeLinuxOptions is optional DatabaseClusterSpecBackupContainerSecurityContextSeLinuxOptions.
type OptDatabaseClusterSpecBackupContainerSecurityContextSeLinuxOptions struct {
	Value DatabaseClusterSpecBackupContainerSecurityContextSeLinuxOptions
	Set   bool
}

// IsSet returns true if OptDatabaseClusterSpecBackupContainerSecurityContextSeLinuxOptions was set.
func (o OptDatabaseClusterSpecBackupContainerSecurityContextSeLinuxOptions) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptDatabaseClusterSpecBackupContainerSecurityContextSeLinuxOptions) Reset() {
	var v DatabaseClusterSpecBackupContainerSecurityContextSeLinuxOptions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatabaseClusterSpecBackupContainerSecurityContextSeLinuxOptions) SetTo(v DatabaseClusterSpecBackupContainerSecurityContextSeLinuxOptions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatabaseClusterSpecBackupContainerSecurityContextSeLinuxOptions) Get() (v DatabaseClusterSpecBackupContainerSecurityContextSeLinuxOptions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatabaseClusterSpecBackupContainerSecurityContextSeLinuxOptions) Or(d DatabaseClusterSpecBackupContainerSecurityContextSeLinuxOptions) DatabaseClusterSpecBackupContainerSecurityContextSeLinuxOptions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatabaseClusterSpecBackupContainerSecurityContextSeccompProfile returns new OptDatabaseClusterSpecBackupContainerSecurityContextSeccompProfile with value set to v.
func NewOptDatabaseClusterSpecBackupContainerSecurityContextSeccompProfile(v DatabaseClusterSpecBackupContainerSecurityContextSeccompProfile) OptDatabaseClusterSpecBackupContainerSecurityContextSeccompProfile {
	return OptDatabaseClusterSpecBackupContainerSecurityContextSeccompProfile{
		Value: v,
		Set:   true,
	}
}

// OptDatabaseClusterSpecBackupContainerSecurityContextSeccompProfile is optional DatabaseClusterSpecBackupContainerSecurityContextSeccompProfile.
type OptDatabaseClusterSpecBackupContainerSecurityContextSeccompProfile struct {
	Value DatabaseClusterSpecBackupContainerSecurityContextSeccompProfile
	Set   bool
}

// IsSet returns true if OptDatabaseClusterSpecBackupContainerSecurityContextSeccompProfile was set.
func (o OptDatabaseClusterSpecBackupContainerSecurityContextSeccompProfile) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptDatabaseClusterSpecBackupContainerSecurityContextSeccompProfile) Reset() {
	var v DatabaseClusterSpecBackupContainerSecurityContextSeccompProfile
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatabaseClusterSpecBackupContainerSecurityContextSeccompProfile) SetTo(v DatabaseClusterSpecBackupContainerSecurityContextSeccompProfile) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatabaseClusterSpecBackupContainerSecurityContextSeccompProfile) Get() (v DatabaseClusterSpecBackupContainerSecurityContextSeccompProfile, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatabaseClusterSpecBackupContainerSecurityContextSeccompProfile) Or(d DatabaseClusterSpecBackupContainerSecurityContextSeccompProfile) DatabaseClusterSpecBackupContainerSecurityContextSeccompProfile {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatabaseClusterSpecBackupContainerSecurityContextWindowsOptions returns new OptDatabaseClusterSpecBackupContainerSecurityContextWindowsOptions with value set to v.
func NewOptDatabaseClusterSpecBackupContainerSecurityContextWindowsOptions(v DatabaseClusterSpecBackupContainerSecurityContextWindowsOptions) OptDatabaseClusterSpecBackupContainerSecurityContextWindowsOptions {
	return OptDatabaseClusterSpecBackupContainerSecurityContextWindowsOptions{
		Value: v,
		Set:   true,
	}
}

// OptDatabaseClusterSpecBackupContainerSecurityContextWindowsOptions is optional DatabaseClusterSpecBackupContainerSecurityContextWindowsOptions.
type OptDatabaseClusterSpecBackupContainerSecurityContextWindowsOptions struct {
	Value DatabaseClusterSpecBackupContainerSecurityContextWindowsOptions
	Set   bool
}

// IsSet returns true if OptDatabaseClusterSpecBackupContainerSecurityContextWindowsOptions was set.
func (o OptDatabaseClusterSpecBackupContainerSecurityContextWindowsOptions) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptDatabaseClusterSpecBackupContainerSecurityContextWindowsOptions) Reset() {
	var v DatabaseClusterSpecBackupContainerSecurityContextWindowsOptions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatabaseClusterSpecBackupContainerSecurityContextWindowsOptions) SetTo(v DatabaseClusterSpecBackupContainerSecurityContextWindowsOptions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatabaseClusterSpecBackupContainerSecurityContextWindowsOptions) Get() (v DatabaseClusterSpecBackupContainerSecurityContextWindowsOptions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatabaseClusterSpecBackupContainerSecurityContextWindowsOptions) Or(d DatabaseClusterSpecBackupContainerSecurityContextWindowsOptions) DatabaseClusterSpecBackupContainerSecurityContextWindowsOptions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatabaseClusterSpecBackupLabels returns new OptDatabaseClusterSpecBackupLabels with value set to v.
func NewOptDatabaseClusterSpecBackupLabels(v DatabaseClusterSpecBackupLabels) OptDatabaseClusterSpecBackupLabels {
	return OptDatabaseClusterSpecBackupLabels{
		Value: v,
		Set:   true,
	}
}

// OptDatabaseClusterSpecBackupLabels is optional DatabaseClusterSpecBackupLabels.
type OptDatabaseClusterSpecBackupLabels struct {
	Value DatabaseClusterSpecBackupLabels
	Set   bool
}

// IsSet returns true if OptDatabaseClusterSpecBackupLabels was set.
func (o OptDatabaseClusterSpecBackupLabels) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDatabaseClusterSpecBackupLabels) Reset() {
	var v DatabaseClusterSpecBackupLabels
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatabaseClusterSpecBackupLabels) SetTo(v DatabaseClusterSpecBackupLabels) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatabaseClusterSpecBackupLabels) Get() (v DatabaseClusterSpecBackupLabels, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatabaseClusterSpecBackupLabels) Or(d DatabaseClusterSpecBackupLabels) DatabaseClusterSpecBackupLabels {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatabaseClusterSpecBackupResources returns new OptDatabaseClusterSpecBackupResources with value set to v.
func NewOptDatabaseClusterSpecBackupResources(v DatabaseClusterSpecBackupResources) OptDatabaseClusterSpecBackupResources {
	return OptDatabaseClusterSpecBackupResources{
		Value: v,
		Set:   true,
	}
}

// OptDatabaseClusterSpecBackupResources is optional DatabaseClusterSpecBackupResources.
type OptDatabaseClusterSpecBackupResources struct {
	Value DatabaseClusterSpecBackupResources
	Set   bool
}

// IsSet returns true if OptDatabaseClusterSpecBackupResources was set.
func (o OptDatabaseClusterSpecBackupResources) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDatabaseClusterSpecBackupResources) Reset() {
	var v DatabaseClusterSpecBackupResources
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatabaseClusterSpecBackupResources) SetTo(v DatabaseClusterSpecBackupResources) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatabaseClusterSpecBackupResources) Get() (v DatabaseClusterSpecBackupResources, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatabaseClusterSpecBackupResources) Or(d DatabaseClusterSpecBackupResources) DatabaseClusterSpecBackupResources {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatabaseClusterSpecBackupResourcesLimits returns new OptDatabaseClusterSpecBackupResourcesLimits with value set to v.
func NewOptDatabaseClusterSpecBackupResourcesLimits(v DatabaseClusterSpecBackupResourcesLimits) OptDatabaseClusterSpecBackupResourcesLimits {
	return OptDatabaseClusterSpecBackupResourcesLimits{
		Value: v,
		Set:   true,
	}
}

// OptDatabaseClusterSpecBackupResourcesLimits is optional DatabaseClusterSpecBackupResourcesLimits.
type OptDatabaseClusterSpecBackupResourcesLimits struct {
	Value DatabaseClusterSpecBackupResourcesLimits
	Set   bool
}

// IsSet returns true if OptDatabaseClusterSpecBackupResourcesLimits was set.
func (o OptDatabaseClusterSpecBackupResourcesLimits) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDatabaseClusterSpecBackupResourcesLimits) Reset() {
	var v DatabaseClusterSpecBackupResourcesLimits
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatabaseClusterSpecBackupResourcesLimits) SetTo(v DatabaseClusterSpecBackupResourcesLimits) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatabaseClusterSpecBackupResourcesLimits) Get() (v DatabaseClusterSpecBackupResourcesLimits, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatabaseClusterSpecBackupResourcesLimits) Or(d DatabaseClusterSpecBackupResourcesLimits) DatabaseClusterSpecBackupResourcesLimits {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatabaseClusterSpecBackupResourcesRequests returns new OptDatabaseClusterSpecBackupResourcesRequests with value set to v.
func NewOptDatabaseClusterSpecBackupResourcesRequests(v DatabaseClusterSpecBackupResourcesRequests) OptDatabaseClusterSpecBackupResourcesRequests {
	return OptDatabaseClusterSpecBackupResourcesRequests{
		Value: v,
		Set:   true,
	}
}

// OptDatabaseClusterSpecBackupResourcesRequests is optional DatabaseClusterSpecBackupResourcesRequests.
type OptDatabaseClusterSpecBackupResourcesRequests struct {
	Value DatabaseClusterSpecBackupResourcesRequests
	Set   bool
}

// IsSet returns true if OptDatabaseClusterSpecBackupResourcesRequests was set.
func (o OptDatabaseClusterSpecBackupResourcesRequests) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDatabaseClusterSpecBackupResourcesRequests) Reset() {
	var v DatabaseClusterSpecBackupResourcesRequests
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatabaseClusterSpecBackupResourcesRequests) SetTo(v DatabaseClusterSpecBackupResourcesRequests) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatabaseClusterSpecBackupResourcesRequests) Get() (v DatabaseClusterSpecBackupResourcesRequests, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatabaseClusterSpecBackupResourcesRequests) Or(d DatabaseClusterSpecBackupResourcesRequests) DatabaseClusterSpecBackupResourcesRequests {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatabaseClusterSpecBackupStorages returns new OptDatabaseClusterSpecBackupStorages with value set to v.
func NewOptDatabaseClusterSpecBackupStorages(v DatabaseClusterSpecBackupStorages) OptDatabaseClusterSpecBackupStorages {
	return OptDatabaseClusterSpecBackupStorages{
		Value: v,
		Set:   true,
	}
}

// OptDatabaseClusterSpecBackupStorages is optional DatabaseClusterSpecBackupStorages.
type OptDatabaseClusterSpecBackupStorages struct {
	Value DatabaseClusterSpecBackupStorages
	Set   bool
}

// IsSet returns true if OptDatabaseClusterSpecBackupStorages was set.
func (o OptDatabaseClusterSpecBackupStorages) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDatabaseClusterSpecBackupStorages) Reset() {
	var v DatabaseClusterSpecBackupStorages
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatabaseClusterSpecBackupStorages) SetTo(v DatabaseClusterSpecBackupStorages) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatabaseClusterSpecBackupStorages) Get() (v DatabaseClusterSpecBackupStorages, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatabaseClusterSpecBackupStorages) Or(d DatabaseClusterSpecBackupStorages) DatabaseClusterSpecBackupStorages {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatabaseClusterSpecBackupStoragesItemAffinity returns new OptDatabaseClusterSpecBackupStoragesItemAffinity with value set to v.
func NewOptDatabaseClusterSpecBackupStoragesItemAffinity(v DatabaseClusterSpecBackupStoragesItemAffinity) OptDatabaseClusterSpecBackupStoragesItemAffinity {
	return OptDatabaseClusterSpecBackupStoragesItemAffinity{
		Value: v,
		Set:   true,
	}
}

// OptDatabaseClusterSpecBackupStoragesItemAffinity is optional DatabaseClusterSpecBackupStoragesItemAffinity.
type OptDatabaseClusterSpecBackupStoragesItemAffinity struct {
	Value DatabaseClusterSpecBackupStoragesItemAffinity
	Set   bool
}

// IsSet returns true if OptDatabaseClusterSpecBackupStoragesItemAffinity was set.
func (o OptDatabaseClusterSpecBackupStoragesItemAffinity) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDatabaseClusterSpecBackupStoragesItemAffinity) Reset() {
	var v DatabaseClusterSpecBackupStoragesItemAffinity
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatabaseClusterSpecBackupStoragesItemAffinity) SetTo(v DatabaseClusterSpecBackupStoragesItemAffinity) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatabaseClusterSpecBackupStoragesItemAffinity) Get() (v DatabaseClusterSpecBackupStoragesItemAffinity, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatabaseClusterSpecBackupStoragesItemAffinity) Or(d DatabaseClusterSpecBackupStoragesItemAffinity) DatabaseClusterSpecBackupStoragesItemAffinity {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatabaseClusterSpecBackupStoragesItemAffinityNodeAffinity returns new OptDatabaseClusterSpecBackupStoragesItemAffinityNodeAffinity with value set to v.
func NewOptDatabaseClusterSpecBackupStoragesItemAffinityNodeAffinity(v DatabaseClusterSpecBackupStoragesItemAffinityNodeAffinity) OptDatabaseClusterSpecBackupStoragesItemAffinityNodeAffinity {
	return OptDatabaseClusterSpecBackupStoragesItemAffinityNodeAffinity{
		Value: v,
		Set:   true,
	}
}

// OptDatabaseClusterSpecBackupStoragesItemAffinityNodeAffinity is optional DatabaseClusterSpecBackupStoragesItemAffinityNodeAffinity.
type OptDatabaseClusterSpecBackupStoragesItemAffinityNodeAffinity struct {
	Value DatabaseClusterSpecBackupStoragesItemAffinityNodeAffinity
	Set   bool
}

// IsSet returns true if OptDatabaseClusterSpecBackupStoragesItemAffinityNodeAffinity was set.
func (o OptDatabaseClusterSpecBackupStoragesItemAffinityNodeAffinity) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDatabaseClusterSpecBackupStoragesItemAffinityNodeAffinity) Reset() {
	var v DatabaseClusterSpecBackupStoragesItemAffinityNodeAffinity
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatabaseClusterSpecBackupStoragesItemAffinityNodeAffinity) SetTo(v DatabaseClusterSpecBackupStoragesItemAffinityNodeAffinity) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatabaseClusterSpecBackupStoragesItemAffinityNodeAffinity) Get() (v DatabaseClusterSpecBackupStoragesItemAffinityNodeAffinity, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatabaseClusterSpecBackupStoragesItemAffinityNodeAffinity) Or(d DatabaseClusterSpecBackupStoragesItemAffinityNodeAffinity) DatabaseClusterSpecBackupStoragesItemAffinityNodeAffinity {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution returns new OptDatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution with value set to v.
func NewOptDatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution(v DatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution) OptDatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
	return OptDatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution{
		Value: v,
		Set:   true,
	}
}

// OptDatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution is optional DatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution.
type OptDatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution struct {
	Value DatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution
	Set   bool
}

// IsSet returns true if OptDatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution was set.
func (o OptDatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptDatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution) Reset() {
	var v DatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution) SetTo(v DatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution) Get() (v DatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution) Or(d DatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution) DatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinity returns new OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinity with value set to v.
func NewOptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinity(v DatabaseClusterSpecBackupStoragesItemAffinityPodAffinity) OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinity {
	return OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinity{
		Value: v,
		Set:   true,
	}
}

// OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinity is optional DatabaseClusterSpecBackupStoragesItemAffinityPodAffinity.
type OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinity struct {
	Value DatabaseClusterSpecBackupStoragesItemAffinityPodAffinity
	Set   bool
}

// IsSet returns true if OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinity was set.
func (o OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinity) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinity) Reset() {
	var v DatabaseClusterSpecBackupStoragesItemAffinityPodAffinity
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinity) SetTo(v DatabaseClusterSpecBackupStoragesItemAffinityPodAffinity) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinity) Get() (v DatabaseClusterSpecBackupStoragesItemAffinityPodAffinity, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinity) Or(d DatabaseClusterSpecBackupStoragesItemAffinityPodAffinity) DatabaseClusterSpecBackupStoragesItemAffinityPodAffinity {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector returns new OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector with value set to v.
func NewOptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector(v DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector) OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector {
	return OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector{
		Value: v,
		Set:   true,
	}
}

// OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector is optional DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector.
type OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector struct {
	Value DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector
	Set   bool
}

// IsSet returns true if OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector was set.
func (o OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector) Reset() {
	var v DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector) SetTo(v DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector) Get() (v DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector) Or(d DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector) DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchLabels returns new OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchLabels with value set to v.
func NewOptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchLabels(v DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchLabels) OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchLabels {
	return OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchLabels{
		Value: v,
		Set:   true,
	}
}

// OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchLabels is optional DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchLabels.
type OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchLabels struct {
	Value DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchLabels
	Set   bool
}

// IsSet returns true if OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchLabels was set.
func (o OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchLabels) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchLabels) Reset() {
	var v DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchLabels
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchLabels) SetTo(v DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchLabels) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchLabels) Get() (v DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchLabels, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchLabels) Or(d DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchLabels) DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchLabels {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelector returns new OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelector with value set to v.
func NewOptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelector(v DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelector) OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelector {
	return OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelector{
		Value: v,
		Set:   true,
	}
}

// OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelector is optional DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelector.
type OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelector struct {
	Value DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelector
	Set   bool
}

// IsSet returns true if OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelector was set.
func (o OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelector) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelector) Reset() {
	var v DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelector
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelector) SetTo(v DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelector) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelector) Get() (v DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelector, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelector) Or(d DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelector) DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelector {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchLabels returns new OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchLabels with value set to v.
func NewOptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchLabels(v DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchLabels) OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchLabels {
	return OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchLabels{
		Value: v,
		Set:   true,
	}
}

// OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchLabels is optional DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchLabels.
type OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchLabels struct {
	Value DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchLabels
	Set   bool
}

// IsSet returns true if OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchLabels was set.
func (o OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchLabels) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchLabels) Reset() {
	var v DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchLabels
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchLabels) SetTo(v DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchLabels) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchLabels) Get() (v DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchLabels, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchLabels) Or(d DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchLabels) DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchLabels {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector returns new OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector with value set to v.
func NewOptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector(v DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector) OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector {
	return OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector{
		Value: v,
		Set:   true,
	}
}

// OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector is optional DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector.
type OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector struct {
	Value DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector
	Set   bool
}

// IsSet returns true if OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector was set.
func (o OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector) Reset() {
	var v DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector) SetTo(v DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector) Get() (v DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector) Or(d DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector) DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchLabels returns new OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchLabels with value set to v.
func NewOptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchLabels(v DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchLabels) OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchLabels {
	return OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchLabels{
		Value: v,
		Set:   true,
	}
}

// OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchLabels is optional DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchLabels.
type OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchLabels struct {
	Value DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchLabels
	Set   bool
}

// IsSet returns true if OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchLabels was set.
func (o OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchLabels) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchLabels) Reset() {
	var v DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchLabels
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchLabels) SetTo(v DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchLabels) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchLabels) Get() (v DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchLabels, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchLabels) Or(d DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchLabels) DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchLabels {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector returns new OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector with value set to v.
func NewOptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector(v DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector) OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector {
	return OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector{
		Value: v,
		Set:   true,
	}
}

// OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector is optional DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector.
type OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector struct {
	Value DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector
	Set   bool
}

// IsSet returns true if OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector was set.
func (o OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector) Reset() {
	var v DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector) SetTo(v DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector) Get() (v DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector) Or(d DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector) DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchLabels returns new OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchLabels with value set to v.
func NewOptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchLabels(v DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchLabels) OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchLabels {
	return OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchLabels{
		Value: v,
		Set:   true,
	}
}

// OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchLabels is optional DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchLabels.
type OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchLabels struct {
	Value DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchLabels
	Set   bool
}

// IsSet returns true if OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchLabels was set.
func (o OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchLabels) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchLabels) Reset() {
	var v DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchLabels
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchLabels) SetTo(v DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchLabels) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchLabels) Get() (v DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchLabels, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchLabels) Or(d DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchLabels) DatabaseClusterSpecBackupStoragesItemAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchLabels {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinity returns new OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinity with value set to v.
func NewOptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinity(v DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinity) OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinity {
	return OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinity{
		Value: v,
		Set:   true,
	}
}

// OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinity is optional DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinity.
type OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinity struct {
	Value DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinity
	Set   bool
}

// IsSet returns true if OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinity was set.
func (o OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinity) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinity) Reset() {
	var v DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinity
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinity) SetTo(v DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinity) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinity) Get() (v DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinity, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinity) Or(d DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinity) DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinity {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector returns new OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector with value set to v.
func NewOptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector(v DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector) OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector {
	return OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector{
		Value: v,
		Set:   true,
	}
}

// OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector is optional DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector.
type OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector struct {
	Value DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector
	Set   bool
}

// IsSet returns true if OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector was set.
func (o OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector) Reset() {
	var v DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector) SetTo(v DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector) Get() (v DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector) Or(d DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector) DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchLabels returns new OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchLabels with value set to v.
func NewOptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchLabels(v DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchLabels) OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchLabels {
	return OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchLabels{
		Value: v,
		Set:   true,
	}
}

// OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchLabels is optional DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchLabels.
type OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchLabels struct {
	Value DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchLabels
	Set   bool
}

// IsSet returns true if OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchLabels was set.
func (o OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchLabels) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchLabels) Reset() {
	var v DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchLabels
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchLabels) SetTo(v DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchLabels) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchLabels) Get() (v DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchLabels, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchLabels) Or(d DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchLabels) DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchLabels {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelector returns new OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelector with value set to v.
func NewOptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelector(v DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelector) OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelector {
	return OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelector{
		Value: v,
		Set:   true,
	}
}

// OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelector is optional DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelector.
type OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelector struct {
	Value DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelector
	Set   bool
}

// IsSet returns true if OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelector was set.
func (o OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelector) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelector) Reset() {
	var v DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelector
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelector) SetTo(v DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelector) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelector) Get() (v DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelector, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelector) Or(d DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelector) DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelector {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchLabels returns new OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchLabels with value set to v.
func NewOptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchLabels(v DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchLabels) OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchLabels {
	return OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchLabels{
		Value: v,
		Set:   true,
	}
}

// OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchLabels is optional DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchLabels.
type OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchLabels struct {
	Value DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchLabels
	Set   bool
}

// IsSet returns true if OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchLabels was set.
func (o OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchLabels) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchLabels) Reset() {
	var v DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchLabels
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchLabels) SetTo(v DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchLabels) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchLabels) Get() (v DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchLabels, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchLabels) Or(d DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchLabels) DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchLabels {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector returns new OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector with value set to v.
func NewOptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector(v DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector) OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector {
	return OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector{
		Value: v,
		Set:   true,
	}
}

// OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector is optional DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector.
type OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector struct {
	Value DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector
	Set   bool
}

// IsSet returns true if OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector was set.
func (o OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector) Reset() {
	var v DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector) SetTo(v DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector) Get() (v DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector) Or(d DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector) DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchLabels returns new OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchLabels with value set to v.
func NewOptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchLabels(v DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchLabels) OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchLabels {
	return OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchLabels{
		Value: v,
		Set:   true,
	}
}

// OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchLabels is optional DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchLabels.
type OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchLabels struct {
	Value DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchLabels
	Set   bool
}

// IsSet returns true if OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchLabels was set.
func (o OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchLabels) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchLabels) Reset() {
	var v DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchLabels
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchLabels) SetTo(v DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchLabels) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchLabels) Get() (v DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchLabels, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchLabels) Or(d DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchLabels) DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchLabels {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector returns new OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector with value set to v.
func NewOptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector(v DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector) OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector {
	return OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector{
		Value: v,
		Set:   true,
	}
}

// OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector is optional DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector.
type OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector struct {
	Value DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector
	Set   bool
}

// IsSet returns true if OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector was set.
func (o OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector) Reset() {
	var v DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector) SetTo(v DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector) Get() (v DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector) Or(d DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector) DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchLabels returns new OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchLabels with value set to v.
func NewOptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchLabels(v DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchLabels) OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchLabels {
	return OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchLabels{
		Value: v,
		Set:   true,
	}
}

// OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchLabels is optional DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchLabels.
type OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchLabels struct {
	Value DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchLabels
	Set   bool
}

// IsSet returns true if OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchLabels was set.
func (o OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchLabels) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchLabels) Reset() {
	var v DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchLabels
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchLabels) SetTo(v DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchLabels) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchLabels) Get() (v DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchLabels, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchLabels) Or(d DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchLabels) DatabaseClusterSpecBackupStoragesItemAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchLabels {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatabaseClusterSpecBackupStoragesItemAnnotations returns new OptDatabaseClusterSpecBackupStoragesItemAnnotations with value set to v.
func NewOptDatabaseClusterSpecBackupStoragesItemAnnotations(v DatabaseClusterSpecBackupStoragesItemAnnotations) OptDatabaseClusterSpecBackupStoragesItemAnnotations {
	return OptDatabaseClusterSpecBackupStoragesItemAnnotations{
		Value: v,
		Set:   true,
	}
}

// OptDatabaseClusterSpecBackupStoragesItemAnnotations is optional DatabaseClusterSpecBackupStoragesItemAnnotations.
type OptDatabaseClusterSpecBackupStoragesItemAnnotations struct {
	Value DatabaseClusterSpecBackupStoragesItemAnnotations
	Set   bool
}

// IsSet returns true if OptDatabaseClusterSpecBackupStoragesItemAnnotations was set.
func (o OptDatabaseClusterSpecBackupStoragesItemAnnotations) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDatabaseClusterSpecBackupStoragesItemAnnotations) Reset() {
	var v DatabaseClusterSpecBackupStoragesItemAnnotations
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatabaseClusterSpecBackupStoragesItemAnnotations) SetTo(v DatabaseClusterSpecBackupStoragesItemAnnotations) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatabaseClusterSpecBackupStoragesItemAnnotations) Get() (v DatabaseClusterSpecBackupStoragesItemAnnotations, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatabaseClusterSpecBackupStoragesItemAnnotations) Or(d DatabaseClusterSpecBackupStoragesItemAnnotations) DatabaseClusterSpecBackupStoragesItemAnnotations {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatabaseClusterSpecBackupStoragesItemContainerSecurityContext returns new OptDatabaseClusterSpecBackupStoragesItemContainerSecurityContext with value set to v.
func NewOptDatabaseClusterSpecBackupStoragesItemContainerSecurityContext(v DatabaseClusterSpecBackupStoragesItemContainerSecurityContext) OptDatabaseClusterSpecBackupStoragesItemContainerSecurityContext {
	return OptDatabaseClusterSpecBackupStoragesItemContainerSecurityContext{
		Value: v,
		Set:   true,
	}
}

// OptDatabaseClusterSpecBackupStoragesItemContainerSecurityContext is optional DatabaseClusterSpecBackupStoragesItemContainerSecurityContext.
type OptDatabaseClusterSpecBackupStoragesItemContainerSecurityContext struct {
	Value DatabaseClusterSpecBackupStoragesItemContainerSecurityContext
	Set   bool
}

// IsSet returns true if OptDatabaseClusterSpecBackupStoragesItemContainerSecurityContext was set.
func (o OptDatabaseClusterSpecBackupStoragesItemContainerSecurityContext) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDatabaseClusterSpecBackupStoragesItemContainerSecurityContext) Reset() {
	var v DatabaseClusterSpecBackupStoragesItemContainerSecurityContext
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatabaseClusterSpecBackupStoragesItemContainerSecurityContext) SetTo(v DatabaseClusterSpecBackupStoragesItemContainerSecurityContext) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatabaseClusterSpecBackupStoragesItemContainerSecurityContext) Get() (v DatabaseClusterSpecBackupStoragesItemContainerSecurityContext, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatabaseClusterSpecBackupStoragesItemContainerSecurityContext) Or(d DatabaseClusterSpecBackupStoragesItemContainerSecurityContext) DatabaseClusterSpecBackupStoragesItemContainerSecurityContext {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatabaseClusterSpecBackupStoragesItemContainerSecurityContextCapabilities returns new OptDatabaseClusterSpecBackupStoragesItemContainerSecurityContextCapabilities with value set to v.
func NewOptDatabaseClusterSpecBackupStoragesItemContainerSecurityContextCapabilities(v DatabaseClusterSpecBackupStoragesItemContainerSecurityContextCapabilities) OptDatabaseClusterSpecBackupStoragesItemContainerSecurityContextCapabilities {
	return OptDatabaseClusterSpecBackupStoragesItemContainerSecurityContextCapabilities{
		Value: v,
		Set:   true,
	}
}

// OptDatabaseClusterSpecBackupStoragesItemContainerSecurityContextCapabilities is optional DatabaseClusterSpecBackupStoragesItemContainerSecurityContextCapabilities.
type OptDatabaseClusterSpecBackupStoragesItemContainerSecurityContextCapabilities struct {
	Value DatabaseClusterSpecBackupStoragesItemContainerSecurityContextCapabilities
	Set   bool
}

// IsSet returns true if OptDatabaseClusterSpecBackupStoragesItemContainerSecurityContextCapabilities was set.
func (o OptDatabaseClusterSpecBackupStoragesItemContainerSecurityContextCapabilities) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptDatabaseClusterSpecBackupStoragesItemContainerSecurityContextCapabilities) Reset() {
	var v DatabaseClusterSpecBackupStoragesItemContainerSecurityContextCapabilities
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatabaseClusterSpecBackupStoragesItemContainerSecurityContextCapabilities) SetTo(v DatabaseClusterSpecBackupStoragesItemContainerSecurityContextCapabilities) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatabaseClusterSpecBackupStoragesItemContainerSecurityContextCapabilities) Get() (v DatabaseClusterSpecBackupStoragesItemContainerSecurityContextCapabilities, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatabaseClusterSpecBackupStoragesItemContainerSecurityContextCapabilities) Or(d DatabaseClusterSpecBackupStoragesItemContainerSecurityContextCapabilities) DatabaseClusterSpecBackupStoragesItemContainerSecurityContextCapabilities {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatabaseClusterSpecBackupStoragesItemContainerSecurityContextSeLinuxOptions returns new OptDatabaseClusterSpecBackupStoragesItemContainerSecurityContextSeLinuxOptions with value set to v.
func NewOptDatabaseClusterSpecBackupStoragesItemContainerSecurityContextSeLinuxOptions(v DatabaseClusterSpecBackupStoragesItemContainerSecurityContextSeLinuxOptions) OptDatabaseClusterSpecBackupStoragesItemContainerSecurityContextSeLinuxOptions {
	return OptDatabaseClusterSpecBackupStoragesItemContainerSecurityContextSeLinuxOptions{
		Value: v,
		Set:   true,
	}
}

// OptDatabaseClusterSpecBackupStoragesItemContainerSecurityContextSeLinuxOptions is optional DatabaseClusterSpecBackupStoragesItemContainerSecurityContextSeLinuxOptions.
type OptDatabaseClusterSpecBackupStoragesItemContainerSecurityContextSeLinuxOptions struct {
	Value DatabaseClusterSpecBackupStoragesItemContainerSecurityContextSeLinuxOptions
	Set   bool
}

// IsSet returns true if OptDatabaseClusterSpecBackupStoragesItemContainerSecurityContextSeLinuxOptions was set.
func (o OptDatabaseClusterSpecBackupStoragesItemContainerSecurityContextSeLinuxOptions) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptDatabaseClusterSpecBackupStoragesItemContainerSecurityContextSeLinuxOptions) Reset() {
	var v DatabaseClusterSpecBackupStoragesItemContainerSecurityContextSeLinuxOptions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatabaseClusterSpecBackupStoragesItemContainerSecurityContextSeLinuxOptions) SetTo(v DatabaseClusterSpecBackupStoragesItemContainerSecurityContextSeLinuxOptions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatabaseClusterSpecBackupStoragesItemContainerSecurityContextSeLinuxOptions) Get() (v DatabaseClusterSpecBackupStoragesItemContainerSecurityContextSeLinuxOptions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatabaseClusterSpecBackupStoragesItemContainerSecurityContextSeLinuxOptions) Or(d DatabaseClusterSpecBackupStoragesItemContainerSecurityContextSeLinuxOptions) DatabaseClusterSpecBackupStoragesItemContainerSecurityContextSeLinuxOptions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatabaseClusterSpecBackupStoragesItemContainerSecurityContextSeccompProfile returns new OptDatabaseClusterSpecBackupStoragesItemContainerSecurityContextSeccompProfile with value set to v.
func NewOptDatabaseClusterSpecBackupStoragesItemContainerSecurityContextSeccompProfile(v DatabaseClusterSpecBackupStoragesItemContainerSecurityContextSeccompProfile) OptDatabaseClusterSpecBackupStoragesItemContainerSecurityContextSeccompProfile {
	return OptDatabaseClusterSpecBackupStoragesItemContainerSecurityContextSeccompProfile{
		Value: v,
		Set:   true,
	}
}

// OptDatabaseClusterSpecBackupStoragesItemContainerSecurityContextSeccompProfile is optional DatabaseClusterSpecBackupStoragesItemContainerSecurityContextSeccompProfile.
type OptDatabaseClusterSpecBackupStoragesItemContainerSecurityContextSeccompProfile struct {
	Value DatabaseClusterSpecBackupStoragesItemContainerSecurityContextSeccompProfile
	Set   bool
}

// IsSet returns true if OptDatabaseClusterSpecBackupStoragesItemContainerSecurityContextSeccompProfile was set.
func (o OptDatabaseClusterSpecBackupStoragesItemContainerSecurityContextSeccompProfile) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptDatabaseClusterSpecBackupStoragesItemContainerSecurityContextSeccompProfile) Reset() {
	var v DatabaseClusterSpecBackupStoragesItemContainerSecurityContextSeccompProfile
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatabaseClusterSpecBackupStoragesItemContainerSecurityContextSeccompProfile) SetTo(v DatabaseClusterSpecBackupStoragesItemContainerSecurityContextSeccompProfile) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatabaseClusterSpecBackupStoragesItemContainerSecurityContextSeccompProfile) Get() (v DatabaseClusterSpecBackupStoragesItemContainerSecurityContextSeccompProfile, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatabaseClusterSpecBackupStoragesItemContainerSecurityContextSeccompProfile) Or(d DatabaseClusterSpecBackupStoragesItemContainerSecurityContextSeccompProfile) DatabaseClusterSpecBackupStoragesItemContainerSecurityContextSeccompProfile {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatabaseClusterSpecBackupStoragesItemContainerSecurityContextWindowsOptions returns new OptDatabaseClusterSpecBackupStoragesItemContainerSecurityContextWindowsOptions with value set to v.
func NewOptDatabaseClusterSpecBackupStoragesItemContainerSecurityContextWindowsOptions(v DatabaseClusterSpecBackupStoragesItemContainerSecurityContextWindowsOptions) OptDatabaseClusterSpecBackupStoragesItemContainerSecurityContextWindowsOptions {
	return OptDatabaseClusterSpecBackupStoragesItemContainerSecurityContextWindowsOptions{
		Value: v,
		Set:   true,
	}
}

// OptDatabaseClusterSpecBackupStoragesItemContainerSecurityContextWindowsOptions is optional DatabaseClusterSpecBackupStoragesItemContainerSecurityContextWindowsOptions.
type OptDatabaseClusterSpecBackupStoragesItemContainerSecurityContextWindowsOptions struct {
	Value DatabaseClusterSpecBackupStoragesItemContainerSecurityContextWindowsOptions
	Set   bool
}

// IsSet returns true if OptDatabaseClusterSpecBackupStoragesItemContainerSecurityContextWindowsOptions was set.
func (o OptDatabaseClusterSpecBackupStoragesItemContainerSecurityContextWindowsOptions) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptDatabaseClusterSpecBackupStoragesItemContainerSecurityContextWindowsOptions) Reset() {
	var v DatabaseClusterSpecBackupStoragesItemContainerSecurityContextWindowsOptions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatabaseClusterSpecBackupStoragesItemContainerSecurityContextWindowsOptions) SetTo(v DatabaseClusterSpecBackupStoragesItemContainerSecurityContextWindowsOptions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatabaseClusterSpecBackupStoragesItemContainerSecurityContextWindowsOptions) Get() (v DatabaseClusterSpecBackupStoragesItemContainerSecurityContextWindowsOptions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatabaseClusterSpecBackupStoragesItemContainerSecurityContextWindowsOptions) Or(d DatabaseClusterSpecBackupStoragesItemContainerSecurityContextWindowsOptions) DatabaseClusterSpecBackupStoragesItemContainerSecurityContextWindowsOptions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatabaseClusterSpecBackupStoragesItemLabels returns new OptDatabaseClusterSpecBackupStoragesItemLabels with value set to v.
func NewOptDatabaseClusterSpecBackupStoragesItemLabels(v DatabaseClusterSpecBackupStoragesItemLabels) OptDatabaseClusterSpecBackupStoragesItemLabels {
	return OptDatabaseClusterSpecBackupStoragesItemLabels{
		Value: v,
		Set:   true,
	}
}

// OptDatabaseClusterSpecBackupStoragesItemLabels is optional DatabaseClusterSpecBackupStoragesItemLabels.
type OptDatabaseClusterSpecBackupStoragesItemLabels struct {
	Value DatabaseClusterSpecBackupStoragesItemLabels
	Set   bool
}

// IsSet returns true if OptDatabaseClusterSpecBackupStoragesItemLabels was set.
func (o OptDatabaseClusterSpecBackupStoragesItemLabels) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDatabaseClusterSpecBackupStoragesItemLabels) Reset() {
	var v DatabaseClusterSpecBackupStoragesItemLabels
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatabaseClusterSpecBackupStoragesItemLabels) SetTo(v DatabaseClusterSpecBackupStoragesItemLabels) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatabaseClusterSpecBackupStoragesItemLabels) Get() (v DatabaseClusterSpecBackupStoragesItemLabels, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatabaseClusterSpecBackupStoragesItemLabels) Or(d DatabaseClusterSpecBackupStoragesItemLabels) DatabaseClusterSpecBackupStoragesItemLabels {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatabaseClusterSpecBackupStoragesItemNodeSelector returns new OptDatabaseClusterSpecBackupStoragesItemNodeSelector with value set to v.
func NewOptDatabaseClusterSpecBackupStoragesItemNodeSelector(v DatabaseClusterSpecBackupStoragesItemNodeSelector) OptDatabaseClusterSpecBackupStoragesItemNodeSelector {
	return OptDatabaseClusterSpecBackupStoragesItemNodeSelector{
		Value: v,
		Set:   true,
	}
}

// OptDatabaseClusterSpecBackupStoragesItemNodeSelector is optional DatabaseClusterSpecBackupStoragesItemNodeSelector.
type OptDatabaseClusterSpecBackupStoragesItemNodeSelector struct {
	Value DatabaseClusterSpecBackupStoragesItemNodeSelector
	Set   bool
}

// IsSet returns true if OptDatabaseClusterSpecBackupStoragesItemNodeSelector was set.
func (o OptDatabaseClusterSpecBackupStoragesItemNodeSelector) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDatabaseClusterSpecBackupStoragesItemNodeSelector) Reset() {
	var v DatabaseClusterSpecBackupStoragesItemNodeSelector
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatabaseClusterSpecBackupStoragesItemNodeSelector) SetTo(v DatabaseClusterSpecBackupStoragesItemNodeSelector) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatabaseClusterSpecBackupStoragesItemNodeSelector) Get() (v DatabaseClusterSpecBackupStoragesItemNodeSelector, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatabaseClusterSpecBackupStoragesItemNodeSelector) Or(d DatabaseClusterSpecBackupStoragesItemNodeSelector) DatabaseClusterSpecBackupStoragesItemNodeSelector {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatabaseClusterSpecBackupStoragesItemPodSecurityContext returns new OptDatabaseClusterSpecBackupStoragesItemPodSecurityContext with value set to v.
func NewOptDatabaseClusterSpecBackupStoragesItemPodSecurityContext(v DatabaseClusterSpecBackupStoragesItemPodSecurityContext) OptDatabaseClusterSpecBackupStoragesItemPodSecurityContext {
	return OptDatabaseClusterSpecBackupStoragesItemPodSecurityContext{
		Value: v,
		Set:   true,
	}
}

// OptDatabaseClusterSpecBackupStoragesItemPodSecurityContext is optional DatabaseClusterSpecBackupStoragesItemPodSecurityContext.
type OptDatabaseClusterSpecBackupStoragesItemPodSecurityContext struct {
	Value DatabaseClusterSpecBackupStoragesItemPodSecurityContext
	Set   bool
}

// IsSet returns true if OptDatabaseClusterSpecBackupStoragesItemPodSecurityContext was set.
func (o OptDatabaseClusterSpecBackupStoragesItemPodSecurityContext) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDatabaseClusterSpecBackupStoragesItemPodSecurityContext) Reset() {
	var v DatabaseClusterSpecBackupStoragesItemPodSecurityContext
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatabaseClusterSpecBackupStoragesItemPodSecurityContext) SetTo(v DatabaseClusterSpecBackupStoragesItemPodSecurityContext) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatabaseClusterSpecBackupStoragesItemPodSecurityContext) Get() (v DatabaseClusterSpecBackupStoragesItemPodSecurityContext, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatabaseClusterSpecBackupStoragesItemPodSecurityContext) Or(d DatabaseClusterSpecBackupStoragesItemPodSecurityContext) DatabaseClusterSpecBackupStoragesItemPodSecurityContext {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatabaseClusterSpecBackupStoragesItemPodSecurityContextSeLinuxOptions returns new OptDatabaseClusterSpecBackupStoragesItemPodSecurityContextSeLinuxOptions with value set to v.
func NewOptDatabaseClusterSpecBackupStoragesItemPodSecurityContextSeLinuxOptions(v DatabaseClusterSpecBackupStoragesItemPodSecurityContextSeLinuxOptions) OptDatabaseClusterSpecBackupStoragesItemPodSecurityContextSeLinuxOptions {
	return OptDatabaseClusterSpecBackupStoragesItemPodSecurityContextSeLinuxOptions{
		Value: v,
		Set:   true,
	}
}

// OptDatabaseClusterSpecBackupStoragesItemPodSecurityContextSeLinuxOptions is optional DatabaseClusterSpecBackupStoragesItemPodSecurityContextSeLinuxOptions.
type OptDatabaseClusterSpecBackupStoragesItemPodSecurityContextSeLinuxOptions struct {
	Value DatabaseClusterSpecBackupStoragesItemPodSecurityContextSeLinuxOptions
	Set   bool
}

// IsSet returns true if OptDatabaseClusterSpecBackupStoragesItemPodSecurityContextSeLinuxOptions was set.
func (o OptDatabaseClusterSpecBackupStoragesItemPodSecurityContextSeLinuxOptions) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptDatabaseClusterSpecBackupStoragesItemPodSecurityContextSeLinuxOptions) Reset() {
	var v DatabaseClusterSpecBackupStoragesItemPodSecurityContextSeLinuxOptions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatabaseClusterSpecBackupStoragesItemPodSecurityContextSeLinuxOptions) SetTo(v DatabaseClusterSpecBackupStoragesItemPodSecurityContextSeLinuxOptions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatabaseClusterSpecBackupStoragesItemPodSecurityContextSeLinuxOptions) Get() (v DatabaseClusterSpecBackupStoragesItemPodSecurityContextSeLinuxOptions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatabaseClusterSpecBackupStoragesItemPodSecurityContextSeLinuxOptions) Or(d DatabaseClusterSpecBackupStoragesItemPodSecurityContextSeLinuxOptions) DatabaseClusterSpecBackupStoragesItemPodSecurityContextSeLinuxOptions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatabaseClusterSpecBackupStoragesItemPodSecurityContextSeccompProfile returns new OptDatabaseClusterSpecBackupStoragesItemPodSecurityContextSeccompProfile with value set to v.
func NewOptDatabaseClusterSpecBackupStoragesItemPodSecurityContextSeccompProfile(v DatabaseClusterSpecBackupStoragesItemPodSecurityContextSeccompProfile) OptDatabaseClusterSpecBackupStoragesItemPodSecurityContextSeccompProfile {
	return OptDatabaseClusterSpecBackupStoragesItemPodSecurityContextSeccompProfile{
		Value: v,
		Set:   true,
	}
}

// OptDatabaseClusterSpecBackupStoragesItemPodSecurityContextSeccompProfile is optional DatabaseClusterSpecBackupStoragesItemPodSecurityContextSeccompProfile.
type OptDatabaseClusterSpecBackupStoragesItemPodSecurityContextSeccompProfile struct {
	Value DatabaseClusterSpecBackupStoragesItemPodSecurityContextSeccompProfile
	Set   bool
}

// IsSet returns true if OptDatabaseClusterSpecBackupStoragesItemPodSecurityContextSeccompProfile was set.
func (o OptDatabaseClusterSpecBackupStoragesItemPodSecurityContextSeccompProfile) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptDatabaseClusterSpecBackupStoragesItemPodSecurityContextSeccompProfile) Reset() {
	var v DatabaseClusterSpecBackupStoragesItemPodSecurityContextSeccompProfile
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatabaseClusterSpecBackupStoragesItemPodSecurityContextSeccompProfile) SetTo(v DatabaseClusterSpecBackupStoragesItemPodSecurityContextSeccompProfile) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatabaseClusterSpecBackupStoragesItemPodSecurityContextSeccompProfile) Get() (v DatabaseClusterSpecBackupStoragesItemPodSecurityContextSeccompProfile, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatabaseClusterSpecBackupStoragesItemPodSecurityContextSeccompProfile) Or(d DatabaseClusterSpecBackupStoragesItemPodSecurityContextSeccompProfile) DatabaseClusterSpecBackupStoragesItemPodSecurityContextSeccompProfile {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatabaseClusterSpecBackupStoragesItemPodSecurityContextWindowsOptions returns new OptDatabaseClusterSpecBackupStoragesItemPodSecurityContextWindowsOptions with value set to v.
func NewOptDatabaseClusterSpecBackupStoragesItemPodSecurityContextWindowsOptions(v DatabaseClusterSpecBackupStoragesItemPodSecurityContextWindowsOptions) OptDatabaseClusterSpecBackupStoragesItemPodSecurityContextWindowsOptions {
	return OptDatabaseClusterSpecBackupStoragesItemPodSecurityContextWindowsOptions{
		Value: v,
		Set:   true,
	}
}

// OptDatabaseClusterSpecBackupStoragesItemPodSecurityContextWindowsOptions is optional DatabaseClusterSpecBackupStoragesItemPodSecurityContextWindowsOptions.
type OptDatabaseClusterSpecBackupStoragesItemPodSecurityContextWindowsOptions struct {
	Value DatabaseClusterSpecBackupStoragesItemPodSecurityContextWindowsOptions
	Set   bool
}

// IsSet returns true if OptDatabaseClusterSpecBackupStoragesItemPodSecurityContextWindowsOptions was set.
func (o OptDatabaseClusterSpecBackupStoragesItemPodSecurityContextWindowsOptions) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptDatabaseClusterSpecBackupStoragesItemPodSecurityContextWindowsOptions) Reset() {
	var v DatabaseClusterSpecBackupStoragesItemPodSecurityContextWindowsOptions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatabaseClusterSpecBackupStoragesItemPodSecurityContextWindowsOptions) SetTo(v DatabaseClusterSpecBackupStoragesItemPodSecurityContextWindowsOptions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatabaseClusterSpecBackupStoragesItemPodSecurityContextWindowsOptions) Get() (v DatabaseClusterSpecBackupStoragesItemPodSecurityContextWindowsOptions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatabaseClusterSpecBackupStoragesItemPodSecurityContextWindowsOptions) Or(d DatabaseClusterSpecBackupStoragesItemPodSecurityContextWindowsOptions) DatabaseClusterSpecBackupStoragesItemPodSecurityContextWindowsOptions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatabaseClusterSpecBackupStoragesItemResources returns new OptDatabaseClusterSpecBackupStoragesItemResources with value set to v.
func NewOptDatabaseClusterSpecBackupStoragesItemResources(v DatabaseClusterSpecBackupStoragesItemResources) OptDatabaseClusterSpecBackupStoragesItemResources {
	return OptDatabaseClusterSpecBackupStoragesItemResources{
		Value: v,
		Set:   true,
	}
}

// OptDatabaseClusterSpecBackupStoragesItemResources is optional DatabaseClusterSpecBackupStoragesItemResources.
type OptDatabaseClusterSpecBackupStoragesItemResources struct {
	Value DatabaseClusterSpecBackupStoragesItemResources
	Set   bool
}

// IsSet returns true if OptDatabaseClusterSpecBackupStoragesItemResources was set.
func (o OptDatabaseClusterSpecBackupStoragesItemResources) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDatabaseClusterSpecBackupStoragesItemResources) Reset() {
	var v DatabaseClusterSpecBackupStoragesItemResources
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatabaseClusterSpecBackupStoragesItemResources) SetTo(v DatabaseClusterSpecBackupStoragesItemResources) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatabaseClusterSpecBackupStoragesItemResources) Get() (v DatabaseClusterSpecBackupStoragesItemResources, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatabaseClusterSpecBackupStoragesItemResources) Or(d DatabaseClusterSpecBackupStoragesItemResources) DatabaseClusterSpecBackupStoragesItemResources {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatabaseClusterSpecBackupStoragesItemResourcesLimits returns new OptDatabaseClusterSpecBackupStoragesItemResourcesLimits with value set to v.
func NewOptDatabaseClusterSpecBackupStoragesItemResourcesLimits(v DatabaseClusterSpecBackupStoragesItemResourcesLimits) OptDatabaseClusterSpecBackupStoragesItemResourcesLimits {
	return OptDatabaseClusterSpecBackupStoragesItemResourcesLimits{
		Value: v,
		Set:   true,
	}
}

// OptDatabaseClusterSpecBackupStoragesItemResourcesLimits is optional DatabaseClusterSpecBackupStoragesItemResourcesLimits.
type OptDatabaseClusterSpecBackupStoragesItemResourcesLimits struct {
	Value DatabaseClusterSpecBackupStoragesItemResourcesLimits
	Set   bool
}

// IsSet returns true if OptDatabaseClusterSpecBackupStoragesItemResourcesLimits was set.
func (o OptDatabaseClusterSpecBackupStoragesItemResourcesLimits) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDatabaseClusterSpecBackupStoragesItemResourcesLimits) Reset() {
	var v DatabaseClusterSpecBackupStoragesItemResourcesLimits
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatabaseClusterSpecBackupStoragesItemResourcesLimits) SetTo(v DatabaseClusterSpecBackupStoragesItemResourcesLimits) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatabaseClusterSpecBackupStoragesItemResourcesLimits) Get() (v DatabaseClusterSpecBackupStoragesItemResourcesLimits, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatabaseClusterSpecBackupStoragesItemResourcesLimits) Or(d DatabaseClusterSpecBackupStoragesItemResourcesLimits) DatabaseClusterSpecBackupStoragesItemResourcesLimits {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatabaseClusterSpecBackupStoragesItemResourcesRequests returns new OptDatabaseClusterSpecBackupStoragesItemResourcesRequests with value set to v.
func NewOptDatabaseClusterSpecBackupStoragesItemResourcesRequests(v DatabaseClusterSpecBackupStoragesItemResourcesRequests) OptDatabaseClusterSpecBackupStoragesItemResourcesRequests {
	return OptDatabaseClusterSpecBackupStoragesItemResourcesRequests{
		Value: v,
		Set:   true,
	}
}

// OptDatabaseClusterSpecBackupStoragesItemResourcesRequests is optional DatabaseClusterSpecBackupStoragesItemResourcesRequests.
type OptDatabaseClusterSpecBackupStoragesItemResourcesRequests struct {
	Value DatabaseClusterSpecBackupStoragesItemResourcesRequests
	Set   bool
}

// IsSet returns true if OptDatabaseClusterSpecBackupStoragesItemResourcesRequests was set.
func (o OptDatabaseClusterSpecBackupStoragesItemResourcesRequests) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDatabaseClusterSpecBackupStoragesItemResourcesRequests) Reset() {
	var v DatabaseClusterSpecBackupStoragesItemResourcesRequests
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatabaseClusterSpecBackupStoragesItemResourcesRequests) SetTo(v DatabaseClusterSpecBackupStoragesItemResourcesRequests) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatabaseClusterSpecBackupStoragesItemResourcesRequests) Get() (v DatabaseClusterSpecBackupStoragesItemResourcesRequests, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatabaseClusterSpecBackupStoragesItemResourcesRequests) Or(d DatabaseClusterSpecBackupStoragesItemResourcesRequests) DatabaseClusterSpecBackupStoragesItemResourcesRequests {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatabaseClusterSpecBackupStoragesItemStorageProvider returns new OptDatabaseClusterSpecBackupStoragesItemStorageProvider with value set to v.
func NewOptDatabaseClusterSpecBackupStoragesItemStorageProvider(v DatabaseClusterSpecBackupStoragesItemStorageProvider) OptDatabaseClusterSpecBackupStoragesItemStorageProvider {
	return OptDatabaseClusterSpecBackupStoragesItemStorageProvider{
		Value: v,
		Set:   true,
	}
}

// OptDatabaseClusterSpecBackupStoragesItemStorageProvider is optional DatabaseClusterSpecBackupStoragesItemStorageProvider.
type OptDatabaseClusterSpecBackupStoragesItemStorageProvider struct {
	Value DatabaseClusterSpecBackupStoragesItemStorageProvider
	Set   bool
}

// IsSet returns true if OptDatabaseClusterSpecBackupStoragesItemStorageProvider was set.
func (o OptDatabaseClusterSpecBackupStoragesItemStorageProvider) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDatabaseClusterSpecBackupStoragesItemStorageProvider) Reset() {
	var v DatabaseClusterSpecBackupStoragesItemStorageProvider
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatabaseClusterSpecBackupStoragesItemStorageProvider) SetTo(v DatabaseClusterSpecBackupStoragesItemStorageProvider) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatabaseClusterSpecBackupStoragesItemStorageProvider) Get() (v DatabaseClusterSpecBackupStoragesItemStorageProvider, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatabaseClusterSpecBackupStoragesItemStorageProvider) Or(d DatabaseClusterSpecBackupStoragesItemStorageProvider) DatabaseClusterSpecBackupStoragesItemStorageProvider {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatabaseClusterSpecBackupStoragesItemVolumeSpec returns new OptDatabaseClusterSpecBackupStoragesItemVolumeSpec with value set to v.
func NewOptDatabaseClusterSpecBackupStoragesItemVolumeSpec(v DatabaseClusterSpecBackupStoragesItemVolumeSpec) OptDatabaseClusterSpecBackupStoragesItemVolumeSpec {
	return OptDatabaseClusterSpecBackupStoragesItemVolumeSpec{
		Value: v,
		Set:   true,
	}
}

// OptDatabaseClusterSpecBackupStoragesItemVolumeSpec is optional DatabaseClusterSpecBackupStoragesItemVolumeSpec.
type OptDatabaseClusterSpecBackupStoragesItemVolumeSpec struct {
	Value DatabaseClusterSpecBackupStoragesItemVolumeSpec
	Set   bool
}

// IsSet returns true if OptDatabaseClusterSpecBackupStoragesItemVolumeSpec was set.
func (o OptDatabaseClusterSpecBackupStoragesItemVolumeSpec) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDatabaseClusterSpecBackupStoragesItemVolumeSpec) Reset() {
	var v DatabaseClusterSpecBackupStoragesItemVolumeSpec
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatabaseClusterSpecBackupStoragesItemVolumeSpec) SetTo(v DatabaseClusterSpecBackupStoragesItemVolumeSpec) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatabaseClusterSpecBackupStoragesItemVolumeSpec) Get() (v DatabaseClusterSpecBackupStoragesItemVolumeSpec, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatabaseClusterSpecBackupStoragesItemVolumeSpec) Or(d DatabaseClusterSpecBackupStoragesItemVolumeSpec) DatabaseClusterSpecBackupStoragesItemVolumeSpec {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDir returns new OptDatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDir with value set to v.
func NewOptDatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDir(v DatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDir) OptDatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDir {
	return OptDatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDir{
		Value: v,
		Set:   true,
	}
}

// OptDatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDir is optional DatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDir.
type OptDatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDir struct {
	Value DatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDir
	Set   bool
}

// IsSet returns true if OptDatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDir was set.
func (o OptDatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDir) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDir) Reset() {
	var v DatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDir
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDir) SetTo(v DatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDir) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDir) Get() (v DatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDir, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDir) Or(d DatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDir) DatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDir {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDirSizeLimit returns new OptDatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDirSizeLimit with value set to v.
func NewOptDatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDirSizeLimit(v DatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDirSizeLimit) OptDatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDirSizeLimit {
	return OptDatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDirSizeLimit{
		Value: v,
		Set:   true,
	}
}

// OptDatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDirSizeLimit is optional DatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDirSizeLimit.
type OptDatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDirSizeLimit struct {
	Value DatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDirSizeLimit
	Set   bool
}

// IsSet returns true if OptDatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDirSizeLimit was set.
func (o OptDatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDirSizeLimit) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptDatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDirSizeLimit) Reset() {
	var v DatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDirSizeLimit
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDirSizeLimit) SetTo(v DatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDirSizeLimit) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDirSizeLimit) Get() (v DatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDirSizeLimit, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDirSizeLimit) Or(d DatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDirSizeLimit) DatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDirSizeLimit {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatabaseClusterSpecBackupStoragesItemVolumeSpecHostPath returns new OptDatabaseClusterSpecBackupStoragesItemVolumeSpecHostPath with value set to v.
func NewOptDatabaseClusterSpecBackupStoragesItemVolumeSpecHostPath(v DatabaseClusterSpecBackupStoragesItemVolumeSpecHostPath) OptDatabaseClusterSpecBackupStoragesItemVolumeSpecHostPath {
	return OptDatabaseClusterSpecBackupStoragesItemVolumeSpecHostPath{
		Value: v,
		Set:   true,
	}
}

// OptDatabaseClusterSpecBackupStoragesItemVolumeSpecHostPath is optional DatabaseClusterSpecBackupStoragesItemVolumeSpecHostPath.
type OptDatabaseClusterSpecBackupStoragesItemVolumeSpecHostPath struct {
	Value DatabaseClusterSpecBackupStoragesItemVolumeSpecHostPath
	Set   bool
}

// IsSet returns true if OptDatabaseClusterSpecBackupStoragesItemVolumeSpecHostPath was set.
func (o OptDatabaseClusterSpecBackupStoragesItemVolumeSpecHostPath) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDatabaseClusterSpecBackupStoragesItemVolumeSpecHostPath) Reset() {
	var v DatabaseClusterSpecBackupStoragesItemVolumeSpecHostPath
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatabaseClusterSpecBackupStoragesItemVolumeSpecHostPath) SetTo(v DatabaseClusterSpecBackupStoragesItemVolumeSpecHostPath) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatabaseClusterSpecBackupStoragesItemVolumeSpecHostPath) Get() (v DatabaseClusterSpecBackupStoragesItemVolumeSpecHostPath, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatabaseClusterSpecBackupStoragesItemVolumeSpecHostPath) Or(d DatabaseClusterSpecBackupStoragesItemVolumeSpecHostPath) DatabaseClusterSpecBackupStoragesItemVolumeSpecHostPath {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaim returns new OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaim with value set to v.
func NewOptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaim(v DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaim) OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaim {
	return OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaim{
		Value: v,
		Set:   true,
	}
}

// OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaim is optional DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaim.
type OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaim struct {
	Value DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaim
	Set   bool
}

// IsSet returns true if OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaim was set.
func (o OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaim) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaim) Reset() {
	var v DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaim
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaim) SetTo(v DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaim) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaim) Get() (v DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaim, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaim) Or(d DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaim) DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaim {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimDataSource returns new OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimDataSource with value set to v.
func NewOptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimDataSource(v DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimDataSource) OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimDataSource {
	return OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimDataSource{
		Value: v,
		Set:   true,
	}
}

// OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimDataSource is optional DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimDataSource.
type OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimDataSource struct {
	Value DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimDataSource
	Set   bool
}

// IsSet returns true if OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimDataSource was set.
func (o OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimDataSource) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimDataSource) Reset() {
	var v DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimDataSource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimDataSource) SetTo(v DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimDataSource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimDataSource) Get() (v DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimDataSource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimDataSource) Or(d DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimDataSource) DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimDataSource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimDataSourceRef returns new OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimDataSourceRef with value set to v.
func NewOptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimDataSourceRef(v DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimDataSourceRef) OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimDataSourceRef {
	return OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimDataSourceRef{
		Value: v,
		Set:   true,
	}
}

// OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimDataSourceRef is optional DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimDataSourceRef.
type OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimDataSourceRef struct {
	Value DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimDataSourceRef
	Set   bool
}

// IsSet returns true if OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimDataSourceRef was set.
func (o OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimDataSourceRef) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimDataSourceRef) Reset() {
	var v DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimDataSourceRef
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimDataSourceRef) SetTo(v DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimDataSourceRef) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimDataSourceRef) Get() (v DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimDataSourceRef, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimDataSourceRef) Or(d DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimDataSourceRef) DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimDataSourceRef {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResources returns new OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResources with value set to v.
func NewOptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResources(v DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResources) OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResources {
	return OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResources{
		Value: v,
		Set:   true,
	}
}

// OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResources is optional DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResources.
type OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResources struct {
	Value DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResources
	Set   bool
}

// IsSet returns true if OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResources was set.
func (o OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResources) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResources) Reset() {
	var v DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResources
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResources) SetTo(v DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResources) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResources) Get() (v DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResources, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResources) Or(d DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResources) DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResources {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesLimits returns new OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesLimits with value set to v.
func NewOptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesLimits(v DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesLimits) OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesLimits {
	return OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesLimits{
		Value: v,
		Set:   true,
	}
}

// OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesLimits is optional DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesLimits.
type OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesLimits struct {
	Value DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesLimits
	Set   bool
}

// IsSet returns true if OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesLimits was set.
func (o OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesLimits) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesLimits) Reset() {
	var v DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesLimits
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesLimits) SetTo(v DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesLimits) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesLimits) Get() (v DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesLimits, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesLimits) Or(d DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesLimits) DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesLimits {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesRequests returns new OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesRequests with value set to v.
func NewOptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesRequests(v DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesRequests) OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesRequests {
	return OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesRequests{
		Value: v,
		Set:   true,
	}
}

// OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesRequests is optional DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesRequests.
type OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesRequests struct {
	Value DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesRequests
	Set   bool
}

// IsSet returns true if OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesRequests was set.
func (o OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesRequests) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesRequests) Reset() {
	var v DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesRequests
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesRequests) SetTo(v DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesRequests) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesRequests) Get() (v DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesRequests, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesRequests) Or(d DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesRequests) DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesRequests {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimSelector returns new OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimSelector with value set to v.
func NewOptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimSelector(v DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimSelector) OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimSelector {
	return OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimSelector{
		Value: v,
		Set:   true,
	}
}

// OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimSelector is optional DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimSelector.
type OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimSelector struct {
	Value DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimSelector
	Set   bool
}

// IsSet returns true if OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimSelector was set.
func (o OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimSelector) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimSelector) Reset() {
	var v DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimSelector
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimSelector) SetTo(v DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimSelector) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimSelector) Get() (v DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimSelector, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimSelector) Or(d DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimSelector) DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimSelector {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimSelectorMatchLabels returns new OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimSelectorMatchLabels with value set to v.
func NewOptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimSelectorMatchLabels(v DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimSelectorMatchLabels) OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimSelectorMatchLabels {
	return OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimSelectorMatchLabels{
		Value: v,
		Set:   true,
	}
}

// OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimSelectorMatchLabels is optional DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimSelectorMatchLabels.
type OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimSelectorMatchLabels struct {
	Value DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimSelectorMatchLabels
	Set   bool
}

// IsSet returns true if OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimSelectorMatchLabels was set.
func (o OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimSelectorMatchLabels) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimSelectorMatchLabels) Reset() {
	var v DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimSelectorMatchLabels
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimSelectorMatchLabels) SetTo(v DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimSelectorMatchLabels) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimSelectorMatchLabels) Get() (v DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimSelectorMatchLabels, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimSelectorMatchLabels) Or(d DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimSelectorMatchLabels) DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimSelectorMatchLabels {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatabaseClusterSpecDbInstanceCPU returns new OptDatabaseClusterSpecDbInstanceCPU with value set to v.
func NewOptDatabaseClusterSpecDbInstanceCPU(v DatabaseClusterSpecDbInstanceCPU) OptDatabaseClusterSpecDbInstanceCPU {
	return OptDatabaseClusterSpecDbInstanceCPU{
		Value: v,
		Set:   true,
	}
}

// OptDatabaseClusterSpecDbInstanceCPU is optional DatabaseClusterSpecDbInstanceCPU.
type OptDatabaseClusterSpecDbInstanceCPU struct {
	Value DatabaseClusterSpecDbInstanceCPU
	Set   bool
}

// IsSet returns true if OptDatabaseClusterSpecDbInstanceCPU was set.
func (o OptDatabaseClusterSpecDbInstanceCPU) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDatabaseClusterSpecDbInstanceCPU) Reset() {
	var v DatabaseClusterSpecDbInstanceCPU
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatabaseClusterSpecDbInstanceCPU) SetTo(v DatabaseClusterSpecDbInstanceCPU) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatabaseClusterSpecDbInstanceCPU) Get() (v DatabaseClusterSpecDbInstanceCPU, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatabaseClusterSpecDbInstanceCPU) Or(d DatabaseClusterSpecDbInstanceCPU) DatabaseClusterSpecDbInstanceCPU {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatabaseClusterSpecDbInstanceDiskSize returns new OptDatabaseClusterSpecDbInstanceDiskSize with value set to v.
func NewOptDatabaseClusterSpecDbInstanceDiskSize(v DatabaseClusterSpecDbInstanceDiskSize) OptDatabaseClusterSpecDbInstanceDiskSize {
	return OptDatabaseClusterSpecDbInstanceDiskSize{
		Value: v,
		Set:   true,
	}
}

// OptDatabaseClusterSpecDbInstanceDiskSize is optional DatabaseClusterSpecDbInstanceDiskSize.
type OptDatabaseClusterSpecDbInstanceDiskSize struct {
	Value DatabaseClusterSpecDbInstanceDiskSize
	Set   bool
}

// IsSet returns true if OptDatabaseClusterSpecDbInstanceDiskSize was set.
func (o OptDatabaseClusterSpecDbInstanceDiskSize) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDatabaseClusterSpecDbInstanceDiskSize) Reset() {
	var v DatabaseClusterSpecDbInstanceDiskSize
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatabaseClusterSpecDbInstanceDiskSize) SetTo(v DatabaseClusterSpecDbInstanceDiskSize) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatabaseClusterSpecDbInstanceDiskSize) Get() (v DatabaseClusterSpecDbInstanceDiskSize, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatabaseClusterSpecDbInstanceDiskSize) Or(d DatabaseClusterSpecDbInstanceDiskSize) DatabaseClusterSpecDbInstanceDiskSize {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatabaseClusterSpecDbInstanceMemory returns new OptDatabaseClusterSpecDbInstanceMemory with value set to v.
func NewOptDatabaseClusterSpecDbInstanceMemory(v DatabaseClusterSpecDbInstanceMemory) OptDatabaseClusterSpecDbInstanceMemory {
	return OptDatabaseClusterSpecDbInstanceMemory{
		Value: v,
		Set:   true,
	}
}

// OptDatabaseClusterSpecDbInstanceMemory is optional DatabaseClusterSpecDbInstanceMemory.
type OptDatabaseClusterSpecDbInstanceMemory struct {
	Value DatabaseClusterSpecDbInstanceMemory
	Set   bool
}

// IsSet returns true if OptDatabaseClusterSpecDbInstanceMemory was set.
func (o OptDatabaseClusterSpecDbInstanceMemory) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDatabaseClusterSpecDbInstanceMemory) Reset() {
	var v DatabaseClusterSpecDbInstanceMemory
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatabaseClusterSpecDbInstanceMemory) SetTo(v DatabaseClusterSpecDbInstanceMemory) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatabaseClusterSpecDbInstanceMemory) Get() (v DatabaseClusterSpecDbInstanceMemory, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatabaseClusterSpecDbInstanceMemory) Or(d DatabaseClusterSpecDbInstanceMemory) DatabaseClusterSpecDbInstanceMemory {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatabaseClusterSpecLoadBalancer returns new OptDatabaseClusterSpecLoadBalancer with value set to v.
func NewOptDatabaseClusterSpecLoadBalancer(v DatabaseClusterSpecLoadBalancer) OptDatabaseClusterSpecLoadBalancer {
	return OptDatabaseClusterSpecLoadBalancer{
		Value: v,
		Set:   true,
	}
}

// OptDatabaseClusterSpecLoadBalancer is optional DatabaseClusterSpecLoadBalancer.
type OptDatabaseClusterSpecLoadBalancer struct {
	Value DatabaseClusterSpecLoadBalancer
	Set   bool
}

// IsSet returns true if OptDatabaseClusterSpecLoadBalancer was set.
func (o OptDatabaseClusterSpecLoadBalancer) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDatabaseClusterSpecLoadBalancer) Reset() {
	var v DatabaseClusterSpecLoadBalancer
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatabaseClusterSpecLoadBalancer) SetTo(v DatabaseClusterSpecLoadBalancer) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatabaseClusterSpecLoadBalancer) Get() (v DatabaseClusterSpecLoadBalancer, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatabaseClusterSpecLoadBalancer) Or(d DatabaseClusterSpecLoadBalancer) DatabaseClusterSpecLoadBalancer {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatabaseClusterSpecLoadBalancerAnnotations returns new OptDatabaseClusterSpecLoadBalancerAnnotations with value set to v.
func NewOptDatabaseClusterSpecLoadBalancerAnnotations(v DatabaseClusterSpecLoadBalancerAnnotations) OptDatabaseClusterSpecLoadBalancerAnnotations {
	return OptDatabaseClusterSpecLoadBalancerAnnotations{
		Value: v,
		Set:   true,
	}
}

// OptDatabaseClusterSpecLoadBalancerAnnotations is optional DatabaseClusterSpecLoadBalancerAnnotations.
type OptDatabaseClusterSpecLoadBalancerAnnotations struct {
	Value DatabaseClusterSpecLoadBalancerAnnotations
	Set   bool
}

// IsSet returns true if OptDatabaseClusterSpecLoadBalancerAnnotations was set.
func (o OptDatabaseClusterSpecLoadBalancerAnnotations) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDatabaseClusterSpecLoadBalancerAnnotations) Reset() {
	var v DatabaseClusterSpecLoadBalancerAnnotations
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatabaseClusterSpecLoadBalancerAnnotations) SetTo(v DatabaseClusterSpecLoadBalancerAnnotations) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatabaseClusterSpecLoadBalancerAnnotations) Get() (v DatabaseClusterSpecLoadBalancerAnnotations, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatabaseClusterSpecLoadBalancerAnnotations) Or(d DatabaseClusterSpecLoadBalancerAnnotations) DatabaseClusterSpecLoadBalancerAnnotations {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatabaseClusterSpecLoadBalancerResources returns new OptDatabaseClusterSpecLoadBalancerResources with value set to v.
func NewOptDatabaseClusterSpecLoadBalancerResources(v DatabaseClusterSpecLoadBalancerResources) OptDatabaseClusterSpecLoadBalancerResources {
	return OptDatabaseClusterSpecLoadBalancerResources{
		Value: v,
		Set:   true,
	}
}

// OptDatabaseClusterSpecLoadBalancerResources is optional DatabaseClusterSpecLoadBalancerResources.
type OptDatabaseClusterSpecLoadBalancerResources struct {
	Value DatabaseClusterSpecLoadBalancerResources
	Set   bool
}

// IsSet returns true if OptDatabaseClusterSpecLoadBalancerResources was set.
func (o OptDatabaseClusterSpecLoadBalancerResources) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDatabaseClusterSpecLoadBalancerResources) Reset() {
	var v DatabaseClusterSpecLoadBalancerResources
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatabaseClusterSpecLoadBalancerResources) SetTo(v DatabaseClusterSpecLoadBalancerResources) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatabaseClusterSpecLoadBalancerResources) Get() (v DatabaseClusterSpecLoadBalancerResources, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatabaseClusterSpecLoadBalancerResources) Or(d DatabaseClusterSpecLoadBalancerResources) DatabaseClusterSpecLoadBalancerResources {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatabaseClusterSpecLoadBalancerResourcesLimits returns new OptDatabaseClusterSpecLoadBalancerResourcesLimits with value set to v.
func NewOptDatabaseClusterSpecLoadBalancerResourcesLimits(v DatabaseClusterSpecLoadBalancerResourcesLimits) OptDatabaseClusterSpecLoadBalancerResourcesLimits {
	return OptDatabaseClusterSpecLoadBalancerResourcesLimits{
		Value: v,
		Set:   true,
	}
}

// OptDatabaseClusterSpecLoadBalancerResourcesLimits is optional DatabaseClusterSpecLoadBalancerResourcesLimits.
type OptDatabaseClusterSpecLoadBalancerResourcesLimits struct {
	Value DatabaseClusterSpecLoadBalancerResourcesLimits
	Set   bool
}

// IsSet returns true if OptDatabaseClusterSpecLoadBalancerResourcesLimits was set.
func (o OptDatabaseClusterSpecLoadBalancerResourcesLimits) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDatabaseClusterSpecLoadBalancerResourcesLimits) Reset() {
	var v DatabaseClusterSpecLoadBalancerResourcesLimits
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatabaseClusterSpecLoadBalancerResourcesLimits) SetTo(v DatabaseClusterSpecLoadBalancerResourcesLimits) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatabaseClusterSpecLoadBalancerResourcesLimits) Get() (v DatabaseClusterSpecLoadBalancerResourcesLimits, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatabaseClusterSpecLoadBalancerResourcesLimits) Or(d DatabaseClusterSpecLoadBalancerResourcesLimits) DatabaseClusterSpecLoadBalancerResourcesLimits {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatabaseClusterSpecLoadBalancerResourcesRequests returns new OptDatabaseClusterSpecLoadBalancerResourcesRequests with value set to v.
func NewOptDatabaseClusterSpecLoadBalancerResourcesRequests(v DatabaseClusterSpecLoadBalancerResourcesRequests) OptDatabaseClusterSpecLoadBalancerResourcesRequests {
	return OptDatabaseClusterSpecLoadBalancerResourcesRequests{
		Value: v,
		Set:   true,
	}
}

// OptDatabaseClusterSpecLoadBalancerResourcesRequests is optional DatabaseClusterSpecLoadBalancerResourcesRequests.
type OptDatabaseClusterSpecLoadBalancerResourcesRequests struct {
	Value DatabaseClusterSpecLoadBalancerResourcesRequests
	Set   bool
}

// IsSet returns true if OptDatabaseClusterSpecLoadBalancerResourcesRequests was set.
func (o OptDatabaseClusterSpecLoadBalancerResourcesRequests) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDatabaseClusterSpecLoadBalancerResourcesRequests) Reset() {
	var v DatabaseClusterSpecLoadBalancerResourcesRequests
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatabaseClusterSpecLoadBalancerResourcesRequests) SetTo(v DatabaseClusterSpecLoadBalancerResourcesRequests) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatabaseClusterSpecLoadBalancerResourcesRequests) Get() (v DatabaseClusterSpecLoadBalancerResourcesRequests, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatabaseClusterSpecLoadBalancerResourcesRequests) Or(d DatabaseClusterSpecLoadBalancerResourcesRequests) DatabaseClusterSpecLoadBalancerResourcesRequests {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatabaseClusterSpecMonitoring returns new OptDatabaseClusterSpecMonitoring with value set to v.
func NewOptDatabaseClusterSpecMonitoring(v DatabaseClusterSpecMonitoring) OptDatabaseClusterSpecMonitoring {
	return OptDatabaseClusterSpecMonitoring{
		Value: v,
		Set:   true,
	}
}

// OptDatabaseClusterSpecMonitoring is optional DatabaseClusterSpecMonitoring.
type OptDatabaseClusterSpecMonitoring struct {
	Value DatabaseClusterSpecMonitoring
	Set   bool
}

// IsSet returns true if OptDatabaseClusterSpecMonitoring was set.
func (o OptDatabaseClusterSpecMonitoring) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDatabaseClusterSpecMonitoring) Reset() {
	var v DatabaseClusterSpecMonitoring
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatabaseClusterSpecMonitoring) SetTo(v DatabaseClusterSpecMonitoring) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatabaseClusterSpecMonitoring) Get() (v DatabaseClusterSpecMonitoring, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatabaseClusterSpecMonitoring) Or(d DatabaseClusterSpecMonitoring) DatabaseClusterSpecMonitoring {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatabaseClusterSpecMonitoringContainerSecurityContext returns new OptDatabaseClusterSpecMonitoringContainerSecurityContext with value set to v.
func NewOptDatabaseClusterSpecMonitoringContainerSecurityContext(v DatabaseClusterSpecMonitoringContainerSecurityContext) OptDatabaseClusterSpecMonitoringContainerSecurityContext {
	return OptDatabaseClusterSpecMonitoringContainerSecurityContext{
		Value: v,
		Set:   true,
	}
}

// OptDatabaseClusterSpecMonitoringContainerSecurityContext is optional DatabaseClusterSpecMonitoringContainerSecurityContext.
type OptDatabaseClusterSpecMonitoringContainerSecurityContext struct {
	Value DatabaseClusterSpecMonitoringContainerSecurityContext
	Set   bool
}

// IsSet returns true if OptDatabaseClusterSpecMonitoringContainerSecurityContext was set.
func (o OptDatabaseClusterSpecMonitoringContainerSecurityContext) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDatabaseClusterSpecMonitoringContainerSecurityContext) Reset() {
	var v DatabaseClusterSpecMonitoringContainerSecurityContext
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatabaseClusterSpecMonitoringContainerSecurityContext) SetTo(v DatabaseClusterSpecMonitoringContainerSecurityContext) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatabaseClusterSpecMonitoringContainerSecurityContext) Get() (v DatabaseClusterSpecMonitoringContainerSecurityContext, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatabaseClusterSpecMonitoringContainerSecurityContext) Or(d DatabaseClusterSpecMonitoringContainerSecurityContext) DatabaseClusterSpecMonitoringContainerSecurityContext {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatabaseClusterSpecMonitoringContainerSecurityContextCapabilities returns new OptDatabaseClusterSpecMonitoringContainerSecurityContextCapabilities with value set to v.
func NewOptDatabaseClusterSpecMonitoringContainerSecurityContextCapabilities(v DatabaseClusterSpecMonitoringContainerSecurityContextCapabilities) OptDatabaseClusterSpecMonitoringContainerSecurityContextCapabilities {
	return OptDatabaseClusterSpecMonitoringContainerSecurityContextCapabilities{
		Value: v,
		Set:   true,
	}
}

// OptDatabaseClusterSpecMonitoringContainerSecurityContextCapabilities is optional DatabaseClusterSpecMonitoringContainerSecurityContextCapabilities.
type OptDatabaseClusterSpecMonitoringContainerSecurityContextCapabilities struct {
	Value DatabaseClusterSpecMonitoringContainerSecurityContextCapabilities
	Set   bool
}

// IsSet returns true if OptDatabaseClusterSpecMonitoringContainerSecurityContextCapabilities was set.
func (o OptDatabaseClusterSpecMonitoringContainerSecurityContextCapabilities) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptDatabaseClusterSpecMonitoringContainerSecurityContextCapabilities) Reset() {
	var v DatabaseClusterSpecMonitoringContainerSecurityContextCapabilities
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatabaseClusterSpecMonitoringContainerSecurityContextCapabilities) SetTo(v DatabaseClusterSpecMonitoringContainerSecurityContextCapabilities) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatabaseClusterSpecMonitoringContainerSecurityContextCapabilities) Get() (v DatabaseClusterSpecMonitoringContainerSecurityContextCapabilities, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatabaseClusterSpecMonitoringContainerSecurityContextCapabilities) Or(d DatabaseClusterSpecMonitoringContainerSecurityContextCapabilities) DatabaseClusterSpecMonitoringContainerSecurityContextCapabilities {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatabaseClusterSpecMonitoringContainerSecurityContextSeLinuxOptions returns new OptDatabaseClusterSpecMonitoringContainerSecurityContextSeLinuxOptions with value set to v.
func NewOptDatabaseClusterSpecMonitoringContainerSecurityContextSeLinuxOptions(v DatabaseClusterSpecMonitoringContainerSecurityContextSeLinuxOptions) OptDatabaseClusterSpecMonitoringContainerSecurityContextSeLinuxOptions {
	return OptDatabaseClusterSpecMonitoringContainerSecurityContextSeLinuxOptions{
		Value: v,
		Set:   true,
	}
}

// OptDatabaseClusterSpecMonitoringContainerSecurityContextSeLinuxOptions is optional DatabaseClusterSpecMonitoringContainerSecurityContextSeLinuxOptions.
type OptDatabaseClusterSpecMonitoringContainerSecurityContextSeLinuxOptions struct {
	Value DatabaseClusterSpecMonitoringContainerSecurityContextSeLinuxOptions
	Set   bool
}

// IsSet returns true if OptDatabaseClusterSpecMonitoringContainerSecurityContextSeLinuxOptions was set.
func (o OptDatabaseClusterSpecMonitoringContainerSecurityContextSeLinuxOptions) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptDatabaseClusterSpecMonitoringContainerSecurityContextSeLinuxOptions) Reset() {
	var v DatabaseClusterSpecMonitoringContainerSecurityContextSeLinuxOptions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatabaseClusterSpecMonitoringContainerSecurityContextSeLinuxOptions) SetTo(v DatabaseClusterSpecMonitoringContainerSecurityContextSeLinuxOptions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatabaseClusterSpecMonitoringContainerSecurityContextSeLinuxOptions) Get() (v DatabaseClusterSpecMonitoringContainerSecurityContextSeLinuxOptions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatabaseClusterSpecMonitoringContainerSecurityContextSeLinuxOptions) Or(d DatabaseClusterSpecMonitoringContainerSecurityContextSeLinuxOptions) DatabaseClusterSpecMonitoringContainerSecurityContextSeLinuxOptions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatabaseClusterSpecMonitoringContainerSecurityContextSeccompProfile returns new OptDatabaseClusterSpecMonitoringContainerSecurityContextSeccompProfile with value set to v.
func NewOptDatabaseClusterSpecMonitoringContainerSecurityContextSeccompProfile(v DatabaseClusterSpecMonitoringContainerSecurityContextSeccompProfile) OptDatabaseClusterSpecMonitoringContainerSecurityContextSeccompProfile {
	return OptDatabaseClusterSpecMonitoringContainerSecurityContextSeccompProfile{
		Value: v,
		Set:   true,
	}
}

// OptDatabaseClusterSpecMonitoringContainerSecurityContextSeccompProfile is optional DatabaseClusterSpecMonitoringContainerSecurityContextSeccompProfile.
type OptDatabaseClusterSpecMonitoringContainerSecurityContextSeccompProfile struct {
	Value DatabaseClusterSpecMonitoringContainerSecurityContextSeccompProfile
	Set   bool
}

// IsSet returns true if OptDatabaseClusterSpecMonitoringContainerSecurityContextSeccompProfile was set.
func (o OptDatabaseClusterSpecMonitoringContainerSecurityContextSeccompProfile) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptDatabaseClusterSpecMonitoringContainerSecurityContextSeccompProfile) Reset() {
	var v DatabaseClusterSpecMonitoringContainerSecurityContextSeccompProfile
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatabaseClusterSpecMonitoringContainerSecurityContextSeccompProfile) SetTo(v DatabaseClusterSpecMonitoringContainerSecurityContextSeccompProfile) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatabaseClusterSpecMonitoringContainerSecurityContextSeccompProfile) Get() (v DatabaseClusterSpecMonitoringContainerSecurityContextSeccompProfile, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatabaseClusterSpecMonitoringContainerSecurityContextSeccompProfile) Or(d DatabaseClusterSpecMonitoringContainerSecurityContextSeccompProfile) DatabaseClusterSpecMonitoringContainerSecurityContextSeccompProfile {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatabaseClusterSpecMonitoringContainerSecurityContextWindowsOptions returns new OptDatabaseClusterSpecMonitoringContainerSecurityContextWindowsOptions with value set to v.
func NewOptDatabaseClusterSpecMonitoringContainerSecurityContextWindowsOptions(v DatabaseClusterSpecMonitoringContainerSecurityContextWindowsOptions) OptDatabaseClusterSpecMonitoringContainerSecurityContextWindowsOptions {
	return OptDatabaseClusterSpecMonitoringContainerSecurityContextWindowsOptions{
		Value: v,
		Set:   true,
	}
}

// OptDatabaseClusterSpecMonitoringContainerSecurityContextWindowsOptions is optional DatabaseClusterSpecMonitoringContainerSecurityContextWindowsOptions.
type OptDatabaseClusterSpecMonitoringContainerSecurityContextWindowsOptions struct {
	Value DatabaseClusterSpecMonitoringContainerSecurityContextWindowsOptions
	Set   bool
}

// IsSet returns true if OptDatabaseClusterSpecMonitoringContainerSecurityContextWindowsOptions was set.
func (o OptDatabaseClusterSpecMonitoringContainerSecurityContextWindowsOptions) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptDatabaseClusterSpecMonitoringContainerSecurityContextWindowsOptions) Reset() {
	var v DatabaseClusterSpecMonitoringContainerSecurityContextWindowsOptions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatabaseClusterSpecMonitoringContainerSecurityContextWindowsOptions) SetTo(v DatabaseClusterSpecMonitoringContainerSecurityContextWindowsOptions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatabaseClusterSpecMonitoringContainerSecurityContextWindowsOptions) Get() (v DatabaseClusterSpecMonitoringContainerSecurityContextWindowsOptions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatabaseClusterSpecMonitoringContainerSecurityContextWindowsOptions) Or(d DatabaseClusterSpecMonitoringContainerSecurityContextWindowsOptions) DatabaseClusterSpecMonitoringContainerSecurityContextWindowsOptions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatabaseClusterSpecMonitoringPmm returns new OptDatabaseClusterSpecMonitoringPmm with value set to v.
func NewOptDatabaseClusterSpecMonitoringPmm(v DatabaseClusterSpecMonitoringPmm) OptDatabaseClusterSpecMonitoringPmm {
	return OptDatabaseClusterSpecMonitoringPmm{
		Value: v,
		Set:   true,
	}
}

// OptDatabaseClusterSpecMonitoringPmm is optional DatabaseClusterSpecMonitoringPmm.
type OptDatabaseClusterSpecMonitoringPmm struct {
	Value DatabaseClusterSpecMonitoringPmm
	Set   bool
}

// IsSet returns true if OptDatabaseClusterSpecMonitoringPmm was set.
func (o OptDatabaseClusterSpecMonitoringPmm) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDatabaseClusterSpecMonitoringPmm) Reset() {
	var v DatabaseClusterSpecMonitoringPmm
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatabaseClusterSpecMonitoringPmm) SetTo(v DatabaseClusterSpecMonitoringPmm) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatabaseClusterSpecMonitoringPmm) Get() (v DatabaseClusterSpecMonitoringPmm, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatabaseClusterSpecMonitoringPmm) Or(d DatabaseClusterSpecMonitoringPmm) DatabaseClusterSpecMonitoringPmm {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatabaseClusterSpecMonitoringResources returns new OptDatabaseClusterSpecMonitoringResources with value set to v.
func NewOptDatabaseClusterSpecMonitoringResources(v DatabaseClusterSpecMonitoringResources) OptDatabaseClusterSpecMonitoringResources {
	return OptDatabaseClusterSpecMonitoringResources{
		Value: v,
		Set:   true,
	}
}

// OptDatabaseClusterSpecMonitoringResources is optional DatabaseClusterSpecMonitoringResources.
type OptDatabaseClusterSpecMonitoringResources struct {
	Value DatabaseClusterSpecMonitoringResources
	Set   bool
}

// IsSet returns true if OptDatabaseClusterSpecMonitoringResources was set.
func (o OptDatabaseClusterSpecMonitoringResources) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDatabaseClusterSpecMonitoringResources) Reset() {
	var v DatabaseClusterSpecMonitoringResources
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatabaseClusterSpecMonitoringResources) SetTo(v DatabaseClusterSpecMonitoringResources) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatabaseClusterSpecMonitoringResources) Get() (v DatabaseClusterSpecMonitoringResources, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatabaseClusterSpecMonitoringResources) Or(d DatabaseClusterSpecMonitoringResources) DatabaseClusterSpecMonitoringResources {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatabaseClusterSpecMonitoringResourcesLimits returns new OptDatabaseClusterSpecMonitoringResourcesLimits with value set to v.
func NewOptDatabaseClusterSpecMonitoringResourcesLimits(v DatabaseClusterSpecMonitoringResourcesLimits) OptDatabaseClusterSpecMonitoringResourcesLimits {
	return OptDatabaseClusterSpecMonitoringResourcesLimits{
		Value: v,
		Set:   true,
	}
}

// OptDatabaseClusterSpecMonitoringResourcesLimits is optional DatabaseClusterSpecMonitoringResourcesLimits.
type OptDatabaseClusterSpecMonitoringResourcesLimits struct {
	Value DatabaseClusterSpecMonitoringResourcesLimits
	Set   bool
}

// IsSet returns true if OptDatabaseClusterSpecMonitoringResourcesLimits was set.
func (o OptDatabaseClusterSpecMonitoringResourcesLimits) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDatabaseClusterSpecMonitoringResourcesLimits) Reset() {
	var v DatabaseClusterSpecMonitoringResourcesLimits
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatabaseClusterSpecMonitoringResourcesLimits) SetTo(v DatabaseClusterSpecMonitoringResourcesLimits) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatabaseClusterSpecMonitoringResourcesLimits) Get() (v DatabaseClusterSpecMonitoringResourcesLimits, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatabaseClusterSpecMonitoringResourcesLimits) Or(d DatabaseClusterSpecMonitoringResourcesLimits) DatabaseClusterSpecMonitoringResourcesLimits {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatabaseClusterSpecMonitoringResourcesRequests returns new OptDatabaseClusterSpecMonitoringResourcesRequests with value set to v.
func NewOptDatabaseClusterSpecMonitoringResourcesRequests(v DatabaseClusterSpecMonitoringResourcesRequests) OptDatabaseClusterSpecMonitoringResourcesRequests {
	return OptDatabaseClusterSpecMonitoringResourcesRequests{
		Value: v,
		Set:   true,
	}
}

// OptDatabaseClusterSpecMonitoringResourcesRequests is optional DatabaseClusterSpecMonitoringResourcesRequests.
type OptDatabaseClusterSpecMonitoringResourcesRequests struct {
	Value DatabaseClusterSpecMonitoringResourcesRequests
	Set   bool
}

// IsSet returns true if OptDatabaseClusterSpecMonitoringResourcesRequests was set.
func (o OptDatabaseClusterSpecMonitoringResourcesRequests) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDatabaseClusterSpecMonitoringResourcesRequests) Reset() {
	var v DatabaseClusterSpecMonitoringResourcesRequests
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatabaseClusterSpecMonitoringResourcesRequests) SetTo(v DatabaseClusterSpecMonitoringResourcesRequests) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatabaseClusterSpecMonitoringResourcesRequests) Get() (v DatabaseClusterSpecMonitoringResourcesRequests, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatabaseClusterSpecMonitoringResourcesRequests) Or(d DatabaseClusterSpecMonitoringResourcesRequests) DatabaseClusterSpecMonitoringResourcesRequests {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatabaseClusterStatus returns new OptDatabaseClusterStatus with value set to v.
func NewOptDatabaseClusterStatus(v DatabaseClusterStatus) OptDatabaseClusterStatus {
	return OptDatabaseClusterStatus{
		Value: v,
		Set:   true,
	}
}

// OptDatabaseClusterStatus is optional DatabaseClusterStatus.
type OptDatabaseClusterStatus struct {
	Value DatabaseClusterStatus
	Set   bool
}

// IsSet returns true if OptDatabaseClusterStatus was set.
func (o OptDatabaseClusterStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDatabaseClusterStatus) Reset() {
	var v DatabaseClusterStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatabaseClusterStatus) SetTo(v DatabaseClusterStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatabaseClusterStatus) Get() (v DatabaseClusterStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatabaseClusterStatus) Or(d DatabaseClusterStatus) DatabaseClusterStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt32 returns new OptInt32 with value set to v.
func NewOptInt32(v int32) OptInt32 {
	return OptInt32{
		Value: v,
		Set:   true,
	}
}

// OptInt32 is optional int32.
type OptInt32 struct {
	Value int32
	Set   bool
}

// IsSet returns true if OptInt32 was set.
func (o OptInt32) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt32) Reset() {
	var v int32
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt32) SetTo(v int32) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt32) Get() (v int32, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt32) Or(d int32) int32 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt64 returns new OptInt64 with value set to v.
func NewOptInt64(v int64) OptInt64 {
	return OptInt64{
		Value: v,
		Set:   true,
	}
}

// OptInt64 is optional int64.
type OptInt64 struct {
	Value int64
	Set   bool
}

// IsSet returns true if OptInt64 was set.
func (o OptInt64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt64) Reset() {
	var v int64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt64) SetTo(v int64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt64) Get() (v int64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt64) Or(d int64) int64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}
