// Code generated by ogen, DO NOT EDIT.

package oas

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// CreateDatabaseCluster implements createDatabaseCluster operation.
	//
	// Create a database cluster on given kubernetes cluster.
	//
	// POST /kubernetes/{kubernetesName}/database-cluster
	CreateDatabaseCluster(ctx context.Context, req *DatabaseCluster, params CreateDatabaseClusterParams) (CreateDatabaseClusterRes, error)
	// ListDatabases implements listDatabases operation.
	//
	// List of created database clusters on provided kubernetes cluster.
	//
	// GET /kubernetes/{kubernetesName}/database-cluster
	ListDatabases(ctx context.Context, params ListDatabasesParams) (ListDatabasesRes, error)
	// ListKubernetesClusters implements listKubernetesClusters operation.
	//
	// List of registered kubernetes clusters.
	//
	// GET /kubernetes
	ListKubernetesClusters(ctx context.Context) (ListKubernetesClustersRes, error)
	// RegisterKubernetes implements registerKubernetes operation.
	//
	// Register Kubernetes cluster in the control plane.
	//
	// POST /kubernetes
	RegisterKubernetes(ctx context.Context, req *KubernetesCluster) (RegisterKubernetesRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
