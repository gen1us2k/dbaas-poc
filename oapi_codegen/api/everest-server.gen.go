// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	. "github.com/gen1us2k/dbaas-poc/oapi-codegen/api/models"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List of registered kubernetes clusters
	// (GET /kubernetes)
	ListKubernetesClusters(ctx echo.Context) error
	// Register Kubernetes cluster in the control plane
	// (POST /kubernetes)
	RegisterKubernetes(ctx echo.Context) error
	// List of created database clusters on provided kubernetes cluster
	// (GET /kubernetes/{kubernetesName}/database-cluster)
	ListDatabases(ctx echo.Context, kubernetesName string) error
	// Create a database cluster on given kubernetes cluster
	// (POST /kubernetes/{kubernetesName}/database-cluster)
	CreateDatabaseCluster(ctx echo.Context, kubernetesName string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListKubernetesClusters converts echo context to params.
func (w *ServerInterfaceWrapper) ListKubernetesClusters(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListKubernetesClusters(ctx)
	return err
}

// RegisterKubernetes converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterKubernetes(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterKubernetes(ctx)
	return err
}

// ListDatabases converts echo context to params.
func (w *ServerInterfaceWrapper) ListDatabases(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "kubernetesName" -------------
	var kubernetesName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "kubernetesName", runtime.ParamLocationPath, ctx.Param("kubernetesName"), &kubernetesName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kubernetesName: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListDatabases(ctx, kubernetesName)
	return err
}

// CreateDatabaseCluster converts echo context to params.
func (w *ServerInterfaceWrapper) CreateDatabaseCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "kubernetesName" -------------
	var kubernetesName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "kubernetesName", runtime.ParamLocationPath, ctx.Param("kubernetesName"), &kubernetesName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kubernetesName: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateDatabaseCluster(ctx, kubernetesName)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/kubernetes", wrapper.ListKubernetesClusters)
	router.POST(baseURL+"/kubernetes", wrapper.RegisterKubernetes)
	router.GET(baseURL+"/kubernetes/:kubernetesName/database-cluster", wrapper.ListDatabases)
	router.POST(baseURL+"/kubernetes/:kubernetesName/database-cluster", wrapper.CreateDatabaseCluster)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
