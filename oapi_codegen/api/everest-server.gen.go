// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	. "github.com/gen1us2k/dbaas-poc/oapi_codegen/api/models"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List of registered kubernetes clusters
	// (GET /kubernetes)
	ListKubernetesClusters(ctx echo.Context) error
	// Register Kubernetes cluster in the control plane
	// (POST /kubernetes)
	RegisterKubernetes(ctx echo.Context) error
	// List of created database clusters on provided kubernetes cluster
	// (GET /kubernetes/{kubernetesName}/database-cluster)
	ListDatabases(ctx echo.Context, kubernetesName string) error
	// Create a database cluster on given kubernetes cluster
	// (POST /kubernetes/{kubernetesName}/database-cluster)
	CreateDatabaseCluster(ctx echo.Context, kubernetesName string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListKubernetesClusters converts echo context to params.
func (w *ServerInterfaceWrapper) ListKubernetesClusters(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListKubernetesClusters(ctx)
	return err
}

// RegisterKubernetes converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterKubernetes(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterKubernetes(ctx)
	return err
}

// ListDatabases converts echo context to params.
func (w *ServerInterfaceWrapper) ListDatabases(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "kubernetesName" -------------
	var kubernetesName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "kubernetesName", runtime.ParamLocationPath, ctx.Param("kubernetesName"), &kubernetesName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kubernetesName: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListDatabases(ctx, kubernetesName)
	return err
}

// CreateDatabaseCluster converts echo context to params.
func (w *ServerInterfaceWrapper) CreateDatabaseCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "kubernetesName" -------------
	var kubernetesName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "kubernetesName", runtime.ParamLocationPath, ctx.Param("kubernetesName"), &kubernetesName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kubernetesName: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateDatabaseCluster(ctx, kubernetesName)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/kubernetes", wrapper.ListKubernetesClusters)
	router.POST(baseURL+"/kubernetes", wrapper.RegisterKubernetes)
	router.GET(baseURL+"/kubernetes/:kubernetesName/database-cluster", wrapper.ListDatabases)
	router.POST(baseURL+"/kubernetes/:kubernetesName/database-cluster", wrapper.CreateDatabaseCluster)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
