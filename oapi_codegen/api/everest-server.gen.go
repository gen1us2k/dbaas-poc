// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	. "github.com/gen1us2k/dbaas-poc/oapi_codegen/api/models"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List of registered kubernetes clusters
	// (GET /kubernetes)
	ListKubernetesClusters(ctx echo.Context) error
	// Register Kubernetes cluster in the control plane
	// (POST /kubernetes)
	RegisterKubernetes(ctx echo.Context) error
	// List of created database clusters on provided kubernetes cluster
	// (GET /kubernetes/{kubernetesName}/database-cluster)
	ListDatabases(ctx echo.Context, kubernetesName string) error
	// Create a database cluster on given kubernetes cluster
	// (POST /kubernetes/{kubernetesName}/database-cluster)
	CreateDatabaseCluster(ctx echo.Context, kubernetesName string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListKubernetesClusters converts echo context to params.
func (w *ServerInterfaceWrapper) ListKubernetesClusters(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListKubernetesClusters(ctx)
	return err
}

// RegisterKubernetes converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterKubernetes(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterKubernetes(ctx)
	return err
}

// ListDatabases converts echo context to params.
func (w *ServerInterfaceWrapper) ListDatabases(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "kubernetesName" -------------
	var kubernetesName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "kubernetesName", runtime.ParamLocationPath, ctx.Param("kubernetesName"), &kubernetesName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kubernetesName: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListDatabases(ctx, kubernetesName)
	return err
}

// CreateDatabaseCluster converts echo context to params.
func (w *ServerInterfaceWrapper) CreateDatabaseCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "kubernetesName" -------------
	var kubernetesName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "kubernetesName", runtime.ParamLocationPath, ctx.Param("kubernetesName"), &kubernetesName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kubernetesName: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateDatabaseCluster(ctx, kubernetesName)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/kubernetes", wrapper.ListKubernetesClusters)
	router.POST(baseURL+"/kubernetes", wrapper.RegisterKubernetes)
	router.GET(baseURL+"/kubernetes/:kubernetesName/database-cluster", wrapper.ListDatabases)
	router.POST(baseURL+"/kubernetes/:kubernetesName/database-cluster", wrapper.CreateDatabaseCluster)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
