// Code generated by ogen, DO NOT EDIT.

package oas

import (
	"fmt"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/validate"
)

func (s *DatabaseCluster) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Spec.Set {
			if err := func() error {
				if err := s.Spec.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "spec",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s DatabaseClusterList) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range s {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *DatabaseClusterSpec) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Backup.Set {
			if err := func() error {
				if err := s.Backup.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "backup",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.DbInstance.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "dbInstance",
			Error: err,
		})
	}
	if err := func() error {
		if s.LoadBalancer.Set {
			if err := func() error {
				if err := s.LoadBalancer.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "loadBalancer",
			Error: err,
		})
	}
	if err := func() error {
		if s.Monitoring.Set {
			if err := func() error {
				if err := s.Monitoring.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "monitoring",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *DatabaseClusterSpecBackup) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Resources.Set {
			if err := func() error {
				if err := s.Resources.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "resources",
			Error: err,
		})
	}
	if err := func() error {
		if s.Storages.Set {
			if err := func() error {
				if err := s.Storages.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "storages",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *DatabaseClusterSpecBackupResources) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Limits.Set {
			if err := func() error {
				if err := s.Limits.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "limits",
			Error: err,
		})
	}
	if err := func() error {
		if s.Requests.Set {
			if err := func() error {
				if err := s.Requests.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "requests",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s DatabaseClusterSpecBackupResourcesLimits) Validate() error {
	var failures []validate.FieldError
	for key, elem := range s {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  key,
				Error: err,
			})
		}
	}

	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s DatabaseClusterSpecBackupResourcesLimitsItem) Validate() error {
	switch s.Type {
	case IntDatabaseClusterSpecBackupResourcesLimitsItem:
		return nil // no validation needed
	case StringDatabaseClusterSpecBackupResourcesLimitsItem:
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    0,
			MaxLengthSet: false,
			Email:        false,
			Hostname:     false,
			Regex:        regexMap["^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$"],
		}).Validate(string(s.String)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	default:
		return errors.Errorf("invalid type %q", s.Type)
	}
}

func (s DatabaseClusterSpecBackupResourcesRequests) Validate() error {
	var failures []validate.FieldError
	for key, elem := range s {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  key,
				Error: err,
			})
		}
	}

	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s DatabaseClusterSpecBackupResourcesRequestsItem) Validate() error {
	switch s.Type {
	case IntDatabaseClusterSpecBackupResourcesRequestsItem:
		return nil // no validation needed
	case StringDatabaseClusterSpecBackupResourcesRequestsItem:
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    0,
			MaxLengthSet: false,
			Email:        false,
			Hostname:     false,
			Regex:        regexMap["^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$"],
		}).Validate(string(s.String)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	default:
		return errors.Errorf("invalid type %q", s.Type)
	}
}

func (s DatabaseClusterSpecBackupStorages) Validate() error {
	var failures []validate.FieldError
	for key, elem := range s {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  key,
				Error: err,
			})
		}
	}

	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *DatabaseClusterSpecBackupStoragesItem) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Affinity.Set {
			if err := func() error {
				if err := s.Affinity.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "affinity",
			Error: err,
		})
	}
	if err := func() error {
		if s.Resources.Set {
			if err := func() error {
				if err := s.Resources.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "resources",
			Error: err,
		})
	}
	if err := func() error {
		if s.VolumeSpec.Set {
			if err := func() error {
				if err := s.VolumeSpec.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "volumeSpec",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *DatabaseClusterSpecBackupStoragesItemAffinity) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.NodeAffinity.Set {
			if err := func() error {
				if err := s.NodeAffinity.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "nodeAffinity",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *DatabaseClusterSpecBackupStoragesItemAffinityNodeAffinity) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.RequiredDuringSchedulingIgnoredDuringExecution.Set {
			if err := func() error {
				if err := s.RequiredDuringSchedulingIgnoredDuringExecution.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "requiredDuringSchedulingIgnoredDuringExecution",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *DatabaseClusterSpecBackupStoragesItemAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.NodeSelectorTerms == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "nodeSelectorTerms",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *DatabaseClusterSpecBackupStoragesItemResources) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Limits.Set {
			if err := func() error {
				if err := s.Limits.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "limits",
			Error: err,
		})
	}
	if err := func() error {
		if s.Requests.Set {
			if err := func() error {
				if err := s.Requests.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "requests",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s DatabaseClusterSpecBackupStoragesItemResourcesLimits) Validate() error {
	var failures []validate.FieldError
	for key, elem := range s {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  key,
				Error: err,
			})
		}
	}

	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s DatabaseClusterSpecBackupStoragesItemResourcesLimitsItem) Validate() error {
	switch s.Type {
	case IntDatabaseClusterSpecBackupStoragesItemResourcesLimitsItem:
		return nil // no validation needed
	case StringDatabaseClusterSpecBackupStoragesItemResourcesLimitsItem:
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    0,
			MaxLengthSet: false,
			Email:        false,
			Hostname:     false,
			Regex:        regexMap["^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$"],
		}).Validate(string(s.String)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	default:
		return errors.Errorf("invalid type %q", s.Type)
	}
}

func (s DatabaseClusterSpecBackupStoragesItemResourcesRequests) Validate() error {
	var failures []validate.FieldError
	for key, elem := range s {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  key,
				Error: err,
			})
		}
	}

	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s DatabaseClusterSpecBackupStoragesItemResourcesRequestsItem) Validate() error {
	switch s.Type {
	case IntDatabaseClusterSpecBackupStoragesItemResourcesRequestsItem:
		return nil // no validation needed
	case StringDatabaseClusterSpecBackupStoragesItemResourcesRequestsItem:
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    0,
			MaxLengthSet: false,
			Email:        false,
			Hostname:     false,
			Regex:        regexMap["^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$"],
		}).Validate(string(s.String)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	default:
		return errors.Errorf("invalid type %q", s.Type)
	}
}

func (s *DatabaseClusterSpecBackupStoragesItemVolumeSpec) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.EmptyDir.Set {
			if err := func() error {
				if err := s.EmptyDir.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "emptyDir",
			Error: err,
		})
	}
	if err := func() error {
		if s.PersistentVolumeClaim.Set {
			if err := func() error {
				if err := s.PersistentVolumeClaim.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "persistentVolumeClaim",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *DatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDir) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.SizeLimit.Set {
			if err := func() error {
				if err := s.SizeLimit.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "sizeLimit",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s DatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDirSizeLimit) Validate() error {
	switch s.Type {
	case IntDatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDirSizeLimit:
		return nil // no validation needed
	case StringDatabaseClusterSpecBackupStoragesItemVolumeSpecEmptyDirSizeLimit:
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    0,
			MaxLengthSet: false,
			Email:        false,
			Hostname:     false,
			Regex:        regexMap["^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$"],
		}).Validate(string(s.String)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	default:
		return errors.Errorf("invalid type %q", s.Type)
	}
}

func (s *DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaim) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Resources.Set {
			if err := func() error {
				if err := s.Resources.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "resources",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResources) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Limits.Set {
			if err := func() error {
				if err := s.Limits.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "limits",
			Error: err,
		})
	}
	if err := func() error {
		if s.Requests.Set {
			if err := func() error {
				if err := s.Requests.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "requests",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesLimits) Validate() error {
	var failures []validate.FieldError
	for key, elem := range s {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  key,
				Error: err,
			})
		}
	}

	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesLimitsItem) Validate() error {
	switch s.Type {
	case IntDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesLimitsItem:
		return nil // no validation needed
	case StringDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesLimitsItem:
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    0,
			MaxLengthSet: false,
			Email:        false,
			Hostname:     false,
			Regex:        regexMap["^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$"],
		}).Validate(string(s.String)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	default:
		return errors.Errorf("invalid type %q", s.Type)
	}
}

func (s DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesRequests) Validate() error {
	var failures []validate.FieldError
	for key, elem := range s {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  key,
				Error: err,
			})
		}
	}

	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s DatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesRequestsItem) Validate() error {
	switch s.Type {
	case IntDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesRequestsItem:
		return nil // no validation needed
	case StringDatabaseClusterSpecBackupStoragesItemVolumeSpecPersistentVolumeClaimResourcesRequestsItem:
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    0,
			MaxLengthSet: false,
			Email:        false,
			Hostname:     false,
			Regex:        regexMap["^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$"],
		}).Validate(string(s.String)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	default:
		return errors.Errorf("invalid type %q", s.Type)
	}
}

func (s *DatabaseClusterSpecDbInstance) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.CPU.Set {
			if err := func() error {
				if err := s.CPU.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "cpu",
			Error: err,
		})
	}
	if err := func() error {
		if s.DiskSize.Set {
			if err := func() error {
				if err := s.DiskSize.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "diskSize",
			Error: err,
		})
	}
	if err := func() error {
		if s.Memory.Set {
			if err := func() error {
				if err := s.Memory.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "memory",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s DatabaseClusterSpecDbInstanceCPU) Validate() error {
	switch s.Type {
	case IntDatabaseClusterSpecDbInstanceCPU:
		return nil // no validation needed
	case StringDatabaseClusterSpecDbInstanceCPU:
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    0,
			MaxLengthSet: false,
			Email:        false,
			Hostname:     false,
			Regex:        regexMap["^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$"],
		}).Validate(string(s.String)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	default:
		return errors.Errorf("invalid type %q", s.Type)
	}
}

func (s DatabaseClusterSpecDbInstanceDiskSize) Validate() error {
	switch s.Type {
	case IntDatabaseClusterSpecDbInstanceDiskSize:
		return nil // no validation needed
	case StringDatabaseClusterSpecDbInstanceDiskSize:
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    0,
			MaxLengthSet: false,
			Email:        false,
			Hostname:     false,
			Regex:        regexMap["^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$"],
		}).Validate(string(s.String)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	default:
		return errors.Errorf("invalid type %q", s.Type)
	}
}

func (s DatabaseClusterSpecDbInstanceMemory) Validate() error {
	switch s.Type {
	case IntDatabaseClusterSpecDbInstanceMemory:
		return nil // no validation needed
	case StringDatabaseClusterSpecDbInstanceMemory:
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    0,
			MaxLengthSet: false,
			Email:        false,
			Hostname:     false,
			Regex:        regexMap["^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$"],
		}).Validate(string(s.String)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	default:
		return errors.Errorf("invalid type %q", s.Type)
	}
}

func (s *DatabaseClusterSpecLoadBalancer) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Resources.Set {
			if err := func() error {
				if err := s.Resources.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "resources",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *DatabaseClusterSpecLoadBalancerResources) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Limits.Set {
			if err := func() error {
				if err := s.Limits.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "limits",
			Error: err,
		})
	}
	if err := func() error {
		if s.Requests.Set {
			if err := func() error {
				if err := s.Requests.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "requests",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s DatabaseClusterSpecLoadBalancerResourcesLimits) Validate() error {
	var failures []validate.FieldError
	for key, elem := range s {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  key,
				Error: err,
			})
		}
	}

	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s DatabaseClusterSpecLoadBalancerResourcesLimitsItem) Validate() error {
	switch s.Type {
	case IntDatabaseClusterSpecLoadBalancerResourcesLimitsItem:
		return nil // no validation needed
	case StringDatabaseClusterSpecLoadBalancerResourcesLimitsItem:
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    0,
			MaxLengthSet: false,
			Email:        false,
			Hostname:     false,
			Regex:        regexMap["^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$"],
		}).Validate(string(s.String)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	default:
		return errors.Errorf("invalid type %q", s.Type)
	}
}

func (s DatabaseClusterSpecLoadBalancerResourcesRequests) Validate() error {
	var failures []validate.FieldError
	for key, elem := range s {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  key,
				Error: err,
			})
		}
	}

	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s DatabaseClusterSpecLoadBalancerResourcesRequestsItem) Validate() error {
	switch s.Type {
	case IntDatabaseClusterSpecLoadBalancerResourcesRequestsItem:
		return nil // no validation needed
	case StringDatabaseClusterSpecLoadBalancerResourcesRequestsItem:
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    0,
			MaxLengthSet: false,
			Email:        false,
			Hostname:     false,
			Regex:        regexMap["^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$"],
		}).Validate(string(s.String)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	default:
		return errors.Errorf("invalid type %q", s.Type)
	}
}

func (s *DatabaseClusterSpecMonitoring) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Resources.Set {
			if err := func() error {
				if err := s.Resources.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "resources",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *DatabaseClusterSpecMonitoringResources) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Limits.Set {
			if err := func() error {
				if err := s.Limits.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "limits",
			Error: err,
		})
	}
	if err := func() error {
		if s.Requests.Set {
			if err := func() error {
				if err := s.Requests.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "requests",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s DatabaseClusterSpecMonitoringResourcesLimits) Validate() error {
	var failures []validate.FieldError
	for key, elem := range s {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  key,
				Error: err,
			})
		}
	}

	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s DatabaseClusterSpecMonitoringResourcesLimitsItem) Validate() error {
	switch s.Type {
	case IntDatabaseClusterSpecMonitoringResourcesLimitsItem:
		return nil // no validation needed
	case StringDatabaseClusterSpecMonitoringResourcesLimitsItem:
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    0,
			MaxLengthSet: false,
			Email:        false,
			Hostname:     false,
			Regex:        regexMap["^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$"],
		}).Validate(string(s.String)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	default:
		return errors.Errorf("invalid type %q", s.Type)
	}
}

func (s DatabaseClusterSpecMonitoringResourcesRequests) Validate() error {
	var failures []validate.FieldError
	for key, elem := range s {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  key,
				Error: err,
			})
		}
	}

	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s DatabaseClusterSpecMonitoringResourcesRequestsItem) Validate() error {
	switch s.Type {
	case IntDatabaseClusterSpecMonitoringResourcesRequestsItem:
		return nil // no validation needed
	case StringDatabaseClusterSpecMonitoringResourcesRequestsItem:
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    0,
			MaxLengthSet: false,
			Email:        false,
			Hostname:     false,
			Regex:        regexMap["^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$"],
		}).Validate(string(s.String)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	default:
		return errors.Errorf("invalid type %q", s.Type)
	}
}
