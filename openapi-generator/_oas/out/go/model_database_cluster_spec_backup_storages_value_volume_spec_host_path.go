/*
Percona Everest schema

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DatabaseClusterSpecBackupStoragesValueVolumeSpecHostPath type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatabaseClusterSpecBackupStoragesValueVolumeSpecHostPath{}

// DatabaseClusterSpecBackupStoragesValueVolumeSpecHostPath HostPath to use as data volume for mysql. HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container.
type DatabaseClusterSpecBackupStoragesValueVolumeSpecHostPath struct {
	// path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
	Path string `json:"path"`
	// type for HostPath Volume Defaults to \"\" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
	Type *string `json:"type,omitempty"`
}

// NewDatabaseClusterSpecBackupStoragesValueVolumeSpecHostPath instantiates a new DatabaseClusterSpecBackupStoragesValueVolumeSpecHostPath object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatabaseClusterSpecBackupStoragesValueVolumeSpecHostPath(path string) *DatabaseClusterSpecBackupStoragesValueVolumeSpecHostPath {
	this := DatabaseClusterSpecBackupStoragesValueVolumeSpecHostPath{}
	this.Path = path
	return &this
}

// NewDatabaseClusterSpecBackupStoragesValueVolumeSpecHostPathWithDefaults instantiates a new DatabaseClusterSpecBackupStoragesValueVolumeSpecHostPath object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatabaseClusterSpecBackupStoragesValueVolumeSpecHostPathWithDefaults() *DatabaseClusterSpecBackupStoragesValueVolumeSpecHostPath {
	this := DatabaseClusterSpecBackupStoragesValueVolumeSpecHostPath{}
	return &this
}

// GetPath returns the Path field value
func (o *DatabaseClusterSpecBackupStoragesValueVolumeSpecHostPath) GetPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *DatabaseClusterSpecBackupStoragesValueVolumeSpecHostPath) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Path, true
}

// SetPath sets field value
func (o *DatabaseClusterSpecBackupStoragesValueVolumeSpecHostPath) SetPath(v string) {
	o.Path = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *DatabaseClusterSpecBackupStoragesValueVolumeSpecHostPath) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseClusterSpecBackupStoragesValueVolumeSpecHostPath) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *DatabaseClusterSpecBackupStoragesValueVolumeSpecHostPath) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *DatabaseClusterSpecBackupStoragesValueVolumeSpecHostPath) SetType(v string) {
	o.Type = &v
}

func (o DatabaseClusterSpecBackupStoragesValueVolumeSpecHostPath) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatabaseClusterSpecBackupStoragesValueVolumeSpecHostPath) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["path"] = o.Path
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableDatabaseClusterSpecBackupStoragesValueVolumeSpecHostPath struct {
	value *DatabaseClusterSpecBackupStoragesValueVolumeSpecHostPath
	isSet bool
}

func (v NullableDatabaseClusterSpecBackupStoragesValueVolumeSpecHostPath) Get() *DatabaseClusterSpecBackupStoragesValueVolumeSpecHostPath {
	return v.value
}

func (v *NullableDatabaseClusterSpecBackupStoragesValueVolumeSpecHostPath) Set(val *DatabaseClusterSpecBackupStoragesValueVolumeSpecHostPath) {
	v.value = val
	v.isSet = true
}

func (v NullableDatabaseClusterSpecBackupStoragesValueVolumeSpecHostPath) IsSet() bool {
	return v.isSet
}

func (v *NullableDatabaseClusterSpecBackupStoragesValueVolumeSpecHostPath) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatabaseClusterSpecBackupStoragesValueVolumeSpecHostPath(val *DatabaseClusterSpecBackupStoragesValueVolumeSpecHostPath) *NullableDatabaseClusterSpecBackupStoragesValueVolumeSpecHostPath {
	return &NullableDatabaseClusterSpecBackupStoragesValueVolumeSpecHostPath{value: val, isSet: true}
}

func (v NullableDatabaseClusterSpecBackupStoragesValueVolumeSpecHostPath) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatabaseClusterSpecBackupStoragesValueVolumeSpecHostPath) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


