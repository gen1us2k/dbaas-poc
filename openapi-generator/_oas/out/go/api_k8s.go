/*
Percona Everest schema

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type K8sAPI interface {

	/*
	CreateDatabaseCluster Create a database cluster on given kubernetes cluster

	Create a database cluster on given kubernetes cluster

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param kubernetesName Name of kubernetes Cluster
	@return ApiCreateDatabaseClusterRequest
	*/
	CreateDatabaseCluster(ctx context.Context, kubernetesName string) ApiCreateDatabaseClusterRequest

	// CreateDatabaseClusterExecute executes the request
	//  @return DatabaseCluster
	CreateDatabaseClusterExecute(r ApiCreateDatabaseClusterRequest) (*DatabaseCluster, *http.Response, error)

	/*
	ListDatabases List of created database clusters on provided kubernetes cluster

	List of created database clusters on provided kubernetes cluster

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param kubernetesName Name of kubernetes Cluster
	@return ApiListDatabasesRequest
	*/
	ListDatabases(ctx context.Context, kubernetesName string) ApiListDatabasesRequest

	// ListDatabasesExecute executes the request
	//  @return []DatabaseCluster
	ListDatabasesExecute(r ApiListDatabasesRequest) ([]DatabaseCluster, *http.Response, error)

	/*
	ListKubernetesClusters List of registered kubernetes clusters

	List of registered kubernetes clusters

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiListKubernetesClustersRequest
	*/
	ListKubernetesClusters(ctx context.Context) ApiListKubernetesClustersRequest

	// ListKubernetesClustersExecute executes the request
	//  @return KubernetesCluster
	ListKubernetesClustersExecute(r ApiListKubernetesClustersRequest) (*KubernetesCluster, *http.Response, error)

	/*
	RegisterKubernetes Register Kubernetes cluster in the control plane

	Register Kubernetes cluster in the control plane

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiRegisterKubernetesRequest
	*/
	RegisterKubernetes(ctx context.Context) ApiRegisterKubernetesRequest

	// RegisterKubernetesExecute executes the request
	//  @return KubernetesCluster
	RegisterKubernetesExecute(r ApiRegisterKubernetesRequest) (*KubernetesCluster, *http.Response, error)
}

// K8sAPIService K8sAPI service
type K8sAPIService service

type ApiCreateDatabaseClusterRequest struct {
	ctx context.Context
	ApiService K8sAPI
	kubernetesName string
	databaseCluster *DatabaseCluster
}

// Register a new kubernetes cluster in the control plane
func (r ApiCreateDatabaseClusterRequest) DatabaseCluster(databaseCluster DatabaseCluster) ApiCreateDatabaseClusterRequest {
	r.databaseCluster = &databaseCluster
	return r
}

func (r ApiCreateDatabaseClusterRequest) Execute() (*DatabaseCluster, *http.Response, error) {
	return r.ApiService.CreateDatabaseClusterExecute(r)
}

/*
CreateDatabaseCluster Create a database cluster on given kubernetes cluster

Create a database cluster on given kubernetes cluster

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param kubernetesName Name of kubernetes Cluster
 @return ApiCreateDatabaseClusterRequest
*/
func (a *K8sAPIService) CreateDatabaseCluster(ctx context.Context, kubernetesName string) ApiCreateDatabaseClusterRequest {
	return ApiCreateDatabaseClusterRequest{
		ApiService: a,
		ctx: ctx,
		kubernetesName: kubernetesName,
	}
}

// Execute executes the request
//  @return DatabaseCluster
func (a *K8sAPIService) CreateDatabaseClusterExecute(r ApiCreateDatabaseClusterRequest) (*DatabaseCluster, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DatabaseCluster
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "K8sAPIService.CreateDatabaseCluster")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/kubernetes/{kubernetesName}/database-cluster"
	localVarPath = strings.Replace(localVarPath, "{"+"kubernetesName"+"}", url.PathEscape(parameterValueToString(r.kubernetesName, "kubernetesName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.databaseCluster == nil {
		return localVarReturnValue, nil, reportError("databaseCluster is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.databaseCluster
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v BadRequest
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListDatabasesRequest struct {
	ctx context.Context
	ApiService K8sAPI
	kubernetesName string
}

func (r ApiListDatabasesRequest) Execute() ([]DatabaseCluster, *http.Response, error) {
	return r.ApiService.ListDatabasesExecute(r)
}

/*
ListDatabases List of created database clusters on provided kubernetes cluster

List of created database clusters on provided kubernetes cluster

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param kubernetesName Name of kubernetes Cluster
 @return ApiListDatabasesRequest
*/
func (a *K8sAPIService) ListDatabases(ctx context.Context, kubernetesName string) ApiListDatabasesRequest {
	return ApiListDatabasesRequest{
		ApiService: a,
		ctx: ctx,
		kubernetesName: kubernetesName,
	}
}

// Execute executes the request
//  @return []DatabaseCluster
func (a *K8sAPIService) ListDatabasesExecute(r ApiListDatabasesRequest) ([]DatabaseCluster, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []DatabaseCluster
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "K8sAPIService.ListDatabases")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/kubernetes/{kubernetesName}/database-cluster"
	localVarPath = strings.Replace(localVarPath, "{"+"kubernetesName"+"}", url.PathEscape(parameterValueToString(r.kubernetesName, "kubernetesName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v BadRequest
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListKubernetesClustersRequest struct {
	ctx context.Context
	ApiService K8sAPI
}

func (r ApiListKubernetesClustersRequest) Execute() (*KubernetesCluster, *http.Response, error) {
	return r.ApiService.ListKubernetesClustersExecute(r)
}

/*
ListKubernetesClusters List of registered kubernetes clusters

List of registered kubernetes clusters

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListKubernetesClustersRequest
*/
func (a *K8sAPIService) ListKubernetesClusters(ctx context.Context) ApiListKubernetesClustersRequest {
	return ApiListKubernetesClustersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KubernetesCluster
func (a *K8sAPIService) ListKubernetesClustersExecute(r ApiListKubernetesClustersRequest) (*KubernetesCluster, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KubernetesCluster
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "K8sAPIService.ListKubernetesClusters")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/kubernetes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v BadRequest
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRegisterKubernetesRequest struct {
	ctx context.Context
	ApiService K8sAPI
	kubernetesCluster *KubernetesCluster
}

// Register a new kubernetes cluster in the control plane
func (r ApiRegisterKubernetesRequest) KubernetesCluster(kubernetesCluster KubernetesCluster) ApiRegisterKubernetesRequest {
	r.kubernetesCluster = &kubernetesCluster
	return r
}

func (r ApiRegisterKubernetesRequest) Execute() (*KubernetesCluster, *http.Response, error) {
	return r.ApiService.RegisterKubernetesExecute(r)
}

/*
RegisterKubernetes Register Kubernetes cluster in the control plane

Register Kubernetes cluster in the control plane

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiRegisterKubernetesRequest
*/
func (a *K8sAPIService) RegisterKubernetes(ctx context.Context) ApiRegisterKubernetesRequest {
	return ApiRegisterKubernetesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KubernetesCluster
func (a *K8sAPIService) RegisterKubernetesExecute(r ApiRegisterKubernetesRequest) (*KubernetesCluster, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KubernetesCluster
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "K8sAPIService.RegisterKubernetes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/kubernetes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.kubernetesCluster == nil {
		return localVarReturnValue, nil, reportError("kubernetesCluster is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.kubernetesCluster
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v BadRequest
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
