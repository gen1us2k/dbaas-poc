/*
Percona Everest schema

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DatabaseClusterSpecBackup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatabaseClusterSpecBackup{}

// DatabaseClusterSpecBackup Backup contains backup settings.
type DatabaseClusterSpecBackup struct {
	Annotations *map[string]string `json:"annotations,omitempty"`
	ContainerSecurityContext *DatabaseClusterSpecBackupContainerSecurityContext `json:"containerSecurityContext,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
	Image *string `json:"image,omitempty"`
	// PullPolicy describes a policy for if/when to pull a container image
	ImagePullPolicy *string `json:"imagePullPolicy,omitempty"`
	ImagePullSecrets []DatabaseClusterSpecBackupImagePullSecretsInner `json:"imagePullSecrets,omitempty"`
	InitImage *string `json:"initImage,omitempty"`
	Labels *map[string]string `json:"labels,omitempty"`
	Resources *DatabaseClusterSpecBackupResources `json:"resources,omitempty"`
	Schedule []DatabaseClusterSpecBackupScheduleInner `json:"schedule,omitempty"`
	ServiceAccountName *string `json:"serviceAccountName,omitempty"`
	Storages *map[string]DatabaseClusterSpecBackupStoragesValue `json:"storages,omitempty"`
}

// NewDatabaseClusterSpecBackup instantiates a new DatabaseClusterSpecBackup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatabaseClusterSpecBackup() *DatabaseClusterSpecBackup {
	this := DatabaseClusterSpecBackup{}
	return &this
}

// NewDatabaseClusterSpecBackupWithDefaults instantiates a new DatabaseClusterSpecBackup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatabaseClusterSpecBackupWithDefaults() *DatabaseClusterSpecBackup {
	this := DatabaseClusterSpecBackup{}
	return &this
}

// GetAnnotations returns the Annotations field value if set, zero value otherwise.
func (o *DatabaseClusterSpecBackup) GetAnnotations() map[string]string {
	if o == nil || IsNil(o.Annotations) {
		var ret map[string]string
		return ret
	}
	return *o.Annotations
}

// GetAnnotationsOk returns a tuple with the Annotations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseClusterSpecBackup) GetAnnotationsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Annotations) {
		return nil, false
	}
	return o.Annotations, true
}

// HasAnnotations returns a boolean if a field has been set.
func (o *DatabaseClusterSpecBackup) HasAnnotations() bool {
	if o != nil && !IsNil(o.Annotations) {
		return true
	}

	return false
}

// SetAnnotations gets a reference to the given map[string]string and assigns it to the Annotations field.
func (o *DatabaseClusterSpecBackup) SetAnnotations(v map[string]string) {
	o.Annotations = &v
}

// GetContainerSecurityContext returns the ContainerSecurityContext field value if set, zero value otherwise.
func (o *DatabaseClusterSpecBackup) GetContainerSecurityContext() DatabaseClusterSpecBackupContainerSecurityContext {
	if o == nil || IsNil(o.ContainerSecurityContext) {
		var ret DatabaseClusterSpecBackupContainerSecurityContext
		return ret
	}
	return *o.ContainerSecurityContext
}

// GetContainerSecurityContextOk returns a tuple with the ContainerSecurityContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseClusterSpecBackup) GetContainerSecurityContextOk() (*DatabaseClusterSpecBackupContainerSecurityContext, bool) {
	if o == nil || IsNil(o.ContainerSecurityContext) {
		return nil, false
	}
	return o.ContainerSecurityContext, true
}

// HasContainerSecurityContext returns a boolean if a field has been set.
func (o *DatabaseClusterSpecBackup) HasContainerSecurityContext() bool {
	if o != nil && !IsNil(o.ContainerSecurityContext) {
		return true
	}

	return false
}

// SetContainerSecurityContext gets a reference to the given DatabaseClusterSpecBackupContainerSecurityContext and assigns it to the ContainerSecurityContext field.
func (o *DatabaseClusterSpecBackup) SetContainerSecurityContext(v DatabaseClusterSpecBackupContainerSecurityContext) {
	o.ContainerSecurityContext = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *DatabaseClusterSpecBackup) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseClusterSpecBackup) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *DatabaseClusterSpecBackup) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *DatabaseClusterSpecBackup) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetImage returns the Image field value if set, zero value otherwise.
func (o *DatabaseClusterSpecBackup) GetImage() string {
	if o == nil || IsNil(o.Image) {
		var ret string
		return ret
	}
	return *o.Image
}

// GetImageOk returns a tuple with the Image field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseClusterSpecBackup) GetImageOk() (*string, bool) {
	if o == nil || IsNil(o.Image) {
		return nil, false
	}
	return o.Image, true
}

// HasImage returns a boolean if a field has been set.
func (o *DatabaseClusterSpecBackup) HasImage() bool {
	if o != nil && !IsNil(o.Image) {
		return true
	}

	return false
}

// SetImage gets a reference to the given string and assigns it to the Image field.
func (o *DatabaseClusterSpecBackup) SetImage(v string) {
	o.Image = &v
}

// GetImagePullPolicy returns the ImagePullPolicy field value if set, zero value otherwise.
func (o *DatabaseClusterSpecBackup) GetImagePullPolicy() string {
	if o == nil || IsNil(o.ImagePullPolicy) {
		var ret string
		return ret
	}
	return *o.ImagePullPolicy
}

// GetImagePullPolicyOk returns a tuple with the ImagePullPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseClusterSpecBackup) GetImagePullPolicyOk() (*string, bool) {
	if o == nil || IsNil(o.ImagePullPolicy) {
		return nil, false
	}
	return o.ImagePullPolicy, true
}

// HasImagePullPolicy returns a boolean if a field has been set.
func (o *DatabaseClusterSpecBackup) HasImagePullPolicy() bool {
	if o != nil && !IsNil(o.ImagePullPolicy) {
		return true
	}

	return false
}

// SetImagePullPolicy gets a reference to the given string and assigns it to the ImagePullPolicy field.
func (o *DatabaseClusterSpecBackup) SetImagePullPolicy(v string) {
	o.ImagePullPolicy = &v
}

// GetImagePullSecrets returns the ImagePullSecrets field value if set, zero value otherwise.
func (o *DatabaseClusterSpecBackup) GetImagePullSecrets() []DatabaseClusterSpecBackupImagePullSecretsInner {
	if o == nil || IsNil(o.ImagePullSecrets) {
		var ret []DatabaseClusterSpecBackupImagePullSecretsInner
		return ret
	}
	return o.ImagePullSecrets
}

// GetImagePullSecretsOk returns a tuple with the ImagePullSecrets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseClusterSpecBackup) GetImagePullSecretsOk() ([]DatabaseClusterSpecBackupImagePullSecretsInner, bool) {
	if o == nil || IsNil(o.ImagePullSecrets) {
		return nil, false
	}
	return o.ImagePullSecrets, true
}

// HasImagePullSecrets returns a boolean if a field has been set.
func (o *DatabaseClusterSpecBackup) HasImagePullSecrets() bool {
	if o != nil && !IsNil(o.ImagePullSecrets) {
		return true
	}

	return false
}

// SetImagePullSecrets gets a reference to the given []DatabaseClusterSpecBackupImagePullSecretsInner and assigns it to the ImagePullSecrets field.
func (o *DatabaseClusterSpecBackup) SetImagePullSecrets(v []DatabaseClusterSpecBackupImagePullSecretsInner) {
	o.ImagePullSecrets = v
}

// GetInitImage returns the InitImage field value if set, zero value otherwise.
func (o *DatabaseClusterSpecBackup) GetInitImage() string {
	if o == nil || IsNil(o.InitImage) {
		var ret string
		return ret
	}
	return *o.InitImage
}

// GetInitImageOk returns a tuple with the InitImage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseClusterSpecBackup) GetInitImageOk() (*string, bool) {
	if o == nil || IsNil(o.InitImage) {
		return nil, false
	}
	return o.InitImage, true
}

// HasInitImage returns a boolean if a field has been set.
func (o *DatabaseClusterSpecBackup) HasInitImage() bool {
	if o != nil && !IsNil(o.InitImage) {
		return true
	}

	return false
}

// SetInitImage gets a reference to the given string and assigns it to the InitImage field.
func (o *DatabaseClusterSpecBackup) SetInitImage(v string) {
	o.InitImage = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *DatabaseClusterSpecBackup) GetLabels() map[string]string {
	if o == nil || IsNil(o.Labels) {
		var ret map[string]string
		return ret
	}
	return *o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseClusterSpecBackup) GetLabelsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *DatabaseClusterSpecBackup) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given map[string]string and assigns it to the Labels field.
func (o *DatabaseClusterSpecBackup) SetLabels(v map[string]string) {
	o.Labels = &v
}

// GetResources returns the Resources field value if set, zero value otherwise.
func (o *DatabaseClusterSpecBackup) GetResources() DatabaseClusterSpecBackupResources {
	if o == nil || IsNil(o.Resources) {
		var ret DatabaseClusterSpecBackupResources
		return ret
	}
	return *o.Resources
}

// GetResourcesOk returns a tuple with the Resources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseClusterSpecBackup) GetResourcesOk() (*DatabaseClusterSpecBackupResources, bool) {
	if o == nil || IsNil(o.Resources) {
		return nil, false
	}
	return o.Resources, true
}

// HasResources returns a boolean if a field has been set.
func (o *DatabaseClusterSpecBackup) HasResources() bool {
	if o != nil && !IsNil(o.Resources) {
		return true
	}

	return false
}

// SetResources gets a reference to the given DatabaseClusterSpecBackupResources and assigns it to the Resources field.
func (o *DatabaseClusterSpecBackup) SetResources(v DatabaseClusterSpecBackupResources) {
	o.Resources = &v
}

// GetSchedule returns the Schedule field value if set, zero value otherwise.
func (o *DatabaseClusterSpecBackup) GetSchedule() []DatabaseClusterSpecBackupScheduleInner {
	if o == nil || IsNil(o.Schedule) {
		var ret []DatabaseClusterSpecBackupScheduleInner
		return ret
	}
	return o.Schedule
}

// GetScheduleOk returns a tuple with the Schedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseClusterSpecBackup) GetScheduleOk() ([]DatabaseClusterSpecBackupScheduleInner, bool) {
	if o == nil || IsNil(o.Schedule) {
		return nil, false
	}
	return o.Schedule, true
}

// HasSchedule returns a boolean if a field has been set.
func (o *DatabaseClusterSpecBackup) HasSchedule() bool {
	if o != nil && !IsNil(o.Schedule) {
		return true
	}

	return false
}

// SetSchedule gets a reference to the given []DatabaseClusterSpecBackupScheduleInner and assigns it to the Schedule field.
func (o *DatabaseClusterSpecBackup) SetSchedule(v []DatabaseClusterSpecBackupScheduleInner) {
	o.Schedule = v
}

// GetServiceAccountName returns the ServiceAccountName field value if set, zero value otherwise.
func (o *DatabaseClusterSpecBackup) GetServiceAccountName() string {
	if o == nil || IsNil(o.ServiceAccountName) {
		var ret string
		return ret
	}
	return *o.ServiceAccountName
}

// GetServiceAccountNameOk returns a tuple with the ServiceAccountName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseClusterSpecBackup) GetServiceAccountNameOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceAccountName) {
		return nil, false
	}
	return o.ServiceAccountName, true
}

// HasServiceAccountName returns a boolean if a field has been set.
func (o *DatabaseClusterSpecBackup) HasServiceAccountName() bool {
	if o != nil && !IsNil(o.ServiceAccountName) {
		return true
	}

	return false
}

// SetServiceAccountName gets a reference to the given string and assigns it to the ServiceAccountName field.
func (o *DatabaseClusterSpecBackup) SetServiceAccountName(v string) {
	o.ServiceAccountName = &v
}

// GetStorages returns the Storages field value if set, zero value otherwise.
func (o *DatabaseClusterSpecBackup) GetStorages() map[string]DatabaseClusterSpecBackupStoragesValue {
	if o == nil || IsNil(o.Storages) {
		var ret map[string]DatabaseClusterSpecBackupStoragesValue
		return ret
	}
	return *o.Storages
}

// GetStoragesOk returns a tuple with the Storages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseClusterSpecBackup) GetStoragesOk() (*map[string]DatabaseClusterSpecBackupStoragesValue, bool) {
	if o == nil || IsNil(o.Storages) {
		return nil, false
	}
	return o.Storages, true
}

// HasStorages returns a boolean if a field has been set.
func (o *DatabaseClusterSpecBackup) HasStorages() bool {
	if o != nil && !IsNil(o.Storages) {
		return true
	}

	return false
}

// SetStorages gets a reference to the given map[string]DatabaseClusterSpecBackupStoragesValue and assigns it to the Storages field.
func (o *DatabaseClusterSpecBackup) SetStorages(v map[string]DatabaseClusterSpecBackupStoragesValue) {
	o.Storages = &v
}

func (o DatabaseClusterSpecBackup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatabaseClusterSpecBackup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Annotations) {
		toSerialize["annotations"] = o.Annotations
	}
	if !IsNil(o.ContainerSecurityContext) {
		toSerialize["containerSecurityContext"] = o.ContainerSecurityContext
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Image) {
		toSerialize["image"] = o.Image
	}
	if !IsNil(o.ImagePullPolicy) {
		toSerialize["imagePullPolicy"] = o.ImagePullPolicy
	}
	if !IsNil(o.ImagePullSecrets) {
		toSerialize["imagePullSecrets"] = o.ImagePullSecrets
	}
	if !IsNil(o.InitImage) {
		toSerialize["initImage"] = o.InitImage
	}
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	if !IsNil(o.Resources) {
		toSerialize["resources"] = o.Resources
	}
	if !IsNil(o.Schedule) {
		toSerialize["schedule"] = o.Schedule
	}
	if !IsNil(o.ServiceAccountName) {
		toSerialize["serviceAccountName"] = o.ServiceAccountName
	}
	if !IsNil(o.Storages) {
		toSerialize["storages"] = o.Storages
	}
	return toSerialize, nil
}

type NullableDatabaseClusterSpecBackup struct {
	value *DatabaseClusterSpecBackup
	isSet bool
}

func (v NullableDatabaseClusterSpecBackup) Get() *DatabaseClusterSpecBackup {
	return v.value
}

func (v *NullableDatabaseClusterSpecBackup) Set(val *DatabaseClusterSpecBackup) {
	v.value = val
	v.isSet = true
}

func (v NullableDatabaseClusterSpecBackup) IsSet() bool {
	return v.isSet
}

func (v *NullableDatabaseClusterSpecBackup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatabaseClusterSpecBackup(val *DatabaseClusterSpecBackup) *NullableDatabaseClusterSpecBackup {
	return &NullableDatabaseClusterSpecBackup{value: val, isSet: true}
}

func (v NullableDatabaseClusterSpecBackup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatabaseClusterSpecBackup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


