/*
Percona Everest schema

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DatabaseClusterSpecBackupStoragesValueVolumeSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatabaseClusterSpecBackupStoragesValueVolumeSpec{}

// DatabaseClusterSpecBackupStoragesValueVolumeSpec VolumeSpec represents a specification to configure volume for underlying database.
type DatabaseClusterSpecBackupStoragesValueVolumeSpec struct {
	EmptyDir *DatabaseClusterSpecBackupStoragesValueVolumeSpecEmptyDir `json:"emptyDir,omitempty"`
	HostPath *DatabaseClusterSpecBackupStoragesValueVolumeSpecHostPath `json:"hostPath,omitempty"`
	PersistentVolumeClaim *DatabaseClusterSpecBackupStoragesValueVolumeSpecPersistentVolumeClaim `json:"persistentVolumeClaim,omitempty"`
}

// NewDatabaseClusterSpecBackupStoragesValueVolumeSpec instantiates a new DatabaseClusterSpecBackupStoragesValueVolumeSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatabaseClusterSpecBackupStoragesValueVolumeSpec() *DatabaseClusterSpecBackupStoragesValueVolumeSpec {
	this := DatabaseClusterSpecBackupStoragesValueVolumeSpec{}
	return &this
}

// NewDatabaseClusterSpecBackupStoragesValueVolumeSpecWithDefaults instantiates a new DatabaseClusterSpecBackupStoragesValueVolumeSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatabaseClusterSpecBackupStoragesValueVolumeSpecWithDefaults() *DatabaseClusterSpecBackupStoragesValueVolumeSpec {
	this := DatabaseClusterSpecBackupStoragesValueVolumeSpec{}
	return &this
}

// GetEmptyDir returns the EmptyDir field value if set, zero value otherwise.
func (o *DatabaseClusterSpecBackupStoragesValueVolumeSpec) GetEmptyDir() DatabaseClusterSpecBackupStoragesValueVolumeSpecEmptyDir {
	if o == nil || IsNil(o.EmptyDir) {
		var ret DatabaseClusterSpecBackupStoragesValueVolumeSpecEmptyDir
		return ret
	}
	return *o.EmptyDir
}

// GetEmptyDirOk returns a tuple with the EmptyDir field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseClusterSpecBackupStoragesValueVolumeSpec) GetEmptyDirOk() (*DatabaseClusterSpecBackupStoragesValueVolumeSpecEmptyDir, bool) {
	if o == nil || IsNil(o.EmptyDir) {
		return nil, false
	}
	return o.EmptyDir, true
}

// HasEmptyDir returns a boolean if a field has been set.
func (o *DatabaseClusterSpecBackupStoragesValueVolumeSpec) HasEmptyDir() bool {
	if o != nil && !IsNil(o.EmptyDir) {
		return true
	}

	return false
}

// SetEmptyDir gets a reference to the given DatabaseClusterSpecBackupStoragesValueVolumeSpecEmptyDir and assigns it to the EmptyDir field.
func (o *DatabaseClusterSpecBackupStoragesValueVolumeSpec) SetEmptyDir(v DatabaseClusterSpecBackupStoragesValueVolumeSpecEmptyDir) {
	o.EmptyDir = &v
}

// GetHostPath returns the HostPath field value if set, zero value otherwise.
func (o *DatabaseClusterSpecBackupStoragesValueVolumeSpec) GetHostPath() DatabaseClusterSpecBackupStoragesValueVolumeSpecHostPath {
	if o == nil || IsNil(o.HostPath) {
		var ret DatabaseClusterSpecBackupStoragesValueVolumeSpecHostPath
		return ret
	}
	return *o.HostPath
}

// GetHostPathOk returns a tuple with the HostPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseClusterSpecBackupStoragesValueVolumeSpec) GetHostPathOk() (*DatabaseClusterSpecBackupStoragesValueVolumeSpecHostPath, bool) {
	if o == nil || IsNil(o.HostPath) {
		return nil, false
	}
	return o.HostPath, true
}

// HasHostPath returns a boolean if a field has been set.
func (o *DatabaseClusterSpecBackupStoragesValueVolumeSpec) HasHostPath() bool {
	if o != nil && !IsNil(o.HostPath) {
		return true
	}

	return false
}

// SetHostPath gets a reference to the given DatabaseClusterSpecBackupStoragesValueVolumeSpecHostPath and assigns it to the HostPath field.
func (o *DatabaseClusterSpecBackupStoragesValueVolumeSpec) SetHostPath(v DatabaseClusterSpecBackupStoragesValueVolumeSpecHostPath) {
	o.HostPath = &v
}

// GetPersistentVolumeClaim returns the PersistentVolumeClaim field value if set, zero value otherwise.
func (o *DatabaseClusterSpecBackupStoragesValueVolumeSpec) GetPersistentVolumeClaim() DatabaseClusterSpecBackupStoragesValueVolumeSpecPersistentVolumeClaim {
	if o == nil || IsNil(o.PersistentVolumeClaim) {
		var ret DatabaseClusterSpecBackupStoragesValueVolumeSpecPersistentVolumeClaim
		return ret
	}
	return *o.PersistentVolumeClaim
}

// GetPersistentVolumeClaimOk returns a tuple with the PersistentVolumeClaim field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseClusterSpecBackupStoragesValueVolumeSpec) GetPersistentVolumeClaimOk() (*DatabaseClusterSpecBackupStoragesValueVolumeSpecPersistentVolumeClaim, bool) {
	if o == nil || IsNil(o.PersistentVolumeClaim) {
		return nil, false
	}
	return o.PersistentVolumeClaim, true
}

// HasPersistentVolumeClaim returns a boolean if a field has been set.
func (o *DatabaseClusterSpecBackupStoragesValueVolumeSpec) HasPersistentVolumeClaim() bool {
	if o != nil && !IsNil(o.PersistentVolumeClaim) {
		return true
	}

	return false
}

// SetPersistentVolumeClaim gets a reference to the given DatabaseClusterSpecBackupStoragesValueVolumeSpecPersistentVolumeClaim and assigns it to the PersistentVolumeClaim field.
func (o *DatabaseClusterSpecBackupStoragesValueVolumeSpec) SetPersistentVolumeClaim(v DatabaseClusterSpecBackupStoragesValueVolumeSpecPersistentVolumeClaim) {
	o.PersistentVolumeClaim = &v
}

func (o DatabaseClusterSpecBackupStoragesValueVolumeSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatabaseClusterSpecBackupStoragesValueVolumeSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EmptyDir) {
		toSerialize["emptyDir"] = o.EmptyDir
	}
	if !IsNil(o.HostPath) {
		toSerialize["hostPath"] = o.HostPath
	}
	if !IsNil(o.PersistentVolumeClaim) {
		toSerialize["persistentVolumeClaim"] = o.PersistentVolumeClaim
	}
	return toSerialize, nil
}

type NullableDatabaseClusterSpecBackupStoragesValueVolumeSpec struct {
	value *DatabaseClusterSpecBackupStoragesValueVolumeSpec
	isSet bool
}

func (v NullableDatabaseClusterSpecBackupStoragesValueVolumeSpec) Get() *DatabaseClusterSpecBackupStoragesValueVolumeSpec {
	return v.value
}

func (v *NullableDatabaseClusterSpecBackupStoragesValueVolumeSpec) Set(val *DatabaseClusterSpecBackupStoragesValueVolumeSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableDatabaseClusterSpecBackupStoragesValueVolumeSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableDatabaseClusterSpecBackupStoragesValueVolumeSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatabaseClusterSpecBackupStoragesValueVolumeSpec(val *DatabaseClusterSpecBackupStoragesValueVolumeSpec) *NullableDatabaseClusterSpecBackupStoragesValueVolumeSpec {
	return &NullableDatabaseClusterSpecBackupStoragesValueVolumeSpec{value: val, isSet: true}
}

func (v NullableDatabaseClusterSpecBackupStoragesValueVolumeSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatabaseClusterSpecBackupStoragesValueVolumeSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


