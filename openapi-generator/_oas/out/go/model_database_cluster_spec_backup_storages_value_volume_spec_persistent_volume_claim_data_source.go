/*
Percona Everest schema

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DatabaseClusterSpecBackupStoragesValueVolumeSpecPersistentVolumeClaimDataSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatabaseClusterSpecBackupStoragesValueVolumeSpecPersistentVolumeClaimDataSource{}

// DatabaseClusterSpecBackupStoragesValueVolumeSpecPersistentVolumeClaimDataSource dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource.
type DatabaseClusterSpecBackupStoragesValueVolumeSpecPersistentVolumeClaimDataSource struct {
	// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
	ApiGroup *string `json:"apiGroup,omitempty"`
	// Kind is the type of resource being referenced
	Kind string `json:"kind"`
	// Name is the name of resource being referenced
	Name string `json:"name"`
}

// NewDatabaseClusterSpecBackupStoragesValueVolumeSpecPersistentVolumeClaimDataSource instantiates a new DatabaseClusterSpecBackupStoragesValueVolumeSpecPersistentVolumeClaimDataSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatabaseClusterSpecBackupStoragesValueVolumeSpecPersistentVolumeClaimDataSource(kind string, name string) *DatabaseClusterSpecBackupStoragesValueVolumeSpecPersistentVolumeClaimDataSource {
	this := DatabaseClusterSpecBackupStoragesValueVolumeSpecPersistentVolumeClaimDataSource{}
	this.Kind = kind
	this.Name = name
	return &this
}

// NewDatabaseClusterSpecBackupStoragesValueVolumeSpecPersistentVolumeClaimDataSourceWithDefaults instantiates a new DatabaseClusterSpecBackupStoragesValueVolumeSpecPersistentVolumeClaimDataSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatabaseClusterSpecBackupStoragesValueVolumeSpecPersistentVolumeClaimDataSourceWithDefaults() *DatabaseClusterSpecBackupStoragesValueVolumeSpecPersistentVolumeClaimDataSource {
	this := DatabaseClusterSpecBackupStoragesValueVolumeSpecPersistentVolumeClaimDataSource{}
	return &this
}

// GetApiGroup returns the ApiGroup field value if set, zero value otherwise.
func (o *DatabaseClusterSpecBackupStoragesValueVolumeSpecPersistentVolumeClaimDataSource) GetApiGroup() string {
	if o == nil || IsNil(o.ApiGroup) {
		var ret string
		return ret
	}
	return *o.ApiGroup
}

// GetApiGroupOk returns a tuple with the ApiGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseClusterSpecBackupStoragesValueVolumeSpecPersistentVolumeClaimDataSource) GetApiGroupOk() (*string, bool) {
	if o == nil || IsNil(o.ApiGroup) {
		return nil, false
	}
	return o.ApiGroup, true
}

// HasApiGroup returns a boolean if a field has been set.
func (o *DatabaseClusterSpecBackupStoragesValueVolumeSpecPersistentVolumeClaimDataSource) HasApiGroup() bool {
	if o != nil && !IsNil(o.ApiGroup) {
		return true
	}

	return false
}

// SetApiGroup gets a reference to the given string and assigns it to the ApiGroup field.
func (o *DatabaseClusterSpecBackupStoragesValueVolumeSpecPersistentVolumeClaimDataSource) SetApiGroup(v string) {
	o.ApiGroup = &v
}

// GetKind returns the Kind field value
func (o *DatabaseClusterSpecBackupStoragesValueVolumeSpecPersistentVolumeClaimDataSource) GetKind() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Kind
}

// GetKindOk returns a tuple with the Kind field value
// and a boolean to check if the value has been set.
func (o *DatabaseClusterSpecBackupStoragesValueVolumeSpecPersistentVolumeClaimDataSource) GetKindOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Kind, true
}

// SetKind sets field value
func (o *DatabaseClusterSpecBackupStoragesValueVolumeSpecPersistentVolumeClaimDataSource) SetKind(v string) {
	o.Kind = v
}

// GetName returns the Name field value
func (o *DatabaseClusterSpecBackupStoragesValueVolumeSpecPersistentVolumeClaimDataSource) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DatabaseClusterSpecBackupStoragesValueVolumeSpecPersistentVolumeClaimDataSource) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DatabaseClusterSpecBackupStoragesValueVolumeSpecPersistentVolumeClaimDataSource) SetName(v string) {
	o.Name = v
}

func (o DatabaseClusterSpecBackupStoragesValueVolumeSpecPersistentVolumeClaimDataSource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatabaseClusterSpecBackupStoragesValueVolumeSpecPersistentVolumeClaimDataSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ApiGroup) {
		toSerialize["apiGroup"] = o.ApiGroup
	}
	toSerialize["kind"] = o.Kind
	toSerialize["name"] = o.Name
	return toSerialize, nil
}

type NullableDatabaseClusterSpecBackupStoragesValueVolumeSpecPersistentVolumeClaimDataSource struct {
	value *DatabaseClusterSpecBackupStoragesValueVolumeSpecPersistentVolumeClaimDataSource
	isSet bool
}

func (v NullableDatabaseClusterSpecBackupStoragesValueVolumeSpecPersistentVolumeClaimDataSource) Get() *DatabaseClusterSpecBackupStoragesValueVolumeSpecPersistentVolumeClaimDataSource {
	return v.value
}

func (v *NullableDatabaseClusterSpecBackupStoragesValueVolumeSpecPersistentVolumeClaimDataSource) Set(val *DatabaseClusterSpecBackupStoragesValueVolumeSpecPersistentVolumeClaimDataSource) {
	v.value = val
	v.isSet = true
}

func (v NullableDatabaseClusterSpecBackupStoragesValueVolumeSpecPersistentVolumeClaimDataSource) IsSet() bool {
	return v.isSet
}

func (v *NullableDatabaseClusterSpecBackupStoragesValueVolumeSpecPersistentVolumeClaimDataSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatabaseClusterSpecBackupStoragesValueVolumeSpecPersistentVolumeClaimDataSource(val *DatabaseClusterSpecBackupStoragesValueVolumeSpecPersistentVolumeClaimDataSource) *NullableDatabaseClusterSpecBackupStoragesValueVolumeSpecPersistentVolumeClaimDataSource {
	return &NullableDatabaseClusterSpecBackupStoragesValueVolumeSpecPersistentVolumeClaimDataSource{value: val, isSet: true}
}

func (v NullableDatabaseClusterSpecBackupStoragesValueVolumeSpecPersistentVolumeClaimDataSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatabaseClusterSpecBackupStoragesValueVolumeSpecPersistentVolumeClaimDataSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


