/*
Percona Everest schema

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DatabaseClusterSpecBackupStoragesValue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatabaseClusterSpecBackupStoragesValue{}

// DatabaseClusterSpecBackupStoragesValue BackupStorageSpec represents set of settings to configure backup storage.
type DatabaseClusterSpecBackupStoragesValue struct {
	Affinity *DatabaseClusterSpecBackupStoragesValueAffinity `json:"affinity,omitempty"`
	Annotations *map[string]string `json:"annotations,omitempty"`
	ContainerSecurityContext *DatabaseClusterSpecBackupContainerSecurityContext `json:"containerSecurityContext,omitempty"`
	Labels *map[string]string `json:"labels,omitempty"`
	NodeSelector *map[string]string `json:"nodeSelector,omitempty"`
	PodSecurityContext *DatabaseClusterSpecBackupStoragesValuePodSecurityContext `json:"podSecurityContext,omitempty"`
	PriorityClassName *string `json:"priorityClassName,omitempty"`
	Resources *DatabaseClusterSpecBackupResources `json:"resources,omitempty"`
	RuntimeClassName *string `json:"runtimeClassName,omitempty"`
	SchedulerName *string `json:"schedulerName,omitempty"`
	StorageProvider *DatabaseClusterSpecBackupStoragesValueStorageProvider `json:"storageProvider,omitempty"`
	Tolerations []DatabaseClusterSpecBackupStoragesValueTolerationsInner `json:"tolerations,omitempty"`
	// BackupStorageType represents backup storage type.
	Type string `json:"type"`
	VerifyTLS *bool `json:"verifyTLS,omitempty"`
	VolumeSpec *DatabaseClusterSpecBackupStoragesValueVolumeSpec `json:"volumeSpec,omitempty"`
}

// NewDatabaseClusterSpecBackupStoragesValue instantiates a new DatabaseClusterSpecBackupStoragesValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatabaseClusterSpecBackupStoragesValue(type_ string) *DatabaseClusterSpecBackupStoragesValue {
	this := DatabaseClusterSpecBackupStoragesValue{}
	this.Type = type_
	return &this
}

// NewDatabaseClusterSpecBackupStoragesValueWithDefaults instantiates a new DatabaseClusterSpecBackupStoragesValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatabaseClusterSpecBackupStoragesValueWithDefaults() *DatabaseClusterSpecBackupStoragesValue {
	this := DatabaseClusterSpecBackupStoragesValue{}
	return &this
}

// GetAffinity returns the Affinity field value if set, zero value otherwise.
func (o *DatabaseClusterSpecBackupStoragesValue) GetAffinity() DatabaseClusterSpecBackupStoragesValueAffinity {
	if o == nil || IsNil(o.Affinity) {
		var ret DatabaseClusterSpecBackupStoragesValueAffinity
		return ret
	}
	return *o.Affinity
}

// GetAffinityOk returns a tuple with the Affinity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseClusterSpecBackupStoragesValue) GetAffinityOk() (*DatabaseClusterSpecBackupStoragesValueAffinity, bool) {
	if o == nil || IsNil(o.Affinity) {
		return nil, false
	}
	return o.Affinity, true
}

// HasAffinity returns a boolean if a field has been set.
func (o *DatabaseClusterSpecBackupStoragesValue) HasAffinity() bool {
	if o != nil && !IsNil(o.Affinity) {
		return true
	}

	return false
}

// SetAffinity gets a reference to the given DatabaseClusterSpecBackupStoragesValueAffinity and assigns it to the Affinity field.
func (o *DatabaseClusterSpecBackupStoragesValue) SetAffinity(v DatabaseClusterSpecBackupStoragesValueAffinity) {
	o.Affinity = &v
}

// GetAnnotations returns the Annotations field value if set, zero value otherwise.
func (o *DatabaseClusterSpecBackupStoragesValue) GetAnnotations() map[string]string {
	if o == nil || IsNil(o.Annotations) {
		var ret map[string]string
		return ret
	}
	return *o.Annotations
}

// GetAnnotationsOk returns a tuple with the Annotations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseClusterSpecBackupStoragesValue) GetAnnotationsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Annotations) {
		return nil, false
	}
	return o.Annotations, true
}

// HasAnnotations returns a boolean if a field has been set.
func (o *DatabaseClusterSpecBackupStoragesValue) HasAnnotations() bool {
	if o != nil && !IsNil(o.Annotations) {
		return true
	}

	return false
}

// SetAnnotations gets a reference to the given map[string]string and assigns it to the Annotations field.
func (o *DatabaseClusterSpecBackupStoragesValue) SetAnnotations(v map[string]string) {
	o.Annotations = &v
}

// GetContainerSecurityContext returns the ContainerSecurityContext field value if set, zero value otherwise.
func (o *DatabaseClusterSpecBackupStoragesValue) GetContainerSecurityContext() DatabaseClusterSpecBackupContainerSecurityContext {
	if o == nil || IsNil(o.ContainerSecurityContext) {
		var ret DatabaseClusterSpecBackupContainerSecurityContext
		return ret
	}
	return *o.ContainerSecurityContext
}

// GetContainerSecurityContextOk returns a tuple with the ContainerSecurityContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseClusterSpecBackupStoragesValue) GetContainerSecurityContextOk() (*DatabaseClusterSpecBackupContainerSecurityContext, bool) {
	if o == nil || IsNil(o.ContainerSecurityContext) {
		return nil, false
	}
	return o.ContainerSecurityContext, true
}

// HasContainerSecurityContext returns a boolean if a field has been set.
func (o *DatabaseClusterSpecBackupStoragesValue) HasContainerSecurityContext() bool {
	if o != nil && !IsNil(o.ContainerSecurityContext) {
		return true
	}

	return false
}

// SetContainerSecurityContext gets a reference to the given DatabaseClusterSpecBackupContainerSecurityContext and assigns it to the ContainerSecurityContext field.
func (o *DatabaseClusterSpecBackupStoragesValue) SetContainerSecurityContext(v DatabaseClusterSpecBackupContainerSecurityContext) {
	o.ContainerSecurityContext = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *DatabaseClusterSpecBackupStoragesValue) GetLabels() map[string]string {
	if o == nil || IsNil(o.Labels) {
		var ret map[string]string
		return ret
	}
	return *o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseClusterSpecBackupStoragesValue) GetLabelsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *DatabaseClusterSpecBackupStoragesValue) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given map[string]string and assigns it to the Labels field.
func (o *DatabaseClusterSpecBackupStoragesValue) SetLabels(v map[string]string) {
	o.Labels = &v
}

// GetNodeSelector returns the NodeSelector field value if set, zero value otherwise.
func (o *DatabaseClusterSpecBackupStoragesValue) GetNodeSelector() map[string]string {
	if o == nil || IsNil(o.NodeSelector) {
		var ret map[string]string
		return ret
	}
	return *o.NodeSelector
}

// GetNodeSelectorOk returns a tuple with the NodeSelector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseClusterSpecBackupStoragesValue) GetNodeSelectorOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.NodeSelector) {
		return nil, false
	}
	return o.NodeSelector, true
}

// HasNodeSelector returns a boolean if a field has been set.
func (o *DatabaseClusterSpecBackupStoragesValue) HasNodeSelector() bool {
	if o != nil && !IsNil(o.NodeSelector) {
		return true
	}

	return false
}

// SetNodeSelector gets a reference to the given map[string]string and assigns it to the NodeSelector field.
func (o *DatabaseClusterSpecBackupStoragesValue) SetNodeSelector(v map[string]string) {
	o.NodeSelector = &v
}

// GetPodSecurityContext returns the PodSecurityContext field value if set, zero value otherwise.
func (o *DatabaseClusterSpecBackupStoragesValue) GetPodSecurityContext() DatabaseClusterSpecBackupStoragesValuePodSecurityContext {
	if o == nil || IsNil(o.PodSecurityContext) {
		var ret DatabaseClusterSpecBackupStoragesValuePodSecurityContext
		return ret
	}
	return *o.PodSecurityContext
}

// GetPodSecurityContextOk returns a tuple with the PodSecurityContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseClusterSpecBackupStoragesValue) GetPodSecurityContextOk() (*DatabaseClusterSpecBackupStoragesValuePodSecurityContext, bool) {
	if o == nil || IsNil(o.PodSecurityContext) {
		return nil, false
	}
	return o.PodSecurityContext, true
}

// HasPodSecurityContext returns a boolean if a field has been set.
func (o *DatabaseClusterSpecBackupStoragesValue) HasPodSecurityContext() bool {
	if o != nil && !IsNil(o.PodSecurityContext) {
		return true
	}

	return false
}

// SetPodSecurityContext gets a reference to the given DatabaseClusterSpecBackupStoragesValuePodSecurityContext and assigns it to the PodSecurityContext field.
func (o *DatabaseClusterSpecBackupStoragesValue) SetPodSecurityContext(v DatabaseClusterSpecBackupStoragesValuePodSecurityContext) {
	o.PodSecurityContext = &v
}

// GetPriorityClassName returns the PriorityClassName field value if set, zero value otherwise.
func (o *DatabaseClusterSpecBackupStoragesValue) GetPriorityClassName() string {
	if o == nil || IsNil(o.PriorityClassName) {
		var ret string
		return ret
	}
	return *o.PriorityClassName
}

// GetPriorityClassNameOk returns a tuple with the PriorityClassName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseClusterSpecBackupStoragesValue) GetPriorityClassNameOk() (*string, bool) {
	if o == nil || IsNil(o.PriorityClassName) {
		return nil, false
	}
	return o.PriorityClassName, true
}

// HasPriorityClassName returns a boolean if a field has been set.
func (o *DatabaseClusterSpecBackupStoragesValue) HasPriorityClassName() bool {
	if o != nil && !IsNil(o.PriorityClassName) {
		return true
	}

	return false
}

// SetPriorityClassName gets a reference to the given string and assigns it to the PriorityClassName field.
func (o *DatabaseClusterSpecBackupStoragesValue) SetPriorityClassName(v string) {
	o.PriorityClassName = &v
}

// GetResources returns the Resources field value if set, zero value otherwise.
func (o *DatabaseClusterSpecBackupStoragesValue) GetResources() DatabaseClusterSpecBackupResources {
	if o == nil || IsNil(o.Resources) {
		var ret DatabaseClusterSpecBackupResources
		return ret
	}
	return *o.Resources
}

// GetResourcesOk returns a tuple with the Resources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseClusterSpecBackupStoragesValue) GetResourcesOk() (*DatabaseClusterSpecBackupResources, bool) {
	if o == nil || IsNil(o.Resources) {
		return nil, false
	}
	return o.Resources, true
}

// HasResources returns a boolean if a field has been set.
func (o *DatabaseClusterSpecBackupStoragesValue) HasResources() bool {
	if o != nil && !IsNil(o.Resources) {
		return true
	}

	return false
}

// SetResources gets a reference to the given DatabaseClusterSpecBackupResources and assigns it to the Resources field.
func (o *DatabaseClusterSpecBackupStoragesValue) SetResources(v DatabaseClusterSpecBackupResources) {
	o.Resources = &v
}

// GetRuntimeClassName returns the RuntimeClassName field value if set, zero value otherwise.
func (o *DatabaseClusterSpecBackupStoragesValue) GetRuntimeClassName() string {
	if o == nil || IsNil(o.RuntimeClassName) {
		var ret string
		return ret
	}
	return *o.RuntimeClassName
}

// GetRuntimeClassNameOk returns a tuple with the RuntimeClassName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseClusterSpecBackupStoragesValue) GetRuntimeClassNameOk() (*string, bool) {
	if o == nil || IsNil(o.RuntimeClassName) {
		return nil, false
	}
	return o.RuntimeClassName, true
}

// HasRuntimeClassName returns a boolean if a field has been set.
func (o *DatabaseClusterSpecBackupStoragesValue) HasRuntimeClassName() bool {
	if o != nil && !IsNil(o.RuntimeClassName) {
		return true
	}

	return false
}

// SetRuntimeClassName gets a reference to the given string and assigns it to the RuntimeClassName field.
func (o *DatabaseClusterSpecBackupStoragesValue) SetRuntimeClassName(v string) {
	o.RuntimeClassName = &v
}

// GetSchedulerName returns the SchedulerName field value if set, zero value otherwise.
func (o *DatabaseClusterSpecBackupStoragesValue) GetSchedulerName() string {
	if o == nil || IsNil(o.SchedulerName) {
		var ret string
		return ret
	}
	return *o.SchedulerName
}

// GetSchedulerNameOk returns a tuple with the SchedulerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseClusterSpecBackupStoragesValue) GetSchedulerNameOk() (*string, bool) {
	if o == nil || IsNil(o.SchedulerName) {
		return nil, false
	}
	return o.SchedulerName, true
}

// HasSchedulerName returns a boolean if a field has been set.
func (o *DatabaseClusterSpecBackupStoragesValue) HasSchedulerName() bool {
	if o != nil && !IsNil(o.SchedulerName) {
		return true
	}

	return false
}

// SetSchedulerName gets a reference to the given string and assigns it to the SchedulerName field.
func (o *DatabaseClusterSpecBackupStoragesValue) SetSchedulerName(v string) {
	o.SchedulerName = &v
}

// GetStorageProvider returns the StorageProvider field value if set, zero value otherwise.
func (o *DatabaseClusterSpecBackupStoragesValue) GetStorageProvider() DatabaseClusterSpecBackupStoragesValueStorageProvider {
	if o == nil || IsNil(o.StorageProvider) {
		var ret DatabaseClusterSpecBackupStoragesValueStorageProvider
		return ret
	}
	return *o.StorageProvider
}

// GetStorageProviderOk returns a tuple with the StorageProvider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseClusterSpecBackupStoragesValue) GetStorageProviderOk() (*DatabaseClusterSpecBackupStoragesValueStorageProvider, bool) {
	if o == nil || IsNil(o.StorageProvider) {
		return nil, false
	}
	return o.StorageProvider, true
}

// HasStorageProvider returns a boolean if a field has been set.
func (o *DatabaseClusterSpecBackupStoragesValue) HasStorageProvider() bool {
	if o != nil && !IsNil(o.StorageProvider) {
		return true
	}

	return false
}

// SetStorageProvider gets a reference to the given DatabaseClusterSpecBackupStoragesValueStorageProvider and assigns it to the StorageProvider field.
func (o *DatabaseClusterSpecBackupStoragesValue) SetStorageProvider(v DatabaseClusterSpecBackupStoragesValueStorageProvider) {
	o.StorageProvider = &v
}

// GetTolerations returns the Tolerations field value if set, zero value otherwise.
func (o *DatabaseClusterSpecBackupStoragesValue) GetTolerations() []DatabaseClusterSpecBackupStoragesValueTolerationsInner {
	if o == nil || IsNil(o.Tolerations) {
		var ret []DatabaseClusterSpecBackupStoragesValueTolerationsInner
		return ret
	}
	return o.Tolerations
}

// GetTolerationsOk returns a tuple with the Tolerations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseClusterSpecBackupStoragesValue) GetTolerationsOk() ([]DatabaseClusterSpecBackupStoragesValueTolerationsInner, bool) {
	if o == nil || IsNil(o.Tolerations) {
		return nil, false
	}
	return o.Tolerations, true
}

// HasTolerations returns a boolean if a field has been set.
func (o *DatabaseClusterSpecBackupStoragesValue) HasTolerations() bool {
	if o != nil && !IsNil(o.Tolerations) {
		return true
	}

	return false
}

// SetTolerations gets a reference to the given []DatabaseClusterSpecBackupStoragesValueTolerationsInner and assigns it to the Tolerations field.
func (o *DatabaseClusterSpecBackupStoragesValue) SetTolerations(v []DatabaseClusterSpecBackupStoragesValueTolerationsInner) {
	o.Tolerations = v
}

// GetType returns the Type field value
func (o *DatabaseClusterSpecBackupStoragesValue) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *DatabaseClusterSpecBackupStoragesValue) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *DatabaseClusterSpecBackupStoragesValue) SetType(v string) {
	o.Type = v
}

// GetVerifyTLS returns the VerifyTLS field value if set, zero value otherwise.
func (o *DatabaseClusterSpecBackupStoragesValue) GetVerifyTLS() bool {
	if o == nil || IsNil(o.VerifyTLS) {
		var ret bool
		return ret
	}
	return *o.VerifyTLS
}

// GetVerifyTLSOk returns a tuple with the VerifyTLS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseClusterSpecBackupStoragesValue) GetVerifyTLSOk() (*bool, bool) {
	if o == nil || IsNil(o.VerifyTLS) {
		return nil, false
	}
	return o.VerifyTLS, true
}

// HasVerifyTLS returns a boolean if a field has been set.
func (o *DatabaseClusterSpecBackupStoragesValue) HasVerifyTLS() bool {
	if o != nil && !IsNil(o.VerifyTLS) {
		return true
	}

	return false
}

// SetVerifyTLS gets a reference to the given bool and assigns it to the VerifyTLS field.
func (o *DatabaseClusterSpecBackupStoragesValue) SetVerifyTLS(v bool) {
	o.VerifyTLS = &v
}

// GetVolumeSpec returns the VolumeSpec field value if set, zero value otherwise.
func (o *DatabaseClusterSpecBackupStoragesValue) GetVolumeSpec() DatabaseClusterSpecBackupStoragesValueVolumeSpec {
	if o == nil || IsNil(o.VolumeSpec) {
		var ret DatabaseClusterSpecBackupStoragesValueVolumeSpec
		return ret
	}
	return *o.VolumeSpec
}

// GetVolumeSpecOk returns a tuple with the VolumeSpec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseClusterSpecBackupStoragesValue) GetVolumeSpecOk() (*DatabaseClusterSpecBackupStoragesValueVolumeSpec, bool) {
	if o == nil || IsNil(o.VolumeSpec) {
		return nil, false
	}
	return o.VolumeSpec, true
}

// HasVolumeSpec returns a boolean if a field has been set.
func (o *DatabaseClusterSpecBackupStoragesValue) HasVolumeSpec() bool {
	if o != nil && !IsNil(o.VolumeSpec) {
		return true
	}

	return false
}

// SetVolumeSpec gets a reference to the given DatabaseClusterSpecBackupStoragesValueVolumeSpec and assigns it to the VolumeSpec field.
func (o *DatabaseClusterSpecBackupStoragesValue) SetVolumeSpec(v DatabaseClusterSpecBackupStoragesValueVolumeSpec) {
	o.VolumeSpec = &v
}

func (o DatabaseClusterSpecBackupStoragesValue) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatabaseClusterSpecBackupStoragesValue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Affinity) {
		toSerialize["affinity"] = o.Affinity
	}
	if !IsNil(o.Annotations) {
		toSerialize["annotations"] = o.Annotations
	}
	if !IsNil(o.ContainerSecurityContext) {
		toSerialize["containerSecurityContext"] = o.ContainerSecurityContext
	}
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	if !IsNil(o.NodeSelector) {
		toSerialize["nodeSelector"] = o.NodeSelector
	}
	if !IsNil(o.PodSecurityContext) {
		toSerialize["podSecurityContext"] = o.PodSecurityContext
	}
	if !IsNil(o.PriorityClassName) {
		toSerialize["priorityClassName"] = o.PriorityClassName
	}
	if !IsNil(o.Resources) {
		toSerialize["resources"] = o.Resources
	}
	if !IsNil(o.RuntimeClassName) {
		toSerialize["runtimeClassName"] = o.RuntimeClassName
	}
	if !IsNil(o.SchedulerName) {
		toSerialize["schedulerName"] = o.SchedulerName
	}
	if !IsNil(o.StorageProvider) {
		toSerialize["storageProvider"] = o.StorageProvider
	}
	if !IsNil(o.Tolerations) {
		toSerialize["tolerations"] = o.Tolerations
	}
	toSerialize["type"] = o.Type
	if !IsNil(o.VerifyTLS) {
		toSerialize["verifyTLS"] = o.VerifyTLS
	}
	if !IsNil(o.VolumeSpec) {
		toSerialize["volumeSpec"] = o.VolumeSpec
	}
	return toSerialize, nil
}

type NullableDatabaseClusterSpecBackupStoragesValue struct {
	value *DatabaseClusterSpecBackupStoragesValue
	isSet bool
}

func (v NullableDatabaseClusterSpecBackupStoragesValue) Get() *DatabaseClusterSpecBackupStoragesValue {
	return v.value
}

func (v *NullableDatabaseClusterSpecBackupStoragesValue) Set(val *DatabaseClusterSpecBackupStoragesValue) {
	v.value = val
	v.isSet = true
}

func (v NullableDatabaseClusterSpecBackupStoragesValue) IsSet() bool {
	return v.isSet
}

func (v *NullableDatabaseClusterSpecBackupStoragesValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatabaseClusterSpecBackupStoragesValue(val *DatabaseClusterSpecBackupStoragesValue) *NullableDatabaseClusterSpecBackupStoragesValue {
	return &NullableDatabaseClusterSpecBackupStoragesValue{value: val, isSet: true}
}

func (v NullableDatabaseClusterSpecBackupStoragesValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatabaseClusterSpecBackupStoragesValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


