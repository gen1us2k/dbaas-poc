/*
Percona Everest schema

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DatabaseClusterSpecBackupStoragesValueVolumeSpecEmptyDir type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatabaseClusterSpecBackupStoragesValueVolumeSpecEmptyDir{}

// DatabaseClusterSpecBackupStoragesValueVolumeSpecEmptyDir EmptyDir to use as data volume for mysql. EmptyDir represents a temporary directory that shares a pod's lifetime.
type DatabaseClusterSpecBackupStoragesValueVolumeSpecEmptyDir struct {
	// medium represents what type of storage medium should back this directory. The default is \"\" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
	Medium *string `json:"medium,omitempty"`
	SizeLimit *DatabaseClusterSpecBackupStoragesValueVolumeSpecEmptyDirSizeLimit `json:"sizeLimit,omitempty"`
}

// NewDatabaseClusterSpecBackupStoragesValueVolumeSpecEmptyDir instantiates a new DatabaseClusterSpecBackupStoragesValueVolumeSpecEmptyDir object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatabaseClusterSpecBackupStoragesValueVolumeSpecEmptyDir() *DatabaseClusterSpecBackupStoragesValueVolumeSpecEmptyDir {
	this := DatabaseClusterSpecBackupStoragesValueVolumeSpecEmptyDir{}
	return &this
}

// NewDatabaseClusterSpecBackupStoragesValueVolumeSpecEmptyDirWithDefaults instantiates a new DatabaseClusterSpecBackupStoragesValueVolumeSpecEmptyDir object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatabaseClusterSpecBackupStoragesValueVolumeSpecEmptyDirWithDefaults() *DatabaseClusterSpecBackupStoragesValueVolumeSpecEmptyDir {
	this := DatabaseClusterSpecBackupStoragesValueVolumeSpecEmptyDir{}
	return &this
}

// GetMedium returns the Medium field value if set, zero value otherwise.
func (o *DatabaseClusterSpecBackupStoragesValueVolumeSpecEmptyDir) GetMedium() string {
	if o == nil || IsNil(o.Medium) {
		var ret string
		return ret
	}
	return *o.Medium
}

// GetMediumOk returns a tuple with the Medium field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseClusterSpecBackupStoragesValueVolumeSpecEmptyDir) GetMediumOk() (*string, bool) {
	if o == nil || IsNil(o.Medium) {
		return nil, false
	}
	return o.Medium, true
}

// HasMedium returns a boolean if a field has been set.
func (o *DatabaseClusterSpecBackupStoragesValueVolumeSpecEmptyDir) HasMedium() bool {
	if o != nil && !IsNil(o.Medium) {
		return true
	}

	return false
}

// SetMedium gets a reference to the given string and assigns it to the Medium field.
func (o *DatabaseClusterSpecBackupStoragesValueVolumeSpecEmptyDir) SetMedium(v string) {
	o.Medium = &v
}

// GetSizeLimit returns the SizeLimit field value if set, zero value otherwise.
func (o *DatabaseClusterSpecBackupStoragesValueVolumeSpecEmptyDir) GetSizeLimit() DatabaseClusterSpecBackupStoragesValueVolumeSpecEmptyDirSizeLimit {
	if o == nil || IsNil(o.SizeLimit) {
		var ret DatabaseClusterSpecBackupStoragesValueVolumeSpecEmptyDirSizeLimit
		return ret
	}
	return *o.SizeLimit
}

// GetSizeLimitOk returns a tuple with the SizeLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseClusterSpecBackupStoragesValueVolumeSpecEmptyDir) GetSizeLimitOk() (*DatabaseClusterSpecBackupStoragesValueVolumeSpecEmptyDirSizeLimit, bool) {
	if o == nil || IsNil(o.SizeLimit) {
		return nil, false
	}
	return o.SizeLimit, true
}

// HasSizeLimit returns a boolean if a field has been set.
func (o *DatabaseClusterSpecBackupStoragesValueVolumeSpecEmptyDir) HasSizeLimit() bool {
	if o != nil && !IsNil(o.SizeLimit) {
		return true
	}

	return false
}

// SetSizeLimit gets a reference to the given DatabaseClusterSpecBackupStoragesValueVolumeSpecEmptyDirSizeLimit and assigns it to the SizeLimit field.
func (o *DatabaseClusterSpecBackupStoragesValueVolumeSpecEmptyDir) SetSizeLimit(v DatabaseClusterSpecBackupStoragesValueVolumeSpecEmptyDirSizeLimit) {
	o.SizeLimit = &v
}

func (o DatabaseClusterSpecBackupStoragesValueVolumeSpecEmptyDir) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatabaseClusterSpecBackupStoragesValueVolumeSpecEmptyDir) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Medium) {
		toSerialize["medium"] = o.Medium
	}
	if !IsNil(o.SizeLimit) {
		toSerialize["sizeLimit"] = o.SizeLimit
	}
	return toSerialize, nil
}

type NullableDatabaseClusterSpecBackupStoragesValueVolumeSpecEmptyDir struct {
	value *DatabaseClusterSpecBackupStoragesValueVolumeSpecEmptyDir
	isSet bool
}

func (v NullableDatabaseClusterSpecBackupStoragesValueVolumeSpecEmptyDir) Get() *DatabaseClusterSpecBackupStoragesValueVolumeSpecEmptyDir {
	return v.value
}

func (v *NullableDatabaseClusterSpecBackupStoragesValueVolumeSpecEmptyDir) Set(val *DatabaseClusterSpecBackupStoragesValueVolumeSpecEmptyDir) {
	v.value = val
	v.isSet = true
}

func (v NullableDatabaseClusterSpecBackupStoragesValueVolumeSpecEmptyDir) IsSet() bool {
	return v.isSet
}

func (v *NullableDatabaseClusterSpecBackupStoragesValueVolumeSpecEmptyDir) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatabaseClusterSpecBackupStoragesValueVolumeSpecEmptyDir(val *DatabaseClusterSpecBackupStoragesValueVolumeSpecEmptyDir) *NullableDatabaseClusterSpecBackupStoragesValueVolumeSpecEmptyDir {
	return &NullableDatabaseClusterSpecBackupStoragesValueVolumeSpecEmptyDir{value: val, isSet: true}
}

func (v NullableDatabaseClusterSpecBackupStoragesValueVolumeSpecEmptyDir) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatabaseClusterSpecBackupStoragesValueVolumeSpecEmptyDir) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


