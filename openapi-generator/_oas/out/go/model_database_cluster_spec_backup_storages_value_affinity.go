/*
Percona Everest schema

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DatabaseClusterSpecBackupStoragesValueAffinity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatabaseClusterSpecBackupStoragesValueAffinity{}

// DatabaseClusterSpecBackupStoragesValueAffinity Affinity is a group of affinity scheduling rules.
type DatabaseClusterSpecBackupStoragesValueAffinity struct {
	NodeAffinity *DatabaseClusterSpecBackupStoragesValueAffinityNodeAffinity `json:"nodeAffinity,omitempty"`
	PodAffinity *DatabaseClusterSpecBackupStoragesValueAffinityPodAffinity `json:"podAffinity,omitempty"`
	PodAntiAffinity *DatabaseClusterSpecBackupStoragesValueAffinityPodAntiAffinity `json:"podAntiAffinity,omitempty"`
}

// NewDatabaseClusterSpecBackupStoragesValueAffinity instantiates a new DatabaseClusterSpecBackupStoragesValueAffinity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatabaseClusterSpecBackupStoragesValueAffinity() *DatabaseClusterSpecBackupStoragesValueAffinity {
	this := DatabaseClusterSpecBackupStoragesValueAffinity{}
	return &this
}

// NewDatabaseClusterSpecBackupStoragesValueAffinityWithDefaults instantiates a new DatabaseClusterSpecBackupStoragesValueAffinity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatabaseClusterSpecBackupStoragesValueAffinityWithDefaults() *DatabaseClusterSpecBackupStoragesValueAffinity {
	this := DatabaseClusterSpecBackupStoragesValueAffinity{}
	return &this
}

// GetNodeAffinity returns the NodeAffinity field value if set, zero value otherwise.
func (o *DatabaseClusterSpecBackupStoragesValueAffinity) GetNodeAffinity() DatabaseClusterSpecBackupStoragesValueAffinityNodeAffinity {
	if o == nil || IsNil(o.NodeAffinity) {
		var ret DatabaseClusterSpecBackupStoragesValueAffinityNodeAffinity
		return ret
	}
	return *o.NodeAffinity
}

// GetNodeAffinityOk returns a tuple with the NodeAffinity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseClusterSpecBackupStoragesValueAffinity) GetNodeAffinityOk() (*DatabaseClusterSpecBackupStoragesValueAffinityNodeAffinity, bool) {
	if o == nil || IsNil(o.NodeAffinity) {
		return nil, false
	}
	return o.NodeAffinity, true
}

// HasNodeAffinity returns a boolean if a field has been set.
func (o *DatabaseClusterSpecBackupStoragesValueAffinity) HasNodeAffinity() bool {
	if o != nil && !IsNil(o.NodeAffinity) {
		return true
	}

	return false
}

// SetNodeAffinity gets a reference to the given DatabaseClusterSpecBackupStoragesValueAffinityNodeAffinity and assigns it to the NodeAffinity field.
func (o *DatabaseClusterSpecBackupStoragesValueAffinity) SetNodeAffinity(v DatabaseClusterSpecBackupStoragesValueAffinityNodeAffinity) {
	o.NodeAffinity = &v
}

// GetPodAffinity returns the PodAffinity field value if set, zero value otherwise.
func (o *DatabaseClusterSpecBackupStoragesValueAffinity) GetPodAffinity() DatabaseClusterSpecBackupStoragesValueAffinityPodAffinity {
	if o == nil || IsNil(o.PodAffinity) {
		var ret DatabaseClusterSpecBackupStoragesValueAffinityPodAffinity
		return ret
	}
	return *o.PodAffinity
}

// GetPodAffinityOk returns a tuple with the PodAffinity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseClusterSpecBackupStoragesValueAffinity) GetPodAffinityOk() (*DatabaseClusterSpecBackupStoragesValueAffinityPodAffinity, bool) {
	if o == nil || IsNil(o.PodAffinity) {
		return nil, false
	}
	return o.PodAffinity, true
}

// HasPodAffinity returns a boolean if a field has been set.
func (o *DatabaseClusterSpecBackupStoragesValueAffinity) HasPodAffinity() bool {
	if o != nil && !IsNil(o.PodAffinity) {
		return true
	}

	return false
}

// SetPodAffinity gets a reference to the given DatabaseClusterSpecBackupStoragesValueAffinityPodAffinity and assigns it to the PodAffinity field.
func (o *DatabaseClusterSpecBackupStoragesValueAffinity) SetPodAffinity(v DatabaseClusterSpecBackupStoragesValueAffinityPodAffinity) {
	o.PodAffinity = &v
}

// GetPodAntiAffinity returns the PodAntiAffinity field value if set, zero value otherwise.
func (o *DatabaseClusterSpecBackupStoragesValueAffinity) GetPodAntiAffinity() DatabaseClusterSpecBackupStoragesValueAffinityPodAntiAffinity {
	if o == nil || IsNil(o.PodAntiAffinity) {
		var ret DatabaseClusterSpecBackupStoragesValueAffinityPodAntiAffinity
		return ret
	}
	return *o.PodAntiAffinity
}

// GetPodAntiAffinityOk returns a tuple with the PodAntiAffinity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseClusterSpecBackupStoragesValueAffinity) GetPodAntiAffinityOk() (*DatabaseClusterSpecBackupStoragesValueAffinityPodAntiAffinity, bool) {
	if o == nil || IsNil(o.PodAntiAffinity) {
		return nil, false
	}
	return o.PodAntiAffinity, true
}

// HasPodAntiAffinity returns a boolean if a field has been set.
func (o *DatabaseClusterSpecBackupStoragesValueAffinity) HasPodAntiAffinity() bool {
	if o != nil && !IsNil(o.PodAntiAffinity) {
		return true
	}

	return false
}

// SetPodAntiAffinity gets a reference to the given DatabaseClusterSpecBackupStoragesValueAffinityPodAntiAffinity and assigns it to the PodAntiAffinity field.
func (o *DatabaseClusterSpecBackupStoragesValueAffinity) SetPodAntiAffinity(v DatabaseClusterSpecBackupStoragesValueAffinityPodAntiAffinity) {
	o.PodAntiAffinity = &v
}

func (o DatabaseClusterSpecBackupStoragesValueAffinity) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatabaseClusterSpecBackupStoragesValueAffinity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NodeAffinity) {
		toSerialize["nodeAffinity"] = o.NodeAffinity
	}
	if !IsNil(o.PodAffinity) {
		toSerialize["podAffinity"] = o.PodAffinity
	}
	if !IsNil(o.PodAntiAffinity) {
		toSerialize["podAntiAffinity"] = o.PodAntiAffinity
	}
	return toSerialize, nil
}

type NullableDatabaseClusterSpecBackupStoragesValueAffinity struct {
	value *DatabaseClusterSpecBackupStoragesValueAffinity
	isSet bool
}

func (v NullableDatabaseClusterSpecBackupStoragesValueAffinity) Get() *DatabaseClusterSpecBackupStoragesValueAffinity {
	return v.value
}

func (v *NullableDatabaseClusterSpecBackupStoragesValueAffinity) Set(val *DatabaseClusterSpecBackupStoragesValueAffinity) {
	v.value = val
	v.isSet = true
}

func (v NullableDatabaseClusterSpecBackupStoragesValueAffinity) IsSet() bool {
	return v.isSet
}

func (v *NullableDatabaseClusterSpecBackupStoragesValueAffinity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatabaseClusterSpecBackupStoragesValueAffinity(val *DatabaseClusterSpecBackupStoragesValueAffinity) *NullableDatabaseClusterSpecBackupStoragesValueAffinity {
	return &NullableDatabaseClusterSpecBackupStoragesValueAffinity{value: val, isSet: true}
}

func (v NullableDatabaseClusterSpecBackupStoragesValueAffinity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatabaseClusterSpecBackupStoragesValueAffinity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


