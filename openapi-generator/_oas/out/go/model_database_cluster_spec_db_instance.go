/*
Percona Everest schema

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DatabaseClusterSpecDbInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatabaseClusterSpecDbInstance{}

// DatabaseClusterSpecDbInstance DBInstance represents resource requests for a database cluster.
type DatabaseClusterSpecDbInstance struct {
	Cpu *DatabaseClusterSpecBackupResourcesLimitsValue `json:"cpu,omitempty"`
	DiskSize *DatabaseClusterSpecBackupResourcesLimitsValue `json:"diskSize,omitempty"`
	Memory *DatabaseClusterSpecBackupResourcesLimitsValue `json:"memory,omitempty"`
	StorageClassName *string `json:"storageClassName,omitempty"`
}

// NewDatabaseClusterSpecDbInstance instantiates a new DatabaseClusterSpecDbInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatabaseClusterSpecDbInstance() *DatabaseClusterSpecDbInstance {
	this := DatabaseClusterSpecDbInstance{}
	return &this
}

// NewDatabaseClusterSpecDbInstanceWithDefaults instantiates a new DatabaseClusterSpecDbInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatabaseClusterSpecDbInstanceWithDefaults() *DatabaseClusterSpecDbInstance {
	this := DatabaseClusterSpecDbInstance{}
	return &this
}

// GetCpu returns the Cpu field value if set, zero value otherwise.
func (o *DatabaseClusterSpecDbInstance) GetCpu() DatabaseClusterSpecBackupResourcesLimitsValue {
	if o == nil || IsNil(o.Cpu) {
		var ret DatabaseClusterSpecBackupResourcesLimitsValue
		return ret
	}
	return *o.Cpu
}

// GetCpuOk returns a tuple with the Cpu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseClusterSpecDbInstance) GetCpuOk() (*DatabaseClusterSpecBackupResourcesLimitsValue, bool) {
	if o == nil || IsNil(o.Cpu) {
		return nil, false
	}
	return o.Cpu, true
}

// HasCpu returns a boolean if a field has been set.
func (o *DatabaseClusterSpecDbInstance) HasCpu() bool {
	if o != nil && !IsNil(o.Cpu) {
		return true
	}

	return false
}

// SetCpu gets a reference to the given DatabaseClusterSpecBackupResourcesLimitsValue and assigns it to the Cpu field.
func (o *DatabaseClusterSpecDbInstance) SetCpu(v DatabaseClusterSpecBackupResourcesLimitsValue) {
	o.Cpu = &v
}

// GetDiskSize returns the DiskSize field value if set, zero value otherwise.
func (o *DatabaseClusterSpecDbInstance) GetDiskSize() DatabaseClusterSpecBackupResourcesLimitsValue {
	if o == nil || IsNil(o.DiskSize) {
		var ret DatabaseClusterSpecBackupResourcesLimitsValue
		return ret
	}
	return *o.DiskSize
}

// GetDiskSizeOk returns a tuple with the DiskSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseClusterSpecDbInstance) GetDiskSizeOk() (*DatabaseClusterSpecBackupResourcesLimitsValue, bool) {
	if o == nil || IsNil(o.DiskSize) {
		return nil, false
	}
	return o.DiskSize, true
}

// HasDiskSize returns a boolean if a field has been set.
func (o *DatabaseClusterSpecDbInstance) HasDiskSize() bool {
	if o != nil && !IsNil(o.DiskSize) {
		return true
	}

	return false
}

// SetDiskSize gets a reference to the given DatabaseClusterSpecBackupResourcesLimitsValue and assigns it to the DiskSize field.
func (o *DatabaseClusterSpecDbInstance) SetDiskSize(v DatabaseClusterSpecBackupResourcesLimitsValue) {
	o.DiskSize = &v
}

// GetMemory returns the Memory field value if set, zero value otherwise.
func (o *DatabaseClusterSpecDbInstance) GetMemory() DatabaseClusterSpecBackupResourcesLimitsValue {
	if o == nil || IsNil(o.Memory) {
		var ret DatabaseClusterSpecBackupResourcesLimitsValue
		return ret
	}
	return *o.Memory
}

// GetMemoryOk returns a tuple with the Memory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseClusterSpecDbInstance) GetMemoryOk() (*DatabaseClusterSpecBackupResourcesLimitsValue, bool) {
	if o == nil || IsNil(o.Memory) {
		return nil, false
	}
	return o.Memory, true
}

// HasMemory returns a boolean if a field has been set.
func (o *DatabaseClusterSpecDbInstance) HasMemory() bool {
	if o != nil && !IsNil(o.Memory) {
		return true
	}

	return false
}

// SetMemory gets a reference to the given DatabaseClusterSpecBackupResourcesLimitsValue and assigns it to the Memory field.
func (o *DatabaseClusterSpecDbInstance) SetMemory(v DatabaseClusterSpecBackupResourcesLimitsValue) {
	o.Memory = &v
}

// GetStorageClassName returns the StorageClassName field value if set, zero value otherwise.
func (o *DatabaseClusterSpecDbInstance) GetStorageClassName() string {
	if o == nil || IsNil(o.StorageClassName) {
		var ret string
		return ret
	}
	return *o.StorageClassName
}

// GetStorageClassNameOk returns a tuple with the StorageClassName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseClusterSpecDbInstance) GetStorageClassNameOk() (*string, bool) {
	if o == nil || IsNil(o.StorageClassName) {
		return nil, false
	}
	return o.StorageClassName, true
}

// HasStorageClassName returns a boolean if a field has been set.
func (o *DatabaseClusterSpecDbInstance) HasStorageClassName() bool {
	if o != nil && !IsNil(o.StorageClassName) {
		return true
	}

	return false
}

// SetStorageClassName gets a reference to the given string and assigns it to the StorageClassName field.
func (o *DatabaseClusterSpecDbInstance) SetStorageClassName(v string) {
	o.StorageClassName = &v
}

func (o DatabaseClusterSpecDbInstance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatabaseClusterSpecDbInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Cpu) {
		toSerialize["cpu"] = o.Cpu
	}
	if !IsNil(o.DiskSize) {
		toSerialize["diskSize"] = o.DiskSize
	}
	if !IsNil(o.Memory) {
		toSerialize["memory"] = o.Memory
	}
	if !IsNil(o.StorageClassName) {
		toSerialize["storageClassName"] = o.StorageClassName
	}
	return toSerialize, nil
}

type NullableDatabaseClusterSpecDbInstance struct {
	value *DatabaseClusterSpecDbInstance
	isSet bool
}

func (v NullableDatabaseClusterSpecDbInstance) Get() *DatabaseClusterSpecDbInstance {
	return v.value
}

func (v *NullableDatabaseClusterSpecDbInstance) Set(val *DatabaseClusterSpecDbInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableDatabaseClusterSpecDbInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableDatabaseClusterSpecDbInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatabaseClusterSpecDbInstance(val *DatabaseClusterSpecDbInstance) *NullableDatabaseClusterSpecDbInstance {
	return &NullableDatabaseClusterSpecDbInstance{value: val, isSet: true}
}

func (v NullableDatabaseClusterSpecDbInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatabaseClusterSpecDbInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


