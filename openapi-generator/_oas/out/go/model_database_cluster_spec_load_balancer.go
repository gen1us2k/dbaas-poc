/*
Percona Everest schema

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DatabaseClusterSpecLoadBalancer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatabaseClusterSpecLoadBalancer{}

// DatabaseClusterSpecLoadBalancer LoadBalancer contains a load balancer settings. For PXC it's haproxy or proxysql. For PSMDB it's mongos.
type DatabaseClusterSpecLoadBalancer struct {
	Annotations *map[string]string `json:"annotations,omitempty"`
	Configuration *string `json:"configuration,omitempty"`
	// Service Type string describes ingress methods for a service
	ExposeType *string `json:"exposeType,omitempty"`
	Image *string `json:"image,omitempty"`
	LoadBalancerSourceRanges []string `json:"loadBalancerSourceRanges,omitempty"`
	Resources *DatabaseClusterSpecBackupResources `json:"resources,omitempty"`
	Size *int32 `json:"size,omitempty"`
	// ServiceExternalTrafficPolicyType describes how nodes distribute service traffic they receive on one of the Service's \"externally-facing\" addresses (NodePorts, ExternalIPs, and LoadBalancer IPs).
	TrafficPolicy *string `json:"trafficPolicy,omitempty"`
	// LoadBalancerType contains supported loadbalancers. It can be proxysql or haproxy for PXC clusters, mongos for PSMDB clusters or pgbouncer for Postgresql clusters.
	Type *string `json:"type,omitempty"`
}

// NewDatabaseClusterSpecLoadBalancer instantiates a new DatabaseClusterSpecLoadBalancer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatabaseClusterSpecLoadBalancer() *DatabaseClusterSpecLoadBalancer {
	this := DatabaseClusterSpecLoadBalancer{}
	return &this
}

// NewDatabaseClusterSpecLoadBalancerWithDefaults instantiates a new DatabaseClusterSpecLoadBalancer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatabaseClusterSpecLoadBalancerWithDefaults() *DatabaseClusterSpecLoadBalancer {
	this := DatabaseClusterSpecLoadBalancer{}
	return &this
}

// GetAnnotations returns the Annotations field value if set, zero value otherwise.
func (o *DatabaseClusterSpecLoadBalancer) GetAnnotations() map[string]string {
	if o == nil || IsNil(o.Annotations) {
		var ret map[string]string
		return ret
	}
	return *o.Annotations
}

// GetAnnotationsOk returns a tuple with the Annotations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseClusterSpecLoadBalancer) GetAnnotationsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Annotations) {
		return nil, false
	}
	return o.Annotations, true
}

// HasAnnotations returns a boolean if a field has been set.
func (o *DatabaseClusterSpecLoadBalancer) HasAnnotations() bool {
	if o != nil && !IsNil(o.Annotations) {
		return true
	}

	return false
}

// SetAnnotations gets a reference to the given map[string]string and assigns it to the Annotations field.
func (o *DatabaseClusterSpecLoadBalancer) SetAnnotations(v map[string]string) {
	o.Annotations = &v
}

// GetConfiguration returns the Configuration field value if set, zero value otherwise.
func (o *DatabaseClusterSpecLoadBalancer) GetConfiguration() string {
	if o == nil || IsNil(o.Configuration) {
		var ret string
		return ret
	}
	return *o.Configuration
}

// GetConfigurationOk returns a tuple with the Configuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseClusterSpecLoadBalancer) GetConfigurationOk() (*string, bool) {
	if o == nil || IsNil(o.Configuration) {
		return nil, false
	}
	return o.Configuration, true
}

// HasConfiguration returns a boolean if a field has been set.
func (o *DatabaseClusterSpecLoadBalancer) HasConfiguration() bool {
	if o != nil && !IsNil(o.Configuration) {
		return true
	}

	return false
}

// SetConfiguration gets a reference to the given string and assigns it to the Configuration field.
func (o *DatabaseClusterSpecLoadBalancer) SetConfiguration(v string) {
	o.Configuration = &v
}

// GetExposeType returns the ExposeType field value if set, zero value otherwise.
func (o *DatabaseClusterSpecLoadBalancer) GetExposeType() string {
	if o == nil || IsNil(o.ExposeType) {
		var ret string
		return ret
	}
	return *o.ExposeType
}

// GetExposeTypeOk returns a tuple with the ExposeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseClusterSpecLoadBalancer) GetExposeTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ExposeType) {
		return nil, false
	}
	return o.ExposeType, true
}

// HasExposeType returns a boolean if a field has been set.
func (o *DatabaseClusterSpecLoadBalancer) HasExposeType() bool {
	if o != nil && !IsNil(o.ExposeType) {
		return true
	}

	return false
}

// SetExposeType gets a reference to the given string and assigns it to the ExposeType field.
func (o *DatabaseClusterSpecLoadBalancer) SetExposeType(v string) {
	o.ExposeType = &v
}

// GetImage returns the Image field value if set, zero value otherwise.
func (o *DatabaseClusterSpecLoadBalancer) GetImage() string {
	if o == nil || IsNil(o.Image) {
		var ret string
		return ret
	}
	return *o.Image
}

// GetImageOk returns a tuple with the Image field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseClusterSpecLoadBalancer) GetImageOk() (*string, bool) {
	if o == nil || IsNil(o.Image) {
		return nil, false
	}
	return o.Image, true
}

// HasImage returns a boolean if a field has been set.
func (o *DatabaseClusterSpecLoadBalancer) HasImage() bool {
	if o != nil && !IsNil(o.Image) {
		return true
	}

	return false
}

// SetImage gets a reference to the given string and assigns it to the Image field.
func (o *DatabaseClusterSpecLoadBalancer) SetImage(v string) {
	o.Image = &v
}

// GetLoadBalancerSourceRanges returns the LoadBalancerSourceRanges field value if set, zero value otherwise.
func (o *DatabaseClusterSpecLoadBalancer) GetLoadBalancerSourceRanges() []string {
	if o == nil || IsNil(o.LoadBalancerSourceRanges) {
		var ret []string
		return ret
	}
	return o.LoadBalancerSourceRanges
}

// GetLoadBalancerSourceRangesOk returns a tuple with the LoadBalancerSourceRanges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseClusterSpecLoadBalancer) GetLoadBalancerSourceRangesOk() ([]string, bool) {
	if o == nil || IsNil(o.LoadBalancerSourceRanges) {
		return nil, false
	}
	return o.LoadBalancerSourceRanges, true
}

// HasLoadBalancerSourceRanges returns a boolean if a field has been set.
func (o *DatabaseClusterSpecLoadBalancer) HasLoadBalancerSourceRanges() bool {
	if o != nil && !IsNil(o.LoadBalancerSourceRanges) {
		return true
	}

	return false
}

// SetLoadBalancerSourceRanges gets a reference to the given []string and assigns it to the LoadBalancerSourceRanges field.
func (o *DatabaseClusterSpecLoadBalancer) SetLoadBalancerSourceRanges(v []string) {
	o.LoadBalancerSourceRanges = v
}

// GetResources returns the Resources field value if set, zero value otherwise.
func (o *DatabaseClusterSpecLoadBalancer) GetResources() DatabaseClusterSpecBackupResources {
	if o == nil || IsNil(o.Resources) {
		var ret DatabaseClusterSpecBackupResources
		return ret
	}
	return *o.Resources
}

// GetResourcesOk returns a tuple with the Resources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseClusterSpecLoadBalancer) GetResourcesOk() (*DatabaseClusterSpecBackupResources, bool) {
	if o == nil || IsNil(o.Resources) {
		return nil, false
	}
	return o.Resources, true
}

// HasResources returns a boolean if a field has been set.
func (o *DatabaseClusterSpecLoadBalancer) HasResources() bool {
	if o != nil && !IsNil(o.Resources) {
		return true
	}

	return false
}

// SetResources gets a reference to the given DatabaseClusterSpecBackupResources and assigns it to the Resources field.
func (o *DatabaseClusterSpecLoadBalancer) SetResources(v DatabaseClusterSpecBackupResources) {
	o.Resources = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *DatabaseClusterSpecLoadBalancer) GetSize() int32 {
	if o == nil || IsNil(o.Size) {
		var ret int32
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseClusterSpecLoadBalancer) GetSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *DatabaseClusterSpecLoadBalancer) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int32 and assigns it to the Size field.
func (o *DatabaseClusterSpecLoadBalancer) SetSize(v int32) {
	o.Size = &v
}

// GetTrafficPolicy returns the TrafficPolicy field value if set, zero value otherwise.
func (o *DatabaseClusterSpecLoadBalancer) GetTrafficPolicy() string {
	if o == nil || IsNil(o.TrafficPolicy) {
		var ret string
		return ret
	}
	return *o.TrafficPolicy
}

// GetTrafficPolicyOk returns a tuple with the TrafficPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseClusterSpecLoadBalancer) GetTrafficPolicyOk() (*string, bool) {
	if o == nil || IsNil(o.TrafficPolicy) {
		return nil, false
	}
	return o.TrafficPolicy, true
}

// HasTrafficPolicy returns a boolean if a field has been set.
func (o *DatabaseClusterSpecLoadBalancer) HasTrafficPolicy() bool {
	if o != nil && !IsNil(o.TrafficPolicy) {
		return true
	}

	return false
}

// SetTrafficPolicy gets a reference to the given string and assigns it to the TrafficPolicy field.
func (o *DatabaseClusterSpecLoadBalancer) SetTrafficPolicy(v string) {
	o.TrafficPolicy = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *DatabaseClusterSpecLoadBalancer) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseClusterSpecLoadBalancer) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *DatabaseClusterSpecLoadBalancer) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *DatabaseClusterSpecLoadBalancer) SetType(v string) {
	o.Type = &v
}

func (o DatabaseClusterSpecLoadBalancer) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatabaseClusterSpecLoadBalancer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Annotations) {
		toSerialize["annotations"] = o.Annotations
	}
	if !IsNil(o.Configuration) {
		toSerialize["configuration"] = o.Configuration
	}
	if !IsNil(o.ExposeType) {
		toSerialize["exposeType"] = o.ExposeType
	}
	if !IsNil(o.Image) {
		toSerialize["image"] = o.Image
	}
	if !IsNil(o.LoadBalancerSourceRanges) {
		toSerialize["loadBalancerSourceRanges"] = o.LoadBalancerSourceRanges
	}
	if !IsNil(o.Resources) {
		toSerialize["resources"] = o.Resources
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !IsNil(o.TrafficPolicy) {
		toSerialize["trafficPolicy"] = o.TrafficPolicy
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableDatabaseClusterSpecLoadBalancer struct {
	value *DatabaseClusterSpecLoadBalancer
	isSet bool
}

func (v NullableDatabaseClusterSpecLoadBalancer) Get() *DatabaseClusterSpecLoadBalancer {
	return v.value
}

func (v *NullableDatabaseClusterSpecLoadBalancer) Set(val *DatabaseClusterSpecLoadBalancer) {
	v.value = val
	v.isSet = true
}

func (v NullableDatabaseClusterSpecLoadBalancer) IsSet() bool {
	return v.isSet
}

func (v *NullableDatabaseClusterSpecLoadBalancer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatabaseClusterSpecLoadBalancer(val *DatabaseClusterSpecLoadBalancer) *NullableDatabaseClusterSpecLoadBalancer {
	return &NullableDatabaseClusterSpecLoadBalancer{value: val, isSet: true}
}

func (v NullableDatabaseClusterSpecLoadBalancer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatabaseClusterSpecLoadBalancer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


