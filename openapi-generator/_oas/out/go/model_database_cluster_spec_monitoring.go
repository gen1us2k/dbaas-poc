/*
Percona Everest schema

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DatabaseClusterSpecMonitoring type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatabaseClusterSpecMonitoring{}

// DatabaseClusterSpecMonitoring Monitoring contains a monitoring settings.
type DatabaseClusterSpecMonitoring struct {
	ContainerSecurityContext *DatabaseClusterSpecBackupContainerSecurityContext `json:"containerSecurityContext,omitempty"`
	// PullPolicy describes a policy for if/when to pull a container image
	ImagePullPolicy *string `json:"imagePullPolicy,omitempty"`
	Pmm *DatabaseClusterSpecMonitoringPmm `json:"pmm,omitempty"`
	Resources *DatabaseClusterSpecBackupResources `json:"resources,omitempty"`
	RuntimeClassName *string `json:"runtimeClassName,omitempty"`
}

// NewDatabaseClusterSpecMonitoring instantiates a new DatabaseClusterSpecMonitoring object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatabaseClusterSpecMonitoring() *DatabaseClusterSpecMonitoring {
	this := DatabaseClusterSpecMonitoring{}
	return &this
}

// NewDatabaseClusterSpecMonitoringWithDefaults instantiates a new DatabaseClusterSpecMonitoring object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatabaseClusterSpecMonitoringWithDefaults() *DatabaseClusterSpecMonitoring {
	this := DatabaseClusterSpecMonitoring{}
	return &this
}

// GetContainerSecurityContext returns the ContainerSecurityContext field value if set, zero value otherwise.
func (o *DatabaseClusterSpecMonitoring) GetContainerSecurityContext() DatabaseClusterSpecBackupContainerSecurityContext {
	if o == nil || IsNil(o.ContainerSecurityContext) {
		var ret DatabaseClusterSpecBackupContainerSecurityContext
		return ret
	}
	return *o.ContainerSecurityContext
}

// GetContainerSecurityContextOk returns a tuple with the ContainerSecurityContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseClusterSpecMonitoring) GetContainerSecurityContextOk() (*DatabaseClusterSpecBackupContainerSecurityContext, bool) {
	if o == nil || IsNil(o.ContainerSecurityContext) {
		return nil, false
	}
	return o.ContainerSecurityContext, true
}

// HasContainerSecurityContext returns a boolean if a field has been set.
func (o *DatabaseClusterSpecMonitoring) HasContainerSecurityContext() bool {
	if o != nil && !IsNil(o.ContainerSecurityContext) {
		return true
	}

	return false
}

// SetContainerSecurityContext gets a reference to the given DatabaseClusterSpecBackupContainerSecurityContext and assigns it to the ContainerSecurityContext field.
func (o *DatabaseClusterSpecMonitoring) SetContainerSecurityContext(v DatabaseClusterSpecBackupContainerSecurityContext) {
	o.ContainerSecurityContext = &v
}

// GetImagePullPolicy returns the ImagePullPolicy field value if set, zero value otherwise.
func (o *DatabaseClusterSpecMonitoring) GetImagePullPolicy() string {
	if o == nil || IsNil(o.ImagePullPolicy) {
		var ret string
		return ret
	}
	return *o.ImagePullPolicy
}

// GetImagePullPolicyOk returns a tuple with the ImagePullPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseClusterSpecMonitoring) GetImagePullPolicyOk() (*string, bool) {
	if o == nil || IsNil(o.ImagePullPolicy) {
		return nil, false
	}
	return o.ImagePullPolicy, true
}

// HasImagePullPolicy returns a boolean if a field has been set.
func (o *DatabaseClusterSpecMonitoring) HasImagePullPolicy() bool {
	if o != nil && !IsNil(o.ImagePullPolicy) {
		return true
	}

	return false
}

// SetImagePullPolicy gets a reference to the given string and assigns it to the ImagePullPolicy field.
func (o *DatabaseClusterSpecMonitoring) SetImagePullPolicy(v string) {
	o.ImagePullPolicy = &v
}

// GetPmm returns the Pmm field value if set, zero value otherwise.
func (o *DatabaseClusterSpecMonitoring) GetPmm() DatabaseClusterSpecMonitoringPmm {
	if o == nil || IsNil(o.Pmm) {
		var ret DatabaseClusterSpecMonitoringPmm
		return ret
	}
	return *o.Pmm
}

// GetPmmOk returns a tuple with the Pmm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseClusterSpecMonitoring) GetPmmOk() (*DatabaseClusterSpecMonitoringPmm, bool) {
	if o == nil || IsNil(o.Pmm) {
		return nil, false
	}
	return o.Pmm, true
}

// HasPmm returns a boolean if a field has been set.
func (o *DatabaseClusterSpecMonitoring) HasPmm() bool {
	if o != nil && !IsNil(o.Pmm) {
		return true
	}

	return false
}

// SetPmm gets a reference to the given DatabaseClusterSpecMonitoringPmm and assigns it to the Pmm field.
func (o *DatabaseClusterSpecMonitoring) SetPmm(v DatabaseClusterSpecMonitoringPmm) {
	o.Pmm = &v
}

// GetResources returns the Resources field value if set, zero value otherwise.
func (o *DatabaseClusterSpecMonitoring) GetResources() DatabaseClusterSpecBackupResources {
	if o == nil || IsNil(o.Resources) {
		var ret DatabaseClusterSpecBackupResources
		return ret
	}
	return *o.Resources
}

// GetResourcesOk returns a tuple with the Resources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseClusterSpecMonitoring) GetResourcesOk() (*DatabaseClusterSpecBackupResources, bool) {
	if o == nil || IsNil(o.Resources) {
		return nil, false
	}
	return o.Resources, true
}

// HasResources returns a boolean if a field has been set.
func (o *DatabaseClusterSpecMonitoring) HasResources() bool {
	if o != nil && !IsNil(o.Resources) {
		return true
	}

	return false
}

// SetResources gets a reference to the given DatabaseClusterSpecBackupResources and assigns it to the Resources field.
func (o *DatabaseClusterSpecMonitoring) SetResources(v DatabaseClusterSpecBackupResources) {
	o.Resources = &v
}

// GetRuntimeClassName returns the RuntimeClassName field value if set, zero value otherwise.
func (o *DatabaseClusterSpecMonitoring) GetRuntimeClassName() string {
	if o == nil || IsNil(o.RuntimeClassName) {
		var ret string
		return ret
	}
	return *o.RuntimeClassName
}

// GetRuntimeClassNameOk returns a tuple with the RuntimeClassName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseClusterSpecMonitoring) GetRuntimeClassNameOk() (*string, bool) {
	if o == nil || IsNil(o.RuntimeClassName) {
		return nil, false
	}
	return o.RuntimeClassName, true
}

// HasRuntimeClassName returns a boolean if a field has been set.
func (o *DatabaseClusterSpecMonitoring) HasRuntimeClassName() bool {
	if o != nil && !IsNil(o.RuntimeClassName) {
		return true
	}

	return false
}

// SetRuntimeClassName gets a reference to the given string and assigns it to the RuntimeClassName field.
func (o *DatabaseClusterSpecMonitoring) SetRuntimeClassName(v string) {
	o.RuntimeClassName = &v
}

func (o DatabaseClusterSpecMonitoring) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatabaseClusterSpecMonitoring) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ContainerSecurityContext) {
		toSerialize["containerSecurityContext"] = o.ContainerSecurityContext
	}
	if !IsNil(o.ImagePullPolicy) {
		toSerialize["imagePullPolicy"] = o.ImagePullPolicy
	}
	if !IsNil(o.Pmm) {
		toSerialize["pmm"] = o.Pmm
	}
	if !IsNil(o.Resources) {
		toSerialize["resources"] = o.Resources
	}
	if !IsNil(o.RuntimeClassName) {
		toSerialize["runtimeClassName"] = o.RuntimeClassName
	}
	return toSerialize, nil
}

type NullableDatabaseClusterSpecMonitoring struct {
	value *DatabaseClusterSpecMonitoring
	isSet bool
}

func (v NullableDatabaseClusterSpecMonitoring) Get() *DatabaseClusterSpecMonitoring {
	return v.value
}

func (v *NullableDatabaseClusterSpecMonitoring) Set(val *DatabaseClusterSpecMonitoring) {
	v.value = val
	v.isSet = true
}

func (v NullableDatabaseClusterSpecMonitoring) IsSet() bool {
	return v.isSet
}

func (v *NullableDatabaseClusterSpecMonitoring) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatabaseClusterSpecMonitoring(val *DatabaseClusterSpecMonitoring) *NullableDatabaseClusterSpecMonitoring {
	return &NullableDatabaseClusterSpecMonitoring{value: val, isSet: true}
}

func (v NullableDatabaseClusterSpecMonitoring) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatabaseClusterSpecMonitoring) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


