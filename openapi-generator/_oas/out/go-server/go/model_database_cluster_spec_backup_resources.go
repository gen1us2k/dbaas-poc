/*
 * Percona Everest schema
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi


import (
	"encoding/json"
)



// DatabaseClusterSpecBackupResources - ResourceRequirements describes the compute resource requirements.
type DatabaseClusterSpecBackupResources struct {

	// Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.   This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.   This field is immutable. It can only be set for containers.
	Claims []DatabaseClusterSpecBackupResourcesClaimsInner `json:"claims,omitempty"`

	// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Limits map[string]DatabaseClusterSpecBackupResourcesLimitsValue `json:"limits,omitempty"`

	// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Requests map[string]DatabaseClusterSpecBackupResourcesLimitsValue `json:"requests,omitempty"`
}

// UnmarshalJSON sets *m to a copy of data while respecting defaults if specified.
func (m *DatabaseClusterSpecBackupResources) UnmarshalJSON(data []byte) error {

	type Alias DatabaseClusterSpecBackupResources // To avoid infinite recursion
    return json.Unmarshal(data, (*Alias)(m))
}

// AssertDatabaseClusterSpecBackupResourcesRequired checks if the required fields are not zero-ed
func AssertDatabaseClusterSpecBackupResourcesRequired(obj DatabaseClusterSpecBackupResources) error {
	for _, el := range obj.Claims {
		if err := AssertDatabaseClusterSpecBackupResourcesClaimsInnerRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertDatabaseClusterSpecBackupResourcesConstraints checks if the values respects the defined constraints
func AssertDatabaseClusterSpecBackupResourcesConstraints(obj DatabaseClusterSpecBackupResources) error {
	return nil
}
