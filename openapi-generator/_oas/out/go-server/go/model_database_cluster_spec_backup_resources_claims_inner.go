/*
 * Percona Everest schema
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi


import (
	"encoding/json"
)



// DatabaseClusterSpecBackupResourcesClaimsInner - ResourceClaim references one entry in PodSpec.ResourceClaims.
type DatabaseClusterSpecBackupResourcesClaimsInner struct {

	// Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
	Name string `json:"name"`
}

// UnmarshalJSON sets *m to a copy of data while respecting defaults if specified.
func (m *DatabaseClusterSpecBackupResourcesClaimsInner) UnmarshalJSON(data []byte) error {

	type Alias DatabaseClusterSpecBackupResourcesClaimsInner // To avoid infinite recursion
    return json.Unmarshal(data, (*Alias)(m))
}

// AssertDatabaseClusterSpecBackupResourcesClaimsInnerRequired checks if the required fields are not zero-ed
func AssertDatabaseClusterSpecBackupResourcesClaimsInnerRequired(obj DatabaseClusterSpecBackupResourcesClaimsInner) error {
	elements := map[string]interface{}{
		"name": obj.Name,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertDatabaseClusterSpecBackupResourcesClaimsInnerConstraints checks if the values respects the defined constraints
func AssertDatabaseClusterSpecBackupResourcesClaimsInnerConstraints(obj DatabaseClusterSpecBackupResourcesClaimsInner) error {
	return nil
}
