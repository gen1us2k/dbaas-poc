/*
 * Percona Everest schema
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi


import (
	"encoding/json"
)



// DatabaseClusterSpecBackupStoragesValueVolumeSpecPersistentVolumeClaim - PersistentVolumeClaim to specify PVC spec for the volume for mysql data. It has the highest level of precedence, followed by HostPath and EmptyDir. And represents the PVC specification.
type DatabaseClusterSpecBackupStoragesValueVolumeSpecPersistentVolumeClaim struct {

	// accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
	AccessModes []string `json:"accessModes,omitempty"`

	DataSource DatabaseClusterSpecBackupStoragesValueVolumeSpecPersistentVolumeClaimDataSource `json:"dataSource,omitempty"`

	DataSourceRef DatabaseClusterSpecBackupStoragesValueVolumeSpecPersistentVolumeClaimDataSourceRef `json:"dataSourceRef,omitempty"`

	Resources DatabaseClusterSpecBackupStoragesValueVolumeSpecPersistentVolumeClaimResources `json:"resources,omitempty"`

	Selector DatabaseClusterSpecBackupStoragesValueVolumeSpecPersistentVolumeClaimSelector `json:"selector,omitempty"`

	// storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
	StorageClassName string `json:"storageClassName,omitempty"`

	// volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
	VolumeMode string `json:"volumeMode,omitempty"`

	// volumeName is the binding reference to the PersistentVolume backing this claim.
	VolumeName string `json:"volumeName,omitempty"`
}

// UnmarshalJSON sets *m to a copy of data while respecting defaults if specified.
func (m *DatabaseClusterSpecBackupStoragesValueVolumeSpecPersistentVolumeClaim) UnmarshalJSON(data []byte) error {

	type Alias DatabaseClusterSpecBackupStoragesValueVolumeSpecPersistentVolumeClaim // To avoid infinite recursion
    return json.Unmarshal(data, (*Alias)(m))
}

// AssertDatabaseClusterSpecBackupStoragesValueVolumeSpecPersistentVolumeClaimRequired checks if the required fields are not zero-ed
func AssertDatabaseClusterSpecBackupStoragesValueVolumeSpecPersistentVolumeClaimRequired(obj DatabaseClusterSpecBackupStoragesValueVolumeSpecPersistentVolumeClaim) error {
	if err := AssertDatabaseClusterSpecBackupStoragesValueVolumeSpecPersistentVolumeClaimDataSourceRequired(obj.DataSource); err != nil {
		return err
	}
	if err := AssertDatabaseClusterSpecBackupStoragesValueVolumeSpecPersistentVolumeClaimDataSourceRefRequired(obj.DataSourceRef); err != nil {
		return err
	}
	if err := AssertDatabaseClusterSpecBackupStoragesValueVolumeSpecPersistentVolumeClaimResourcesRequired(obj.Resources); err != nil {
		return err
	}
	if err := AssertDatabaseClusterSpecBackupStoragesValueVolumeSpecPersistentVolumeClaimSelectorRequired(obj.Selector); err != nil {
		return err
	}
	return nil
}

// AssertDatabaseClusterSpecBackupStoragesValueVolumeSpecPersistentVolumeClaimConstraints checks if the values respects the defined constraints
func AssertDatabaseClusterSpecBackupStoragesValueVolumeSpecPersistentVolumeClaimConstraints(obj DatabaseClusterSpecBackupStoragesValueVolumeSpecPersistentVolumeClaim) error {
	return nil
}
