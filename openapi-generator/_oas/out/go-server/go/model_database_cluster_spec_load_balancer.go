/*
 * Percona Everest schema
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi


import (
	"encoding/json"
)



// DatabaseClusterSpecLoadBalancer - LoadBalancer contains a load balancer settings. For PXC it's haproxy or proxysql. For PSMDB it's mongos.
type DatabaseClusterSpecLoadBalancer struct {

	Annotations map[string]string `json:"annotations,omitempty"`

	Configuration string `json:"configuration,omitempty"`

	// Service Type string describes ingress methods for a service
	ExposeType string `json:"exposeType,omitempty"`

	Image string `json:"image,omitempty"`

	LoadBalancerSourceRanges []string `json:"loadBalancerSourceRanges,omitempty"`

	Resources DatabaseClusterSpecBackupResources `json:"resources,omitempty"`

	Size int32 `json:"size,omitempty"`

	// ServiceExternalTrafficPolicyType describes how nodes distribute service traffic they receive on one of the Service's \"externally-facing\" addresses (NodePorts, ExternalIPs, and LoadBalancer IPs).
	TrafficPolicy string `json:"trafficPolicy,omitempty"`

	// LoadBalancerType contains supported loadbalancers. It can be proxysql or haproxy for PXC clusters, mongos for PSMDB clusters or pgbouncer for Postgresql clusters.
	Type string `json:"type,omitempty"`
}

// UnmarshalJSON sets *m to a copy of data while respecting defaults if specified.
func (m *DatabaseClusterSpecLoadBalancer) UnmarshalJSON(data []byte) error {

	type Alias DatabaseClusterSpecLoadBalancer // To avoid infinite recursion
    return json.Unmarshal(data, (*Alias)(m))
}

// AssertDatabaseClusterSpecLoadBalancerRequired checks if the required fields are not zero-ed
func AssertDatabaseClusterSpecLoadBalancerRequired(obj DatabaseClusterSpecLoadBalancer) error {
	if err := AssertDatabaseClusterSpecBackupResourcesRequired(obj.Resources); err != nil {
		return err
	}
	return nil
}

// AssertDatabaseClusterSpecLoadBalancerConstraints checks if the values respects the defined constraints
func AssertDatabaseClusterSpecLoadBalancerConstraints(obj DatabaseClusterSpecLoadBalancer) error {
	return nil
}
