/*
 * Percona Everest schema
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi


import (
	"encoding/json"
)



// DatabaseClusterSpecBackupStoragesValueVolumeSpec - VolumeSpec represents a specification to configure volume for underlying database.
type DatabaseClusterSpecBackupStoragesValueVolumeSpec struct {

	EmptyDir DatabaseClusterSpecBackupStoragesValueVolumeSpecEmptyDir `json:"emptyDir,omitempty"`

	HostPath DatabaseClusterSpecBackupStoragesValueVolumeSpecHostPath `json:"hostPath,omitempty"`

	PersistentVolumeClaim DatabaseClusterSpecBackupStoragesValueVolumeSpecPersistentVolumeClaim `json:"persistentVolumeClaim,omitempty"`
}

// UnmarshalJSON sets *m to a copy of data while respecting defaults if specified.
func (m *DatabaseClusterSpecBackupStoragesValueVolumeSpec) UnmarshalJSON(data []byte) error {

	type Alias DatabaseClusterSpecBackupStoragesValueVolumeSpec // To avoid infinite recursion
    return json.Unmarshal(data, (*Alias)(m))
}

// AssertDatabaseClusterSpecBackupStoragesValueVolumeSpecRequired checks if the required fields are not zero-ed
func AssertDatabaseClusterSpecBackupStoragesValueVolumeSpecRequired(obj DatabaseClusterSpecBackupStoragesValueVolumeSpec) error {
	if err := AssertDatabaseClusterSpecBackupStoragesValueVolumeSpecEmptyDirRequired(obj.EmptyDir); err != nil {
		return err
	}
	if err := AssertDatabaseClusterSpecBackupStoragesValueVolumeSpecHostPathRequired(obj.HostPath); err != nil {
		return err
	}
	if err := AssertDatabaseClusterSpecBackupStoragesValueVolumeSpecPersistentVolumeClaimRequired(obj.PersistentVolumeClaim); err != nil {
		return err
	}
	return nil
}

// AssertDatabaseClusterSpecBackupStoragesValueVolumeSpecConstraints checks if the values respects the defined constraints
func AssertDatabaseClusterSpecBackupStoragesValueVolumeSpecConstraints(obj DatabaseClusterSpecBackupStoragesValueVolumeSpec) error {
	return nil
}
