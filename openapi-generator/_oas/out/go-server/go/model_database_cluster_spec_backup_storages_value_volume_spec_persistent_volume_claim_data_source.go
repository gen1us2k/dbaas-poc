/*
 * Percona Everest schema
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi


import (
	"encoding/json"
)



// DatabaseClusterSpecBackupStoragesValueVolumeSpecPersistentVolumeClaimDataSource - dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource.
type DatabaseClusterSpecBackupStoragesValueVolumeSpecPersistentVolumeClaimDataSource struct {

	// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
	ApiGroup string `json:"apiGroup,omitempty"`

	// Kind is the type of resource being referenced
	Kind string `json:"kind"`

	// Name is the name of resource being referenced
	Name string `json:"name"`
}

// UnmarshalJSON sets *m to a copy of data while respecting defaults if specified.
func (m *DatabaseClusterSpecBackupStoragesValueVolumeSpecPersistentVolumeClaimDataSource) UnmarshalJSON(data []byte) error {

	type Alias DatabaseClusterSpecBackupStoragesValueVolumeSpecPersistentVolumeClaimDataSource // To avoid infinite recursion
    return json.Unmarshal(data, (*Alias)(m))
}

// AssertDatabaseClusterSpecBackupStoragesValueVolumeSpecPersistentVolumeClaimDataSourceRequired checks if the required fields are not zero-ed
func AssertDatabaseClusterSpecBackupStoragesValueVolumeSpecPersistentVolumeClaimDataSourceRequired(obj DatabaseClusterSpecBackupStoragesValueVolumeSpecPersistentVolumeClaimDataSource) error {
	elements := map[string]interface{}{
		"kind": obj.Kind,
		"name": obj.Name,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertDatabaseClusterSpecBackupStoragesValueVolumeSpecPersistentVolumeClaimDataSourceConstraints checks if the values respects the defined constraints
func AssertDatabaseClusterSpecBackupStoragesValueVolumeSpecPersistentVolumeClaimDataSourceConstraints(obj DatabaseClusterSpecBackupStoragesValueVolumeSpecPersistentVolumeClaimDataSource) error {
	return nil
}
