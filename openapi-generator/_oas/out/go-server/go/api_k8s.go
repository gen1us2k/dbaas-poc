/*
 * Percona Everest schema
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// K8sAPIController binds http requests to an api service and writes the service results to the http response
type K8sAPIController struct {
	service K8sAPIServicer
	errorHandler ErrorHandler
}

// K8sAPIOption for how the controller is set up.
type K8sAPIOption func(*K8sAPIController)

// WithK8sAPIErrorHandler inject ErrorHandler into controller
func WithK8sAPIErrorHandler(h ErrorHandler) K8sAPIOption {
	return func(c *K8sAPIController) {
		c.errorHandler = h
	}
}

// NewK8sAPIController creates a default api controller
func NewK8sAPIController(s K8sAPIServicer, opts ...K8sAPIOption) Router {
	controller := &K8sAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the K8sAPIController
func (c *K8sAPIController) Routes() Routes {
	return Routes{
		"CreateDatabaseCluster": Route{
			strings.ToUpper("Post"),
			"/v1/kubernetes/{kubernetesName}/database-cluster",
			c.CreateDatabaseCluster,
		},
		"ListDatabases": Route{
			strings.ToUpper("Get"),
			"/v1/kubernetes/{kubernetesName}/database-cluster",
			c.ListDatabases,
		},
		"ListKubernetesClusters": Route{
			strings.ToUpper("Get"),
			"/v1/kubernetes",
			c.ListKubernetesClusters,
		},
		"RegisterKubernetes": Route{
			strings.ToUpper("Post"),
			"/v1/kubernetes",
			c.RegisterKubernetes,
		},
	}
}

// CreateDatabaseCluster - Create a database cluster on given kubernetes cluster
func (c *K8sAPIController) CreateDatabaseCluster(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	kubernetesNameParam := params["kubernetesName"]
	databaseClusterParam := DatabaseCluster{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&databaseClusterParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertDatabaseClusterRequired(databaseClusterParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertDatabaseClusterConstraints(databaseClusterParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateDatabaseCluster(r.Context(), kubernetesNameParam, databaseClusterParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListDatabases - List of created database clusters on provided kubernetes cluster
func (c *K8sAPIController) ListDatabases(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	kubernetesNameParam := params["kubernetesName"]
	result, err := c.service.ListDatabases(r.Context(), kubernetesNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListKubernetesClusters - List of registered kubernetes clusters
func (c *K8sAPIController) ListKubernetesClusters(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ListKubernetesClusters(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RegisterKubernetes - Register Kubernetes cluster in the control plane
func (c *K8sAPIController) RegisterKubernetes(w http.ResponseWriter, r *http.Request) {
	kubernetesClusterParam := KubernetesCluster{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&kubernetesClusterParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertKubernetesClusterRequired(kubernetesClusterParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertKubernetesClusterConstraints(kubernetesClusterParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.RegisterKubernetes(r.Context(), kubernetesClusterParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
