/*
 * Percona Everest schema
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi


import (
	"encoding/json"
)



// DatabaseClusterSpecBackupStoragesValue - BackupStorageSpec represents set of settings to configure backup storage.
type DatabaseClusterSpecBackupStoragesValue struct {

	Affinity DatabaseClusterSpecBackupStoragesValueAffinity `json:"affinity,omitempty"`

	Annotations map[string]string `json:"annotations,omitempty"`

	ContainerSecurityContext DatabaseClusterSpecBackupContainerSecurityContext `json:"containerSecurityContext,omitempty"`

	Labels map[string]string `json:"labels,omitempty"`

	NodeSelector map[string]string `json:"nodeSelector,omitempty"`

	PodSecurityContext DatabaseClusterSpecBackupStoragesValuePodSecurityContext `json:"podSecurityContext,omitempty"`

	PriorityClassName string `json:"priorityClassName,omitempty"`

	Resources DatabaseClusterSpecBackupResources `json:"resources,omitempty"`

	RuntimeClassName string `json:"runtimeClassName,omitempty"`

	SchedulerName string `json:"schedulerName,omitempty"`

	StorageProvider DatabaseClusterSpecBackupStoragesValueStorageProvider `json:"storageProvider,omitempty"`

	Tolerations []DatabaseClusterSpecBackupStoragesValueTolerationsInner `json:"tolerations,omitempty"`

	// BackupStorageType represents backup storage type.
	Type string `json:"type"`

	VerifyTLS bool `json:"verifyTLS,omitempty"`

	VolumeSpec DatabaseClusterSpecBackupStoragesValueVolumeSpec `json:"volumeSpec,omitempty"`
}

// UnmarshalJSON sets *m to a copy of data while respecting defaults if specified.
func (m *DatabaseClusterSpecBackupStoragesValue) UnmarshalJSON(data []byte) error {

	type Alias DatabaseClusterSpecBackupStoragesValue // To avoid infinite recursion
    return json.Unmarshal(data, (*Alias)(m))
}

// AssertDatabaseClusterSpecBackupStoragesValueRequired checks if the required fields are not zero-ed
func AssertDatabaseClusterSpecBackupStoragesValueRequired(obj DatabaseClusterSpecBackupStoragesValue) error {
	elements := map[string]interface{}{
		"type": obj.Type,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertDatabaseClusterSpecBackupStoragesValueAffinityRequired(obj.Affinity); err != nil {
		return err
	}
	if err := AssertDatabaseClusterSpecBackupContainerSecurityContextRequired(obj.ContainerSecurityContext); err != nil {
		return err
	}
	if err := AssertDatabaseClusterSpecBackupStoragesValuePodSecurityContextRequired(obj.PodSecurityContext); err != nil {
		return err
	}
	if err := AssertDatabaseClusterSpecBackupResourcesRequired(obj.Resources); err != nil {
		return err
	}
	if err := AssertDatabaseClusterSpecBackupStoragesValueStorageProviderRequired(obj.StorageProvider); err != nil {
		return err
	}
	for _, el := range obj.Tolerations {
		if err := AssertDatabaseClusterSpecBackupStoragesValueTolerationsInnerRequired(el); err != nil {
			return err
		}
	}
	if err := AssertDatabaseClusterSpecBackupStoragesValueVolumeSpecRequired(obj.VolumeSpec); err != nil {
		return err
	}
	return nil
}

// AssertDatabaseClusterSpecBackupStoragesValueConstraints checks if the values respects the defined constraints
func AssertDatabaseClusterSpecBackupStoragesValueConstraints(obj DatabaseClusterSpecBackupStoragesValue) error {
	return nil
}
